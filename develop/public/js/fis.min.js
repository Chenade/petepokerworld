var gps = {}, selectedList = [];

function get_task_list(callback) {
    ajax('PUT', '/agent/api', data_format('/api/tasks', 0, 'GET', {}, null), function (a) {
        a.error ? callback(a) : callback(task_parser(a));
    });
}

function task_parser(data) {
    data = data['list'];
    var list = [];
    for (var i in data) {
        var temp = {
            'id': data[i]['id'],
            'name': data[i]['name'],
            'priority': data[i]['priority'],
            'createTime': data[i]['createTime'],
            'enabled': data[i]['enable'],
            'fis': data[i]['fis'],
            'start': data[i]['startTime'],
            'end': data[i]['stopTime'],
            'users': data[i]['subtask']
        };
        list.push(temp);
    }
    return list;
}

function create_list(taskQueue) {
    var priority = '';
    for (var i in taskQueue)
        priority += '<li class="list-group-item" id="task' + taskQueue[i]['id'] + '">' + taskQueue[i]['name'] + '<span class="pull-right"><button class="btn btn-xs btn-default"><span class="glyphicon glyphicon-search"></span></button> <button class="btn btn-xs btn-default"><span class="glyphicon glyphicon-edit"></span></button> <button class="btn btn-xs btn-default"><span class="glyphicon glyphicon-remove text-danger"></span></button></span></li>';
    $('#priority').empty().append(priority);
    Sortable.create($('#priority')[0]);
}

function validate() {
    ($('#name').val() && $('#users').val()) ? $('#create_btn').prop('disabled', 0) : $('#create_btn').prop('disabled', 1);
}

function get_gps_data(vid, cb) {
    ajax('PUT', '/agent/api', data_format('/api/gps/' + vid, 0, 'GET', {}, null), function (a) {
        cb(a);
    });
}

$(document).ready(function () {
    loading(true);
    var start = moment().subtract(6, 'days'), end = moment();
    date_range_init(start, end);
    validate();
    var taskQueue = [], map0, map1, playbackList = [], selection;
    var initialed = false, conditions = data_format('/api/video/search', 0, 'POST', {
        'startTime': $('#search_time').data('daterangepicker').startDate.format('YYYY-MM-DD HH:mm:ss'),
        'stopTime': $('#search_time').data('daterangepicker').endDate.format('YYYY-MM-DD HH:mm:ss'),
        'self': true
    }, null, 'fis');
    get_task_list(function (a) {
        a.error || ((taskQueue = a), create_list(taskQueue));
        loading(false);
    });
    get_users(false, function (a) {
        if (!a.error) {
            $('#modal_tree').jstree({
                'plugins': ["wholerow", "changed", "search", "checkbox"],
                'core': {
                    "check_callback": true,
                    'data': a['users'],
                    'themes': {
                        'name': 'proton',
                    }
                }
            }).bind("loaded.jstree changed.jstree", function (event, data) {
                $(this).jstree("open_all");
            });
        }
    });
    var table = $('#videos').DataTable({
        "processing": true,
        "serverSide": true,
        "dom": 'lBprtip',
        "lengthMenu": [10, 25, 50, 100],
        "iDisplayLength": 25,
        "order": [[0, 'desc']],
        "language": {"url": 'files/' + lang + '.json'},
        "buttons": [{
            "text": langDict['searchOptional'],
            "action": function () {
                $('#search_modal').modal({
                    backdrop: 'static',
                    keyboard: true,
                    show: true
                });
            }
        }, {
            "text": langDict['selectAll'],
            "action": function () {
                $('#videos').DataTable().rows()[0].length && $('#videos > tbody > tr').each(function () {
                    $(this).find('.text-center').find('input[type=checkbox]').prop('checked', 1)
                });
            }
        }, {
            "text": langDict['diselectAll'],
            "action": function () {
                $('#videos').DataTable().rows()[0].length && $('#videos > tbody > tr').each(function () {
                    $(this).find('.text-center').find('input[type=checkbox]').prop('checked', 0)
                });
            }
        }, {
            "text": langDict['delete'],
            "action": function () {
                var videos = [];
                $('#videos > tbody > tr').each(function () {
                    var row = table.row($(this)), vid = row.data()[0], checked = $('#s' + vid).prop('checked');
                    checked && ($(this).toggleClass('selected'), videos.push(vid));
                });
                if (videos.length) {
                    table.buttons().disable();
                    var data = data_format("/api/videos", 0, "DELETE", {"id": videos}, null);
                    ajax('PUT', '/agent/api', data, function (a) {
                        a.error ? ($.growl.error({message: a.error}), table.buttons().enable()) : ($.growl.notice({message: langDict['wasDeleted']}), video_search(table, conditions, function (b) {
                            if (!b.error) {
                                playbackList = b.origin;
                                initialed || ($.growl.notice({message: langDict['result'] + ': ' + b.total + ' ' + langDict['videos']}), initialed = true);
                            }
                            table.buttons().enable();
                        }));
                    });
                }
            }
        }, {
            "text": langDict['preservation'],
            "action": function () {
                var videos = [];
                $('#videos > tbody > tr').each(function () {
                    var row = table.row($(this)).data(), vid = row[0], select = $('#s' + vid).prop('checked'),
                        keep = $('#k' + vid).prop('checked');
                    select && (keep || videos.push(vid));
                });
                if (videos.length) {
                    table.buttons().disable();
                    var data = data_format("/api/videos", 0, "PUT", {"id": videos, "keep": 1}, null);
                    ajax('PUT', '/agent/api', data, function (a) {
                        a.error ? ($.growl.error({message: a.error}), table.buttons().enable()) : ($.growl.notice({message: langDict['wasModified']}), video_search(table, conditions, function (b) {
                            if (!b.error) {
                                playbackList = b.origin;
                                initialed || ($.growl.notice({message: langDict['result'] + ': ' + b.total + ' ' + langDict['videos']}), initialed = true);
                            }
                            table.buttons().enable();
                        }));
                    });
                }
            }
        }, {
            "text": langDict['disposable'],
            "action": function () {
                var videos = [];
                $('#videos > tbody > tr').each(function () {
                    var row = table.row($(this)).data(), vid = row[0], select = $('#s' + vid).prop('checked'),
                        keep = $('#k' + vid).prop('checked');
                    select && (keep && videos.push(vid));
                });
                if (videos.length) {
                    table.buttons().disable();
                    var data = data_format("/api/videos", 0, "PUT", {"id": videos, "keep": 0}, null);
                    ajax('PUT', '/agent/api', data, function (a) {
                        a.error ? ($.growl.error({message: a.error}), table.buttons().enable()) : ($.growl.notice({message: langDict['wasModified']}), video_search(table, conditions, function (b) {
                            if (!b.error) {
                                playbackList = b.origin;
                                initialed || ($.growl.notice({message: langDict['result'] + ': ' + b.total + ' ' + langDict['videos']}), initialed = true);
                            }
                            table.buttons().enable();
                        }));
                    });
                }
            }
        }], "columnDefs": [
            {"targets": [0], "visible": false, "searchable": false},
            {"targets": [1], "visible": true, "searchable": true, "className": "text-center"},
            {"targets": [2], "visible": true, "searchable": false},
            {"targets": [3], "visible": true, "searchable": true},
            {"targets": [4], "visible": true, "searchable": true},
            {"targets": [5], "visible": true, "searchable": true},
            {"targets": [6], "visible": true, "searchable": true},
            {"targets": [7], "visible": true, "searchable": true}
        ], "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
            $('img', nRow).lazyLoadXT();
        }, "ajax": $.fn.dataTable.pipeline(conditions, function (a) {
            console.log(a)
            if (!a.error) {
                playbackList = a.origin;
            }
        })
    });
    $(document).on('click', '[id^=k]input[type=checkbox]', function (e) {
        var keep = $(this).prop('checked') ? 1 : 0;
        ajax('PUT', '/agent/api', data_format("/api/videos", 0, "PUT", {
            "id": [parseInt($(this).attr('id').slice(1))],
            "keep": keep
        }, null), function (a) {
            a.error ? $.growl.error({message: a.error}) : $.growl.notice({message: langDict['wasModified']});
        });
    });
    $('.dropdown-toggle').on('click', function () {
        if (inArray(['users', 'searchUsers'], $(this).attr('data-id'))) {
            selection = $('#' + $(this).attr('data-id'));
            $('#modal_search').val('');
            $('#modal_tree').jstree(true).search('');
            var tree = $('#modal_tree');
            $('#user_modal').modal({
                backdrop: 'static',
                keyboard: true,
                show: true
            });
        }
    });
    $('#modal_tree').on('search.jstree', function (e, data) {
        $(this).find('.jstree-search:eq(0)')[0] && $(this).find('.jstree-search:eq(0)')[0].scrollIntoView();
    });
    $('#user_modal').on('shown.bs.modal hidden.bs.modal', function (e) {
        if ("shown" == e.type) {
            var wid = $(window).height(), content = $(this).find('.jstree').parent();
            (content.height() > (0.8 * wid)) && content.height(parseInt(0.7 * wid));
        }
    });
    $(document).on('click', '#priority .list-group-item', function (e) {
        var target = $(this);
        $('.list-group-item').each(function () {
            $(this).removeClass('selected-item');
        });
        target.addClass('selected-item');
        for (var i in taskQueue) {
            var id = parseInt(target.attr('id').replace('task', ''));
            if (taskQueue[i]['id'] == id) {
                var data = [], users = taskQueue[i]['users'];
                for (var j in users) {
                    var temp = {'text': users[j]['query'], 'icon': 'fa fa-user'};
                    for (var k in users[j]['subtaskInfo']) {
                        var dev = users[j]['subtaskInfo'][k];
                        temp['nodes'] || (temp['nodes'] = []);
                        temp['nodes'].push({
                            'text': dev['device'] + '&nbsp;(' + dev['uploaded'] + '/' + (dev['unupload'] + dev['uploaded']) + ')',
                            'icon': 'fa fa-video-camera'
                        });
                    }
                    data.push(temp);
                }
                $('#tree').empty().treeview({'data': data});
                break;
            }
        }
    });
    var foucs = {};
    $(document).on('click', 'table .play-icon', function (e) {
        switch (e.type) {
            case 'click':
                var row = table.row($(this).parents('tr')).data();
                $('#video_download').attr('onclick', '');
                $('#video_info').empty();
                foucs = {};
                for (var i in playbackList) {
                    if (playbackList[i]['id'] == row[0]) {
                        foucs = playbackList[i];
                        $('#video_content').html(foucs.content);
                        $('#video_info').append('<tr><td>' + foucs.startTime + '</td><td>' + foucs.stopTime + '</td><td>' + formatBytes(foucs.size, 0, 1024) + '</td><td>' + foucs.type + '</td></tr>');
                        $('#video_download').attr('onclick', 'window.location.href=\'' + foucs.downloadUrl + '\'');
                        break;
                    }
                }
                $('#player_modal').find('.modal-title').text(row[3]);
                $('#player_modal').modal({
                    backdrop: 'static',
                    keyboard: true,
                    show: true
                });
                break;
        }
    });
    var plyr = null;
    $('#player_modal').on('show.bs.modal shown.bs.modal hidden.bs.modal', function (e) {
        switch (e.type) {
            case 'show':
                plyr ? (plyr.source = {
                    "type": 'video',
                    "poster": foucs['snapshotUrl'],
                    "sources": [{"src": foucs['videoUrl'], "type": 'video/mp4'}]
                }) : ($('#plyr').attr('poster', foucs['snapshotUrl']), $('#plyr').find('source').attr('src', foucs['videoUrl']));
                gps = {};
                var gps_text = '';
                get_gps_data(foucs['id'], function (a) {
                    if (!a.error && a['gpsList']) {
                        for (var i in a['gpsList']) {
                            gps_text += '<li class="list-group-item" id="gpsItem_' + Date.parse(a['gpsList'][i]['timestamp']) + '">' + a['gpsList'][i]['timestamp'] + ':&nbsp;&nbsp;' + a['gpsList'][i]['latitude'] + ',  ' + a['gpsList'][i]['longitude'] + '</li>';
                            gps[a['gpsList'][i]['timestamp']] = a['gpsList'][i];
                        }
                    }
                    $('#gps_list').html(gps_text);
                });
                plyr || (plyr = new Plyr('#plyr', {
                    controls: [
                        'play-large', // The large play button in the center
                        'restart', // Restart playback
                        'rewind', // Rewind by the seek time (default 10 seconds)
                        'play', // Play/pause playback
                        'fast-forward', // Fast forward by the seek time (default 10 seconds)
                        'progress', // The progress bar and scrubber for playback and buffering
                        'current-time', // The current time of playback
                        'duration', // The full duration of the media
                        'mute', // Toggle mute
                        'volume', // Volume control
                        'captions', // Toggle captions
                        'settings', // Settings menu
                        'airplay', // Airplay (currently Safari only)
                        'download', // Show a download button with a link to either the current source or a custom URL you specify in your options
                        'fullscreen', // Toggle fullscreen
                    ]
                }));
                break;
            case 'shown':
                $('#map0').height($('video').height());
                $('#gps_list').width($('#gps_list').parent().width());
                if (map0) markers['_lastOne'] && markers['map0'][markers['_lastOne']] && map0.removeLayer(markers['map0'][markers['_lastOne']]);
                else map0 = map_initial('map0');
                var instance = $('video')[0], temp = null, last_li = null;
                instance.ontimeupdate = function (e) {
                    var tsmp = moment(foucs['startTime']).add(Math.floor($('video').get(0).currentTime), 'second').format('YYYY-MM-DD HH:mm:ss');
                    if (temp != tsmp && gps[tsmp]) {
                        last_li && last_li.removeClass('active');
                        $('#gpsItem_' + Date.parse(tsmp)).addClass('active');
                        var list = $('#gps_list')[0].children, scroll_height = 0;
                        for (var i in list) {
                            if ($('#' + list[i]['id']).hasClass('active')) break;
                            (i >= 1) && (scroll_height += ($('#' + list[i]['id']).outerHeight() + 3));
                        }
                        last_li && $('#autoScroll').prop('checked') && $('#gps_list').animate({scrollTop: scroll_height});
                        handlerMarker(map1, {
                            'id': foucs.id,
                            'gps': gps[tsmp]
                        }, true, true, tsmp, gps);
                        temp = tsmp;
                        last_li = $('#gpsItem_' + Date.parse(tsmp));
                    }
                };
                break;
            case 'hidden':
                plyr.stop();
                break;
        }
    });
    $('#search_modal').on('shown.bs.modal hidden.bs.modal', function (e) {
        var markers = [];
        var polygon;
        switch (e.type) {
            case 'shown':
                $('#map1').height(480);
                if (!map1) {
                    map1 = map_initial('map1')
                    map1.on('click', function (e) {
                        //console.log(e.latlng);
                        if (markers.length >= 4) {
                            markers.forEach(function (item) {
                                map1.removeLayer(item);
                            });
                            map1.removeLayer(polygon);
                            markers = [];
                            polygon = null;
                        } else
                            markers.push(L.marker(e.latlng).addTo(map1));

                        if (markers.length == 4) {
                            var latlngs = []
                            markers.forEach(function (item) {
                                //console.log(item.getLatLng());
                                latlngs.push(item.getLatLng());
                            });
                            polygon = L.polygon(latlngs).addTo(map1);
                        }
                    });
                }
                $("#searchBtn").click(function (e) {
                    var data = {}, condition = false;
                    ['_user', '_time', '_area'].forEach(function (s) {
                        if ($('#condition' + s).prop('checked')) {
                            switch (s) {
                                case '_user':
                                    $('#searchUsers').val() && (data["post"] = $('#searchUsers').val(), condition = true);
                                    break;
                                case '_time':
                                    condition = true;
                                    data['startTime'] = $('#search_time').data('daterangepicker').startDate.format('YYYY-MM-DD HH:mm:ss');
                                    data['stopTime'] = $('#search_time').data('daterangepicker').endDate.format('YYYY-MM-DD HH:mm:ss');
                                    break;
                                case '_area':
                                    if (polygon) {
                                        condition = true;
                                        var geoJson = polygon.toGeoJSON();
                                        delete geoJson['properties'];
                                        data["area"] = geoJson;
                                    }
                                    break;
                            }
                        }
                    });
                    if (condition) {
                        conditions = data_format('/api/video/search', 0, 'POST', data, null, 'fis');
                        initialed = false;
                        video_search(table, conditions, function (a) {
                            if (!a.error) {
                                playbackList = a.origin;
                                initialed || ($.growl.notice({message: langDict['result'] + ': ' + a.total + ' ' + langDict['videos']}), initialed = true);
                            }
                        });
                        $('.modal').modal('hide');
                    }
                });
                break;
            case 'hidden':
                break;
        }
    });
    $(document).on('click', '.btn', function (e) {
        var btn = $(this);
        switch (btn.attr('id')) {
            case 'create_btn':
                btn.button('loading');
                var data = data_format('/api/tasks', 0, 'POST', {
                    'name': $('#name').val(),
                    'enable': 1,
                    'priority': 1,
                    'fis': 'test',
                    'startTime': $('#task_time').data('daterangepicker').startDate.format('YYYY-MM-DD HH:mm:ss'),
                    'stopTime': $('#task_time').data('daterangepicker').endDate.format('YYYY-MM-DD HH:mm:ss'),
                    'query': $('#users').val() ? $('#users').val() : []
                }, null);
                ajax('PUT', '/agent/api', data, function (a) {
                    if (a.error)
                        $.growl.error({message: a.error});
                    else {
                        $.growl.notice({message: $('#name').val() + " " + langDict['wasCreated']});
                        get_task_list(function (a) {
                            a.error || ((taskQueue = a), create_list(taskQueue));
                        });
                    }
                    btn.button('reset');
                });
                break;
            case 'edit_apply':
                btn.button('loading');
                var enabled = $('#edit_enabled').prop('checked') ? 1 : 0,
                    id = parseInt($('#edit_id').val().replace('task', ''));
                ajax('PUT', '/agent/api', data_format('/api/tasks/' + id, 0, 'PUT', {
                    'enable': enabled
                }, null), function (a) {
                    if (a.error)
                        $.growl.error({message: a.error});
                    else {
                        for (var i in taskQueue) if (taskQueue[i]['id'] == id) {
                            taskQueue[i]['enabled'] = enabled;
                            break;
                        }
                        $.growl.notice({message: $('#edit_name').val() + " " + langDict['wasModified']});
                        $('#task_modal').modal('hide');
                    }
                    btn.button('reset');
                });
                break;
            case 'users_apply':
                if (selection) {
                    var tree = $('#modal_tree'), selected = tree.jstree('get_selected');
                    selection.empty();
                    for (var i in selected) {
                        var node = tree.jstree().get_node(selected[i]).original;
                        (node.icon == 'fa fa-user' || node.icon == 'fa fa-child') && selection.append('<option selected>' + node.more.id + '</option>');
                    }
                    selection.selectpicker('refresh');
                    validate();
                }
                break;
            default:
                if (btn.find('span').hasClass('glyphicon-edit')) {
                    var target = btn.parents('li').text().trim();
                    $('#task_modal').find('.modal-title').text(target);
                    for (var i in taskQueue) {
                        var id = parseInt(btn.parents('li').attr('id').replace('task', ''));
                        if (taskQueue[i]['id'] == id) {
                            $('#edit_id').val(taskQueue[i]['id']);
                            $('#edit_name').val(taskQueue[i]['name']);
                            $('#edit_time').val(taskQueue[i]['createTime']);
                            $('#edit_start').val(taskQueue[i]['start']);
                            $('#edit_end').val(taskQueue[i]['end']);
                            $('#edit_enabled').prop('checked', parseInt(taskQueue[i]['enabled']));
                            break;
                        }
                    }
                    $('#task_modal').modal({
                        backdrop: 'static',
                        keyboard: true,
                        show: true
                    });
                } else if (btn.find('span').hasClass('glyphicon-remove')) {
                    var target = btn.parents('li').text().trim(),
                        id = parseInt(btn.parents('li').attr('id').replace('task', ''));
                    ajax('PUT', '/agent/api', data_format('/api/tasks/' + id, 0, 'DELETE', {}, null), function (a) {
                        if (a.error)
                            $.growl.error({message: a.error});
                        else {
                            $.growl.notice({message: target + " " + langDict['wasDeleted']});
                            get_task_list(function (a) {
                                a.error || ((taskQueue = a), create_list(taskQueue));
                            });
                            $('#tree').empty().treeview({'data': []});
                        }
                    });
                } else if (btn.find('span').hasClass('glyphicon-search')) {
                    var users = [], start, end, target = $(this).closest('.list-group-item').attr('id');
                    for (var i in taskQueue) if ('task' + taskQueue[i]['id'] == target) {
                        start = taskQueue[i]['start'];
                        end = taskQueue[i]['end'];
                        for (var j in taskQueue[i]['users']) users.push(taskQueue[i]['users'][j]['query']);
                    }
                    conditions = data_format('/api/video/search', 0, 'POST', {
                        "post": users,
                        "startTime": start,
                        "stopTime": end
                    }, null, 'fis');
                    initialed = false;
                    video_search(table, conditions, function (a) {
                        if (!a.error) {
                            playbackList = a.origin;
                            initialed || ($.growl.notice({message: langDict['result'] + ': ' + a.total + ' ' + langDict['videos']}), initialed = true);
                            $('a[href=\\#task_tab]').attr('aria-expanded', false);
                            $('a[href=\\#task_tab]').parent().removeClass('active');
                            $('a[href=\\#video_tab]').parent().addClass('active');
                            $('a[href=\\#video_tab]').attr('aria-expanded', true);
                            $('#task_tab').removeClass('active in');
                            $('#video_tab').addClass('active in');
                        }
                    });
                }
                break;
        }
    });
    $('#users,#name').on('keyup change click', function (e) {
        validate();
    });
    $("#priority").sortable({
        change: function (event, ui) {
            //console.log(event);
        }
    });
});