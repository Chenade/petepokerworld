"use strict";

function SVGCreate(targetDivID, videoSrc, videoWidth, videoHeight, divWidth) {
    var drawtype = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'poly';
    var isRTSPMode = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;
    var callback = arguments[7];
    var initialCallback = arguments[8];

    this.divTarget = document.getElementById(targetDivID);

    this.divControl;
    this.divLiveStreaming;
    this.playerId = 'vxg';
    this.objVXGPlayer;
    this.divSvgPanel;

    this.svgPanel;
    this.focusCircle;
    this.areaObjectList = [];
    this.circleList = [];

    this.videoSize = [videoWidth, videoHeight];
    this.videoRatio = divWidth / videoWidth;
    this.svgRatio = videoWidth / divWidth;
    this.src = videoSrc;
    this.isRTSPMode = isRTSPMode;
    this.drawType = drawtype;

    this.buttonControl = {};
    var _this = this;

    this.initial = function () {
        this.initialPanel();
        if (initialCallback) initialCallback(_this);
        //this.initialButton();
    }, this.initialPanel = function () {
        //Add Class
        this.divTarget.setAttribute("width", divWidth);
        this.divTarget.classList.add("targetDiv");

        //Create live streaming panel
        if (this.isRTSPMode) {
            //console.warn("RTSP mode");
            this.divLiveStreaming = document.createElement("div");
            this.divLiveStreaming.setAttribute("id", this.playerId);
            this.divLiveStreaming.setAttribute("src", this.src);
            this.divLiveStreaming.setAttribute("class", "vxgplayer");
            this.divLiveStreaming.setAttribute("avsync", "");
            this.divLiveStreaming.setAttribute("autostart", "");
            this.divLiveStreaming.setAttribute("width", divWidth);
            this.divLiveStreaming.setAttribute("height", this.videoSize[1] * this.videoRatio);
        } else {
            //console.warn("Image mode");
            this.divLiveStreaming = document.createElement("div");
            this.divLiveStreaming.setAttribute("style", "width:" + divWidth + "px;height:" + this.videoSize[1] * this.videoRatio + "px;position:relative;");

            var image = document.createElement("img");
            image.setAttribute("src", this.src);
            image.setAttribute("onerror", 'this.src="/img/default.jpg"');
            // image.setAttribute("width", divWidth);
            // image.setAttribute("height", this.videoSize[1]*this.videoRatio);
            image.setAttribute("width", "100%");
            image.setAttribute("height", "100%");
            image.setAttribute("style", "border-radius: 4px");

            this.divLiveStreaming.appendChild(image);
        }

        this.divSvgPanel = document.createElement("div");
        this.divSvgPanel.classList.add("svg-panel");
        this.divSvgPanel.id = "svg-panel";
        this.divControl = document.createElement("div");
        this.divControl.classList.add("control");

        //Remove
        this.buttonControl.new = document.createElement("button");
        this.buttonControl.edit = document.createElement("button");
        this.buttonControl.delete = document.createElement("button");
        this.buttonControl.finish = document.createElement("button");
        // this.divControl.appendChild(this.buttonControl.new)
        // this.divControl.appendChild(this.buttonControl.edit)
        // this.divControl.appendChild(this.buttonControl.delete)
        // this.divControl.appendChild(this.buttonControl.finish)
        this.buttonControl.new.appendChild(document.createTextNode("New"));
        this.buttonControl.edit.appendChild(document.createTextNode("Edit"));
        this.buttonControl.delete.appendChild(document.createTextNode("Delete"));
        this.buttonControl.finish.appendChild(document.createTextNode("Finish"));
        this.buttonControl.new.setAttribute("class", "svg-feature");
        this.buttonControl.edit.setAttribute("class", "svg-feature");
        this.buttonControl.delete.setAttribute("class", "svg-feature");
        this.buttonControl.finish.setAttribute("class", "svg-feature");
        this.buttonControl.new.setAttribute("id", "btn-new");
        this.buttonControl.edit.setAttribute("id", "btn-edit");
        this.buttonControl.delete.setAttribute("id", "btn-delete");
        this.buttonControl.finish.setAttribute("id", "btn-finish");

        //Append
        this.divTarget.appendChild(this.divControl);
        this.divTarget.appendChild(this.divLiveStreaming);
        if (this.isRTSPMode) {
            //Set object
            this.objVXGPlayer = vxgplayer(this.playerId, {
                url: this.src,
                nmf_path: 'media_player.nmf',
                nmf_src: 'pnacl/media_player.nmf',
                latency: 5000,
                aspect_ratio_mode: 1,
                autohide: 3,
                controls: true,
                connection_timeout: 10000,
                connection_udp: 0,
                custom_digital_zoom: false
            });
        }

        this.divLiveStreaming.appendChild(this.divSvgPanel);

        //Set svg panel
        this.svgPanel = new SVG('svg-panel').size('100%', '100%').viewbox(0, 0, this.videoSize[0], this.videoSize[1]);
        //Remove the panel mouselistener
        document.getElementById('svg-panel').addEventListener("mouseup", function (e) {
            document.getElementById('svg-panel').removeEventListener('mousemove', _this.svgControlPanel.changePolyLocation);
            document.getElementById('svg-panel').removeEventListener('mousemove', _this.svgControlPanel.changeRectLocation);
        });

        //Disabled Edit, delete, finish button
        _this.disabledSpecificButton("btn-edit");
        _this.disabledSpecificButton("btn-delete");
        _this.disabledSpecificButton("btn-finish");
    };

    this.initialButton = function () {
        this.buttonControl.new.addEventListener('click', this.svgControlPanel.createRegion);
        this.buttonControl.edit.addEventListener('click', this.svgControlPanel.modifyRegion);
        this.buttonControl.delete.addEventListener('click', this.svgControlPanel.removePoly);
        this.buttonControl.finish.addEventListener('click', this.svgControlPanel.getPolyPoint);
    };

    this.disabledAllButton = function () {
        document.querySelectorAll("button.svg-feature").forEach(function (d) {
            d.setAttribute("disabled", "");
        });
    };

    this.enabledAllButton = function () {
        document.querySelectorAll("button.svg-feature").forEach(function (d) {
            d.removeAttribute("disabled", "");
        });
    };

    this.disabledSpecificButton = function (buttonName) {
        document.querySelectorAll("button.svg-feature#" + buttonName).forEach(function (d) {
            d.setAttribute("disabled", "");
        });
    };

    this.enabledSpecificButton = function (buttonName) {
        document.querySelectorAll("button.svg-feature#" + buttonName).forEach(function (d) {
            d.removeAttribute("disabled", "");
        });
    };

    this.svgControlPanel = {
        isCreating: false,
        isModify: false,
        createRegion: function createRegion(custom) {
            if (custom == undefined) {
                if (_this.drawType == "poly") _this.svgControlPanel.createPolyRegion(); else if (_this.drawType == "rect") _this.svgControlPanel.createRectRegion();
            } else {
                if (_this.drawType == "poly") _this.svgControlPanel.createPolyRegionByCustom(custom); else if (_this.drawType == "rect") _this.svgControlPanel.createRectRegionByCustom(custom);
            }
            return custom;
        },
        changeRegionType: function changeRegionType(RegionType) {
            if (RegionType == "poly" || RegionType == "rect") {
                _this.drawType = RegionType;
                _this.svgControlPanel.removePoly();
                return RegionType;
            } else console.warn("Error Type");

        },
        createRectRegion: function createRectRegion() {
            if (this.isCreating) {
                console.warn("The creating progress is still process...");
                return;
            }
            if (this.isModify) {
                console.warn("The modify progress is still process...");
                return;
            }
            if (_this.areaObjectList.length > 0) {
                console.warn("The area has been created.");
                return;
            }
            this.isCreating = true;

            _this.disabledAllButton();

            var poly = _this.svgPanel.rect().fill("#ffff99").opacity(0.5).draw({snapToGrid: 10});
            poly.on("drawstop", function () {
                _this.isModify = false;
                _this.enabledAllButton();
                _this.disabledSpecificButton("btn-new");
                _this.areaObjectList.push(poly);

                //console.log(poly);
                //console.log(_this.svgControlPanel.getPolyPoint());

                _this.svgControlPanel.isCreating = false;
                _this.isRTSPMode && _this.objVXGPlayer.controls(1);
                $('#draw').length && drawBtn(1);
            });
        },
        createPolyRegion: function createPolyRegion() {
            if (this.isCreating) {
                console.warn("The creating progress is still process...");
                return;
            }
            if (this.isModify) {
                console.warn("The modify progress is still process...");
                return;
            }
            if (_this.areaObjectList.length > 0) {
                console.warn("The area has been created.");
                return;
            }
            this.isCreating = true;

            _this.disabledAllButton();

            var poly = _this.svgPanel.polygon().fill("#ffff99").opacity(0.5).draw({snapToGrid: 10});
            var numClick = 0;

            var event_DrawPanelDoubleClick = function event_DrawPanelDoubleClick() {
                numClick++;
                setTimeout(function (d) {
                    numClick = 0;
                }, 250);

                if (numClick == 2) {
                    //End of drwaing.
                    poly.draw('done');
                    poly.off('drawstart');

                    //Remove mouse event
                    this.removeEventListener('click', event_DrawPanelDoubleClick);

                    //Remove the duplicated point.
                    var arrPolyPoint = poly.array().value;
                    if (arrPolyPoint[arrPolyPoint.length - 1].toString() == arrPolyPoint[arrPolyPoint.length - 2].toString()) {
                        arrPolyPoint.pop();
                        poly.plot(arrPolyPoint);
                    }

                    //Record the point
                    _this.areaObjectList.push(poly);
                    _this.isModify = false;
                    _this.enabledAllButton();
                    _this.disabledSpecificButton("btn-new");

                    _this.svgControlPanel.isCreating = false;
                    _this.isRTSPMode && _this.objVXGPlayer.controls(1);
                    $('#draw').length && drawBtn(1);
                }
            };

            //When double click the panel, finish creating the poly.
            poly.on('drawstart', function (e) {
                document.getElementById('svg-panel').addEventListener('click', event_DrawPanelDoubleClick);
            });
        },

        createRectRegionByCustom: function createRectRegionByCustom(custom) {
            this.removePoly();

            var parse = custom.map(function (d) {
                return [d.x * _this.videoSize[0], d.y * _this.videoSize[1]];
            });
            //console.warn(parse);
            var x = parse[0][0],
                y = parse[0][1],
                width = Math.abs(parse[0][0] - parse[1][0]),
                height = Math.abs(parse[0][1] - parse[2][1]);
            var tmp = _this.svgPanel.rect(width, height).fill('#ffff99').move(x, y).opacity(0.5);
            //tmp.fill("#ffff99");

            _this.areaObjectList.push(tmp);
        },

        createPolyRegionByCustom: function createPolyRegionByCustom(custom) {
            this.removePoly();
            var parse = custom.map(function (d) {
                return [d.x * _this.videoSize[0], d.y * _this.videoSize[1]];
            });
            var tmp = _this.svgPanel.polygon(parse);
            tmp.fill("#ffff99").opacity(0.5);

            _this.areaObjectList.push(tmp);
        },

        modifyRegion: function modifyRegion() {
            if (_this.drawType == "poly") _this.svgControlPanel.modifyPolyRegion(); else if (_this.drawType == "rect") _this.svgControlPanel.modifyRectRegion();
        },
        modifyRectRegion: function modifyRectRegion() {
            //Append top-left circle
            var circleTopLeft = _this.svgPanel.circle(20).stroke({width: 1}).fill('#ccc').center(_this.areaObjectList[0].x(), _this.areaObjectList[0].y());

            //Append bottom-right circle
            var circleBottomRight = _this.svgPanel.circle(20).stroke({width: 1}).fill('#ccc').center(_this.areaObjectList[0].x() + _this.areaObjectList[0].width(), _this.areaObjectList[0].y() + _this.areaObjectList[0].height());

            //Add the mouse event in created circle
            circleTopLeft.node.addEventListener("mousedown", function () {
                _this.focusCircle = {index: 0, TopLeft: circleTopLeft, BottomRight: circleBottomRight};
                document.getElementById('svg-panel').addEventListener("mousemove", _this.svgControlPanel.changeRectLocation);
            });

            circleBottomRight.node.addEventListener("mousedown", function () {
                _this.focusCircle = {index: 1, TopLeft: circleTopLeft, BottomRight: circleBottomRight};
                document.getElementById('svg-panel').addEventListener("mousemove", _this.svgControlPanel.changeRectLocation);
            });
        },

        changeRectLocation: function changeRectLocation(e) {
            if (_this.focusCircle.index == 0) {
                //Top-Left
                _this.focusCircle.TopLeft.center(e.offsetX * _this.svgRatio, e.offsetY * _this.svgRatio);
            } else if (_this.focusCircle.index == 1) {
                //Bottom-Right
                _this.focusCircle.BottomRight.center(e.offsetX * _this.svgRatio, e.offsetY * _this.svgRatio);
            }

            //Get the Position
            var x = 0,
                y = 0,
                width = 0,
                height = 0;
            x = Math.min(_this.focusCircle.TopLeft.cx(), _this.focusCircle.BottomRight.cx());
            y = Math.min(_this.focusCircle.TopLeft.cy(), _this.focusCircle.BottomRight.cy());
            width = Math.abs(_this.focusCircle.TopLeft.cx() - _this.focusCircle.BottomRight.cx());
            height = Math.abs(_this.focusCircle.TopLeft.cy() - _this.focusCircle.BottomRight.cy());
            _this.areaObjectList[0].x(x);
            _this.areaObjectList[0].y(y);
            _this.areaObjectList[0].width(width);
            _this.areaObjectList[0].height(height);
        },
        modifyPolyRegion: function modifyPolyRegion() {
            if (_this.areaObjectList.length == 0) {
                console.warn("There are no area to modify.");
                return;
            }
            if (this.isCreating) {
                console.warn("The area creating is processing...");
                return;
            }
            console.log("Start to modify the region.");

            //Clear the circle.
            _this.svgControlPanel.clearCircle();

            //Draw the circle.
            _this.areaObjectList[0].array().value.forEach(function (element, index) {
                var createdCircle = _this.svgPanel.circle(20).stroke({width: 1}).fill('#ccc').center(element[0], element[1]);
                _this.circleList.push(createdCircle);

                //Add the mouse event in created circle
                createdCircle.node.addEventListener("mousedown", function () {
                    //index = number of circle index in array.
                    //createdCircle is the svg.js object
                    _this.focusCircle = {index: index, SVGObject: createdCircle};
                    document.getElementById('svg-panel').addEventListener("mousemove", _this.svgControlPanel.changePolyLocation);
                });
            });
        },

        clearCircle: function clearCircle() {
            for (var i = 0; i < _this.circleList.length; i++) {
                _this.circleList[i].remove();
            }
            _this.circleList.length = 0;

            if (_this.focusCircle) {
                if (_this.focusCircle.TopLeft) _this.focusCircle.TopLeft.remove();
                if (_this.focusCircle.BottomRight) _this.focusCircle.BottomRight.remove();
            }
        },

        removePoly: function removePoly() {
            //Remove the circle
            _this.svgControlPanel.clearCircle();

            //Remove the poly
            for (var i = 0; i < _this.areaObjectList.length; i++) {
                _this.areaObjectList[i].remove();
            }

            //Clear the array
            _this.areaObjectList = [];

            _this.disabledAllButton();
            _this.enabledSpecificButton("btn-new");
        },

        changePolyLocation: function changePolyLocation(e) {
            _this.focusCircle.SVGObject.center(e.offsetX * _this.svgRatio, e.offsetY * _this.svgRatio);
            var focusAreaObjectList = _this.areaObjectList[0].array().value;
            focusAreaObjectList[_this.focusCircle.index] = [e.offsetX * _this.svgRatio, e.offsetY * _this.svgRatio];
            _this.areaObjectList[0].plot(focusAreaObjectList);
        },

        getPolyPoint: function getPolyPoint() {
            //Return points
            if (_this.areaObjectList[0] != undefined) {
                if (_this.drawType == "poly") {
                    var areaPoints = _this.areaObjectList[0].array().value.map(function (d) {
                        return {"x": d[0] / _this.videoSize[0], "y": d[1] / _this.videoSize[1]};
                    });
                    if (typeof callback == 'function') callback(areaPoints);
                    return areaPoints;
                } else if (_this.drawType == "rect") {
                    var x = 0,
                        y = 0,
                        width = 0,
                        height = 0;
                    x = _this.areaObjectList[0].x();
                    y = _this.areaObjectList[0].y();
                    width = _this.areaObjectList[0].width();
                    height = _this.areaObjectList[0].height();

                    if (typeof callback == 'function') callback([{
                        "x": x / _this.videoSize[0],
                        "y": y / _this.videoSize[1]
                    }, {
                        "x": (x + width) / _this.videoSize[0],
                        "y": y / _this.videoSize[1]
                    }, {
                        "x": (x + width) / _this.videoSize[0],
                        "y": (y + height) / _this.videoSize[1]
                    }, {"x": x / _this.videoSize[0], "y": (y + height) / _this.videoSize[1]}]);
                    return [{
                        "x": x / _this.videoSize[0],
                        "y": y / _this.videoSize[1]
                    }, {
                        "x": (x + width) / _this.videoSize[0],
                        "y": y / _this.videoSize[1]
                    }, {
                        "x": (x + width) / _this.videoSize[0],
                        "y": (y + height) / _this.videoSize[1]
                    }, {"x": x / _this.videoSize[0], "y": (y + height) / _this.videoSize[1]}];
                }
            } else {
                console.warn("Cant not get the poly object.");
            }
        }

    };

    this.source = function (src) {
        if (this.isRTSPMode) {
            this.objVXGPlayer.src(src);
            this.src = src;
        }
    };

    this.resize = function (width, height) {
        if (this.isRTSPMode) {
            this.objVXGPlayer.size(width, height);
            this.resizeSVG(width, height);
        } else {
            this.divLiveStreaming.setAttribute("style", "width:" + width + "px;height:" + height + "px;position:relative;");
            this.resizeSVG(width, height);
        }
    };

    this.resizeSVG = function (width, height) {
        this.svgPanel.size(width, height);
        this.divSvgPanel.setAttribute("style", "width:" + width + "px;height:" + height + "px;position:absolute;");
    }, this.resizeVXGPlayer = function (width, height) {
    };
    this.initial();
}