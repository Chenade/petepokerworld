"use strict";

function SVGCreate(targetDivID, videoSrc, videoWidth, videoHeight, drawtype, callback) {

    this.divTarget = document.getElementById(targetDivID);

    this.divLiveStreaming;
    this.playerId = 'vxg';

    this.divSvgPanel;
    this.svgPanel;
    this.focusCircle;
    this.areaObjectList = [];
    this.circleList = [];

    this.videoRatio = 1;
    this.svgRatio = 1;
    this.width = videoWidth;
    this.height = videoHeight;
    this.url = videoSrc;
    this.drawType = drawtype;

    this.vxg = null;

    var _this = this;

    var setAttribute = function (elm, obj) {
        for (var i in obj) elm.setAttribute(i, obj[i]);
    };

    this.svgControlPanel = {
        isCreating: false,
        isModify: false,
        createRegion: function createRegion(custom) {
            if (custom == undefined) {
                if (_this.drawType == "poly") _this.svgControlPanel.createPolyRegion(); else if (_this.drawType == "rect") _this.svgControlPanel.createRectRegion();
            } else {
                if (_this.drawType == "poly") _this.svgControlPanel.createPolyRegionByCustom(custom); else if (_this.drawType == "rect") _this.svgControlPanel.createRectRegionByCustom(custom);
            }
            return custom;
        },
        changeRegionType: function changeRegionType(RegionType) {
            if (RegionType == "poly" || RegionType == "rect") {
                _this.drawType = RegionType;
                _this.svgControlPanel.removePoly();
                return RegionType;
            } else console.warn("Error Type");

        },
        createRectRegion: function createRectRegion() {
            if (this.isCreating) {
                console.warn("The creating progress is still process...");
                return;
            }
            if (this.isModify) {
                console.warn("The modify progress is still process...");
                return;
            }
            if (_this.areaObjectList.length > 0) {
                console.warn("The area has been created.");
                return;
            }
            this.isCreating = true;

            var poly = _this.svgPanel.rect().fill("#ffff99").opacity(0.5).draw({snapToGrid: 10});
            poly.on("drawstop", function () {
                _this.isModify = false;
                _this.enabledAllButton();
                _this.disabledSpecificButton("btn-new");
                _this.areaObjectList.push(poly);

                //console.log(poly);
                //console.log(_this.svgControlPanel.getPolyPoint());

                _this.svgControlPanel.isCreating = false;
                $('#draw').length && drawBtn(1);
            });
        },
        createPolyRegion: function createPolyRegion() {
            if (this.isCreating) {
                console.warn("The creating progress is still process...");
                return;
            }
            if (this.isModify) {
                console.warn("The modify progress is still process...");
                return;
            }
            if (_this.areaObjectList.length > 0) {
                console.warn("The area has been created.");
                return;
            }
            this.isCreating = true;

            var poly = _this.svgPanel.polygon().fill("#ffff99").opacity(0.5).draw({snapToGrid: 10});
            var numClick = 0;

            var event_DrawPanelDoubleClick = function event_DrawPanelDoubleClick() {
                numClick++;
                setTimeout(function (d) {
                    numClick = 0;
                }, 250);

                if (numClick == 2) {
                    //End of drwaing.
                    poly.draw('done');
                    poly.off('drawstart');

                    //Remove mouse event
                    this.removeEventListener('click', event_DrawPanelDoubleClick);

                    //Remove the duplicated point.
                    var arrPolyPoint = poly.array().value;
                    if (arrPolyPoint[arrPolyPoint.length - 1].toString() == arrPolyPoint[arrPolyPoint.length - 2].toString()) {
                        arrPolyPoint.pop();
                        poly.plot(arrPolyPoint);
                    }

                    //Record the point
                    _this.areaObjectList.push(poly);
                    _this.isModify = false;
                    _this.enabledAllButton();
                    _this.disabledSpecificButton("btn-new");

                    _this.svgControlPanel.isCreating = false;
                    $('#draw').length && drawBtn(1);
                }
            };

            //When double click the panel, finish creating the poly.
            poly.on('drawstart', function (e) {
                document.getElementById('svg-panel').addEventListener('click', event_DrawPanelDoubleClick);
            });
        },

        createRectRegionByCustom: function createRectRegionByCustom(custom) {
            this.removePoly();

            var parse = custom.map(function (d) {
                return [d.x * _this.width, d.y * _this.height];
            });
            //console.warn(parse);
            var x = parse[0][0],
                y = parse[0][1],
                width = Math.abs(parse[0][0] - parse[1][0]),
                height = Math.abs(parse[0][1] - parse[2][1]);
            var tmp = _this.svgPanel.rect(width, height).fill('#ffff99').move(x, y).opacity(0.5);
            //tmp.fill("#ffff99");

            _this.areaObjectList.push(tmp);
        },

        createPolyRegionByCustom: function createPolyRegionByCustom(custom) {
            this.removePoly();
            var parse = custom.map(function (d) {
                return [d.x * _this.width, d.y * _this.height];
            });
            var tmp = _this.svgPanel.polygon(parse);
            tmp.fill("#ffff99").opacity(0.5);

            _this.areaObjectList.push(tmp);
        },

        modifyRegion: function modifyRegion() {
            if (_this.drawType == "poly") _this.svgControlPanel.modifyPolyRegion(); else if (_this.drawType == "rect") _this.svgControlPanel.modifyRectRegion();
        },
        modifyRectRegion: function modifyRectRegion() {
            //Append top-left circle
            var circleTopLeft = _this.svgPanel.circle(20).stroke({width: 1}).fill('#ccc').center(_this.areaObjectList[0].x(), _this.areaObjectList[0].y());

            //Append bottom-right circle
            var circleBottomRight = _this.svgPanel.circle(20).stroke({width: 1}).fill('#ccc').center(_this.areaObjectList[0].x() + _this.areaObjectList[0].width(), _this.areaObjectList[0].y() + _this.areaObjectList[0].height());

            //Add the mouse event in created circle
            circleTopLeft.node.addEventListener("mousedown", function () {
                _this.focusCircle = {index: 0, TopLeft: circleTopLeft, BottomRight: circleBottomRight};
                document.getElementById('svg-panel').addEventListener("mousemove", _this.svgControlPanel.changeRectLocation);
            });

            circleBottomRight.node.addEventListener("mousedown", function () {
                _this.focusCircle = {index: 1, TopLeft: circleTopLeft, BottomRight: circleBottomRight};
                document.getElementById('svg-panel').addEventListener("mousemove", _this.svgControlPanel.changeRectLocation);
            });
        },

        changeRectLocation: function changeRectLocation(e) {
            if (_this.focusCircle.index == 0) {
                //Top-Left
                _this.focusCircle.TopLeft.center(e.offsetX * _this.svgRatio, e.offsetY * _this.svgRatio);
            } else if (_this.focusCircle.index == 1) {
                //Bottom-Right
                _this.focusCircle.BottomRight.center(e.offsetX * _this.svgRatio, e.offsetY * _this.svgRatio);
            }

            //Get the Position
            var x = 0,
                y = 0,
                width = 0,
                height = 0;
            x = Math.min(_this.focusCircle.TopLeft.cx(), _this.focusCircle.BottomRight.cx());
            y = Math.min(_this.focusCircle.TopLeft.cy(), _this.focusCircle.BottomRight.cy());
            width = Math.abs(_this.focusCircle.TopLeft.cx() - _this.focusCircle.BottomRight.cx());
            height = Math.abs(_this.focusCircle.TopLeft.cy() - _this.focusCircle.BottomRight.cy());
            _this.areaObjectList[0].x(x);
            _this.areaObjectList[0].y(y);
            _this.areaObjectList[0].width(width);
            _this.areaObjectList[0].height(height);
        },
        modifyPolyRegion: function modifyPolyRegion() {
            if (_this.areaObjectList.length == 0) {
                console.warn("There are no area to modify.");
                return;
            }
            if (this.isCreating) {
                console.warn("The area creating is processing...");
                return;
            }
            console.log("Start to modify the region.");

            //Clear the circle.
            _this.svgControlPanel.clearCircle();

            //Draw the circle.
            _this.areaObjectList[0].array().value.forEach(function (element, index) {
                var createdCircle = _this.svgPanel.circle(20).stroke({width: 1}).fill('#ccc').center(element[0], element[1]);
                _this.circleList.push(createdCircle);

                //Add the mouse event in created circle
                createdCircle.node.addEventListener("mousedown", function () {
                    //index = number of circle index in array.
                    //createdCircle is the svg.js object
                    _this.focusCircle = {index: index, SVGObject: createdCircle};
                    document.getElementById('svg-panel').addEventListener("mousemove", _this.svgControlPanel.changePolyLocation);
                });
            });
        },

        clearCircle: function clearCircle() {
            for (var i = 0; i < _this.circleList.length; i++) {
                _this.circleList[i].remove();
            }
            _this.circleList.length = 0;

            if (_this.focusCircle) {
                if (_this.focusCircle.TopLeft) _this.focusCircle.TopLeft.remove();
                if (_this.focusCircle.BottomRight) _this.focusCircle.BottomRight.remove();
            }
        },

        removePoly: function removePoly() {
            //Remove the circle
            _this.svgControlPanel.clearCircle();

            //Remove the poly
            for (var i = 0; i < _this.areaObjectList.length; i++) {
                _this.areaObjectList[i].remove();
            }

            //Clear the array
            _this.areaObjectList = [];
        },

        changePolyLocation: function changePolyLocation(e) {
            _this.focusCircle.SVGObject.center(e.offsetX * _this.svgRatio, e.offsetY * _this.svgRatio);
            var focusAreaObjectList = _this.areaObjectList[0].array().value;
            focusAreaObjectList[_this.focusCircle.index] = [e.offsetX * _this.svgRatio, e.offsetY * _this.svgRatio];
            _this.areaObjectList[0].plot(focusAreaObjectList);
        },

        getPolyPoint: function getPolyPoint() {
            //Return points
            if (_this.areaObjectList[0] != undefined) {
                if (_this.drawType == "poly") {
                    var areaPoints = _this.areaObjectList[0].array().value.map(function (d) {
                        return {"x": d[0] / _this.width, "y": d[1] / _this.height};
                    });
                    return areaPoints;
                } else if (_this.drawType == "rect") {
                    var x = 0,
                        y = 0,
                        width = 0,
                        height = 0;
                    x = _this.areaObjectList[0].x();
                    y = _this.areaObjectList[0].y();
                    width = _this.areaObjectList[0].width();
                    height = _this.areaObjectList[0].height();
                    return [{
                        "x": x / _this.width,
                        "y": y / _this.height
                    }, {
                        "x": (x + width) / _this.width,
                        "y": y / _this.height
                    }, {
                        "x": (x + width) / _this.width,
                        "y": (y + height) / _this.height
                    }, {"x": x / _this.width, "y": (y + height) / _this.height}];
                }
            } else {
                console.warn("Cant not get the poly object.");
            }
        }

    };

    this.initialPlayer = function (cb) {
        this.divLiveStreaming = document.createElement("div");

        this.divTarget.setAttribute("width", _this.width);
        this.divTarget.classList.add("targetDiv");

        //Create live streaming panel

        setAttribute(this.divLiveStreaming, {'style': 'width: ' + this.width + 'px; height: ' + this.height + 'px; position:relative;'});
        var image = document.createElement("img");
        setAttribute(image, {
            'id': this.playerId,
            'src': this.url,
            'onerror': 'this.src="/img/default.jpg"',
            'width': '100%',
            'height': '100%',
            'style': 'border-radius: 4px;'
        });
        this.divLiveStreaming.appendChild(image);

        this.divTarget.appendChild(this.divLiveStreaming);

        this.divSvgPanel = document.createElement("div");
        setAttribute(this.divSvgPanel, {'id': 'svg-panel', 'class': 'svg-panel'});
        this.divLiveStreaming.appendChild(this.divSvgPanel);
        this.svgPanel = new SVG('svg-panel').size('100%', '100%').viewbox(0, 0, this.width, this.height);
        document.getElementById('svg-panel').addEventListener("mouseup", function (e) {
            document.getElementById('svg-panel').removeEventListener('mousemove', _this.svgControlPanel.changePolyLocation);
            document.getElementById('svg-panel').removeEventListener('mousemove', _this.svgControlPanel.changeRectLocation);
        });
        cb();
    };

    this.src = function () {
        if (arguments.length && arguments[0] !== undefined) {
            this.url = arguments[0].snapshotUrl;
            document.getElementById(this.playerId).src = this.url;
        } else
            return this.url;
    };

    this.resize = function (width, height) {
        this.divLiveStreaming.setAttribute("style", "width:" + width + "px;height:" + height + "px;position:relative;");
        this.svgPanel.size(width, height);
        this.divSvgPanel.setAttribute("style", "width:" + width + "px;height:" + height + "px;position:absolute;");
    };

    this.initialPlayer(function () {
        callback(_this);
    });
}

function fileinput(vehicleList) {

    this.carLists = vehicleList;
    this.element = null;
    this.vehicle = {};

    var _this = this;

    this.modal_buttons = function (state) {
        if (state) {
            $('#car_apply').prop('disabled') || $('#car_apply').button('loading');
            $('#car_revert').prop('disabled') || $('#car_revert').button('loading');
            $('#car_delete').prop('disabled') || $('#car_delete').button('loading');
            $('#car_close').prop('disabled') || $('#car_close').button('loading');
        } else {
            $('#car_apply').prop('disabled') && $('#car_apply').button('reset');
            $('#car_revert').prop('disabled') && $('#car_revert').button('reset');
            $('#car_delete').prop('disabled') && $('#car_delete').button('reset');
            $('#car_close').prop('disabled') && $('#car_close').button('reset');
        }
    }

    this.upadateVehicle = function (car) {
        if (car.id) {
            var updated = false;
            for (var i in _this.carLists) if (_this.carLists[i].id == car.id) {
                _this.carLists[i] = car;
                updated = true;
                break;
            }
            updated || _this.carLists.push(car);
        }
    };

    this.getVehicle = function (id) {
        var car = false;
        for (var i in _this.carLists) if (_this.carLists[i].id == id) {
            car = _this.carLists[i];
            break;
        }
        return car;
    }


    this.refresh_feature = function (id) {
        if ($('#car_snapshot_row').is(':visible') && $('#vehicle_modal').attr('data-id') == id) {
            ajax('PUT', '/agent/api', data_format("/api/va/bovia/lpr/vehicle?id=" + id, 0, 'GET', {}, null), function (car) {
                if (!car.error) {
                    var unfinished = false;
                    _this.upadateVehicle(car);

                    unfinished && setTimeout(function () {
                        _this.refresh_feature(id);
                    }, 5000);
                }
            });
        }
    };

    this.preview = function (car) {
        _this.element && _this.element.fileinput('destroy');
        _this.element = null;
        $('#car_snapshot_row').find('.col-12').empty().html('<div class="file-loading"><input id="uploadSnapshot" name="uploadSnapshot[]" type="file" multiple accept="image"></div>');

        _this.element = $("#uploadSnapshot").fileinput({
            theme: "explorer-fas2",
            allowedFileExtensions: ['jpg', 'png', 'jpeg'],
            overwriteInitial: false,
            initialPreviewAsData: true,
            initialPreview: [car.photoUrl],
            language: lang,
            browseClass: 'd-none',
            fileActionSettings: {
                showRemove: false,
                showUpload: false,
                showZoom: true,
                showDrag: false,
            }
        });

        $('.file-preview-frame').each(function (index) {
            var frame = $(this);
        });

        $('.file-caption-main').hide();
        $('.fileinput-remove').hide();
    };

    this.launch = function (car) {
        _this.element && _this.element.fileinput('destroy');
        _this.element = null;
        $('#car_snapshot_row').find('.col-12').empty().html('<div class="file-loading"><input id="uploadSnapshot" name="uploadSnapshot[]" type="file" multiple accept="image"></div>');
        var photos = [], keys = [];

        _this.element = $("#uploadSnapshot").fileinput({
            theme: "explorer-fas2",
            uploadUrl: "/agent/lpr/upload",
            allowedFileExtensions: ['jpg', 'png', 'jpeg'],
            overwriteInitial: false,
            initialPreviewAsData: true,
            initialPreview: car.photoUrl,
            language: lang,
            initialPreviewConfig: keys,
            uploadExtraData: function (previewId, index) {
                Object.keys(car).length || (car = {'id': $('#vehicle_modal').attr('data-id')});
                return car;
            }
        }).on('filesorted', function (e, params) {
            //console.log('file sorted', e, params);
        }).on('filepreupload', function (e, params) {
            _this.modal_buttons(true);
        }).on('fileuploaded', function (e, params, res) {
            //has something issue if 0 photo (just new create)
            if (params.filescount == 1) {
                console.log(params.filescount);
                ajax('PUT', '/agent/api', data_format("/api/va/bovia/lpr/vehicle?id=" + $('#vehicle_modal').attr('data-id'), 0, 'GET', {}, null), function (data) {
                    data.error || (_this.upadateVehicle(data), _this.launch(data));
                });
                $.growl.notice({message: langDict.wasUploaded});
                _this.modal_buttons(false);
                //update all table
            }
        }).on('filedeleted', function (e, params, res) {
            $.growl.notice({message: langDict.wasDeleted});
            ajax('PUT', '/agent/api', data_format("/api/va/bovia/lpr/vehicle?id=" + $('#vehicle_modal').attr('data-id'), 0, 'GET', {}, null), function (data) {
                data.error || (_this.upadateVehicle(data));
            });
        }).on("filepredelete", function (jqXHR) {
            return !window.confirm(langDict.doYouWantDelete);
        }).on('fileloaded', function (event, file, previewId, index, reader) {
            //$('tr[id=' + previewId + ']').find('input[type=checkbox]').prop('disabled', 0);
        });

        var _refresh = true;
        $('.file-preview-frame').each(function (index) {
            /*var frame = $(this), key = frame.find('.kv-file-remove').attr('data-key'),
                checkbox = frame.find('input[type=checkbox]');
            if (checkbox.length && key) {
                key = key.split(',');
                checkbox.prop('checked', key[3] == '1');
                checkbox.attr('data-id', key[1]);  // id
                checkbox.attr('data-type', key[0]);  // feture or task
                checkbox.attr('data-done', key[5]);  // done

                if (key[5] == '0') {
                    frame.find('.file-thumb-progress').removeClass('kv-hidden');
                    frame.find('.progress-bar').addClass('progress-bar-animated').html(langDict.processing + '...');
                    checkbox.prop('disabled', 1);
                    if (_refresh) {
                        _refresh = false;
                        _this.refresh_feature($('#vehicle_modal').attr('data-id'));
                    }
                }

                switch (key[0]) {
                    case "task":
                        for (var i in car.featureTask) if (car.featureTask[i].id == key[1]) {
                            checkbox.attr('data-score', car.featureTask[i].score);
                            break;
                        }
                        break;
                    case "feature":
                        for (var i in car.feature) if (car.feature[i].id == key[1]) {
                            checkbox.attr('data-score', car.feature[i].score);
                            break;
                        }
                        break;
                    default:
                        break;
                }
            }*/
        });
        $('.fileinput-remove').hide();
    };
}

$(document).ready(function () {
    //console.clear();
    loading(0);
    date_range_init(moment().subtract(6, 'days'), moment());
    $('#task_tree').parent().height($(window).height() * 0.7);
    $('#results').height($(window).height() * 0.65);

    $(document).on('selectstart dragstart', '.material-control-description', function (e) {
        e.preventDefault();
        return false;
    });

    var plyr = null, hls = null, controls = [
        'play-large', // The large play button in the center
        'restart', // Restart playback
        'rewind', // Rewind by the seek time (default 10 seconds)
        'play', // Play/pause playback
        'fast-forward', // Fast forward by the seek time (default 10 seconds)
        'progress', // The progress bar and scrubber for playback and buffering
        'current-time', // The current time of playback
        'duration', // The full duration of the media
        'mute', // Toggle mute
        'volume', // Volume control
        'captions', // Toggle captions
        'settings', // Settings menu
        'airplay', // Airplay (currently Safari only)
        'fullscreen', // Toggle fullscreen
    ];

    var gps = {};
    var object = {
        'eventPoll': {
            'tid': null,
            'after': null
        },
        'device': {},  //device config
        'group': {},
        'live': [],
        'selected': null,
        'muti_selected': null,
        'muti_request': 0,
        'requester': null,
        'map': null,
        '_map': null,
        'blacklist': {},    // history from task
        'history': {},    // history from event
        'vehicles': new fileinput([]),  // vehicle list
        'wantedList': [],
        'tagList': [],
        'merge': [],
        'task_tab': 'task_container',
        'muti' : [], // muti-events-view
        'codebooks' : [], // codebooks
        'snapshot': {},
        'eventConditon': data_format('/api/va/bovia/or/snapshot/search', 0, 'POST', {
            'startTime': $('#search_time').data('daterangepicker').startDate.format('YYYY-MM-DDTHH:mm:ssZ'),
            'stopTime': $('#search_time').data('daterangepicker').endDate.format('YYYY-MM-DDTHH:mm:ssZ')
        }, 30)
    }, auto_resize = function () {
        orsnapshot_resize();
        $('#map1').height(1);

        var img = $('#event_snapshot'), width = img.closest('.col-4').width(), height = (width * 9 / 16),
            map_height = img.closest('.col-4').height() - ($('.align-self-center').height() * 2) - height;

        $('#map1').height(map_height);
        if (object.map) object.map.invalidateSize();

        img.attr({'width': width, 'height': height}).parent().height(height);

        $('.fr-draw-face').each(function () {
            $(this).css({
                width: Math.round($(this).attr('w') * width),
                height: Math.round($(this).attr('h') * height),
                left: Math.round($(this).attr('x') * width),
                top: Math.round($(this).attr('y') * height)
            });
        });

        return {'width': width, 'height': height};

    }, gen_input = function (id, target, value, icon, disabled) {
        var placeholder = '';

        if (target == 'title') placeholder = langDict.title;
        else if (target == 'name') placeholder = langDict.name;

        return '<div class="input-group"><input type="text" placeholder="' + placeholder + '" class="form-control form-control-sm cell-input-' + target + '" data-id="' + id + '" value="' + value + '" ' + (disabled ? 'disabled' : '') + '><div class="input-group-append"> <button type="button" class="btn ' + (icon ? 'btn-outline-secondary' : 'btn-primary') + ' btn-sm cell-input-btn" data-loading-text="<span class=\'spinner-grow spinner-grow-sm\'></span>"><i class="' + (icon ? icon : 'fas fa-check') + '"></i></button></div></div>';
    }, recursive = function (origin, onlyGroup, prefix) {
        var real_gid = prefix + '_group_' + origin.group.id, md5_gid = md5(real_gid);

        var group_node_id = md5(prefix + '_group_' + origin.group.id), data = {
            'text': origin.group.name,
            'icon': icons.users,
            'state': {'selected': false},
            'more': origin.group,
            'children': [],
            'id': md5_gid,
            'a_attr': {'class': 'text-primary'}
        };
        var users = [];
        if (!onlyGroup) {
            users = origin.userList;
            data.data = {
                'id': origin.group.name,
                'name': '',
                'title': '',
                'score': '',
                'bulletin': '',
                'functional': '',
                'view': ''
            };
        }
        if (users.length) {
            /*-------- user sorting --------*/
            users = users.sort(function (a, b) {
                return (a.id > b.id) ? 1 : ((b.id > a.id) ? -1 : 0);
            });
            /*-------- end sort --------*/
            for (var i in users) {
                var user = users[i], icon = icons.user, _class = 'text-secondary',
                    real_uid = prefix + '_user_' + user.id, md5_uid = md5(real_uid);

                user.name = user.info.name;
                user.gid = origin.group.id;
                user.group = origin.group.name;
                user.layer = origin.group.layer;

                var obj = {
                    'text': user.id,
                    'icon': icon,
                    'state': {'selected': false},
                    'more': user,
                    'id': md5_uid,
                    'a_attr': {'class': _class},
                    'data': {
                        'id': user.id,
                        'name': '<input type="text" class="form-control form-control-sm" value="' + user.name + '" readonly>',
                        'title': '<input type="text" class="form-control form-control-sm" value="' + user.video.title + '" readonly>',
                        'score': '',
                        'bulletin': '',
                        'functional': '',
                        'view': ''
                    }
                };
                data.children.push(obj);
            }
        }
        /*-------- group sorting --------*/
        var chld = origin['children'];
        chld && (chld = chld.sort(function (a, b) {
            return (a.group.name > b.group.name) ? 1 : ((b.group.name > a.group.name) ? -1 : 0);
        }));
        /*-------- end sort --------*/
        for (var i in chld) data['children'].push(recursive(chld[i], onlyGroup, prefix));
        return data;
    }, gen_child_node = function (tid, follow) {
        var child = [];

        for (var i in follow) child.push({
            "text": follow[i].user.id,
            'id': md5('task_' + tid + '_' + follow[i].user.id),
            "icon": es5_includes(object.live, follow[i].user.id) ? icons.online : icons.offline,
            "state": {"selected": false},
            "more": follow[i],
            'data': {
                'id': follow[i].user.id,
                'name': '<input type="text" class="form-control form-control-sm" value="' + follow[i].user.info.name + '" readonly>',
                'title': '<input type="text" class="form-control form-control-sm" value="' + follow[i].user.video.title + '" readonly>',
                'score': '',
                'bulletin': '',
                'functional': '<div class="input-group"><button class="btn btn-sm btn-danger cell-btn-delete" task-id="' + tid + '" data-id="' + follow[i].user.id + '" data-loading-text="<span class=\'spinner-grow spinner-grow-sm\'></span>"><i class="fas fa-trash"></i></button></div>',
                'view': '<div class="input-group"><button class="btn btn-sm btn-link cell-input-view" task-id="' + tid + '" data-id="' + follow[i].user.id + '"><i class="fas fa-play"></i></button></div>'
            }
        });

        return child;

    }, gen_task_node = function (task) {

        var group = $('#task_tree').jstree('get_node', md5('task_group_' + task.groupId));

        if (group) {

            var nid = md5('task_task_' + task.id), child = gen_child_node(task.id, task.follow);

            $('#task_tree').jstree().create_node(md5('task_group_' + task.groupId), {
                "text": task.description,
                'id': nid,
                "icon": icons.task,
                "state": {"selected": false},
                "more": task,
                "children": child,
                'data': {
                    'id': '',
                    'name': '',
                    'title': '',
                    'score': gen_input(task.id, 'threshold', task.threshold, false, false),
                    'bulletin': gen_input(task.id, 'line', task.line, false, false),
                    'functional': '<div class="input-group"><button class="btn btn-sm btn-warning cell-input-task" data-id="' + task.id + '"><i class="fas fa-cog"></i></button></div>',
                    'view': '<div class="input-group"><button class="btn btn-sm btn-success cell-task-view" data-id="' + task.id + '" data-description="' + task.description + '"><i class="fas fa-play"></i></button></div>',
                }
            }, "first", function () {
                $('#task_tree').jstree('_open_to', nid);
                $('#task_tree').jstree('open_node', nid);
            });
        }

    }, task_polling = function () {

        var count = 0, task = [], merge = function () {
            object.task = task;

            var optgroup = {};

            for (var i in task) {
                var nid = md5('task_task_' + task[i].id), node = $('#task_tree').jstree('get_node', nid);

                if (!(task[i].groupId in optgroup)) optgroup[task[i].groupId] = [];
                optgroup[task[i].groupId].push(task[i]);

                if (node) {
                    node.original.more = task[i];

                    for (var j in task[i].follow) {
                        var cid = md5('task_' + task[i].id + '_' + task[i].follow[j].user.id),
                            cnode = $('#task_tree').jstree('get_node', cid),
                            icon = es5_includes(object.live, task[i].follow[j].user.id) ? icons.online : icons.offline;

                        if (cnode && cnode.icon != icon) {
                            cnode.icon = icon;
                            cnode.original.icon = icon;
                            $('#task_tree').jstree('redraw_node', cid);

                            //todo: check and update user name if need
                            //todo: check and update user title if need
                        }
                    }

                    //todo: check has removed of task from other side
                    //todo: check has changed of task from other side
                    //todo: check has removed of cnode from other side

                } else {
                    gen_task_node(task[i]);
                }
            }

            var _selected = {'task': $('#select_task').val(), 'camera': $('#select_camera').val()};

            $('#select_task').empty();
            $('#select_camera').empty();

            for (var gid in optgroup) {
                var group = $('#task_tree').jstree('get_node', md5('task_group_' + gid));
                if (group) {
                    var task_option = '<optgroup label="' + group.text + '" data-icon="' + icons.users + '">';
                    for (var i in optgroup[gid]) {
                        var camera_option = '<optgroup label="' + optgroup[gid][i].description + '" data-icon="' + icons.task + '">';
                        task_option += '<option value="' + optgroup[gid][i].id + '" data-icon="' + icons.task + '">&nbsp;' + optgroup[gid][i].description + '</option>';
                        for (var j in optgroup[gid][i].follow) {
                            camera_option += '<option value="' + optgroup[gid][i].follow[j].user.id + '" data-icon="' + (es5_includes(object.live, optgroup[gid][i].follow[j].user.id) ? icons.online : icons.offline) + '" data-subtext="' + optgroup[gid][i].follow[j].user.video.title + '">&nbsp;' + optgroup[gid][i].follow[j].user.id + '</option>';
                        }
                        $('#select_camera').append(camera_option += '</optgroup>');
                    }
                    $('#select_task').append(task_option += '</optgroup>');
                }
            }

            $('#select_task').val(_selected.task).selectpicker('refresh');
            $('#select_camera').val(_selected.camera).selectpicker('refresh');

            setTimeout(task_polling, 5000);
        };

        ajax('PUT', '/agent/api', data_format('/api/va/bovia/lpr/live/list', 0, 'GET', {}, null), function (a) {
            a.error || (object.live = a.liveList);
            count += 1;
            count == 2 && merge();
        });
        ajax('PUT', '/agent/api', data_format('/api/va/bovia/lpr/list', 0, 'GET', {}, null), function (a) {
            a.error || (task = a);
            count += 1;
            count == 2 && merge();
        });
    }, edit_task_form = function (node) {
        //console.log(node);

        if (node) {

            $('#task_modal').attr('data-id', node.id);

            var group = $('#task_tree').jstree('get_node', md5('task_group_' + node.groupId));

            $('#task_enabled').prop('checked', node.enabled);
            $('#task_mailing').prop('checked', node.notify);
            $('#task_name').val(node.description);
            $('#task_group').attr('data-id', node.groupId).val(group.text);
            $('#task_score').val(node.threshold);
            node.line.length && $('#task_line').val(node.line[0]);

            $('#task_follow').val([]).empty();
            for (var i in node.follow) $('#task_follow').append('<option value="' + node.follow[i].user.id + '" selected="selected">' + node.follow[i].user.id + '</option>')
            $('#task_follow').selectpicker('refresh');
        } else {
            $('#task_modal').attr('data-id', '')

            $('#task_enabled').prop('checked', 1);
            $('#task_mailing').prop('checked', 0);
            $('#task_name').val('');
            $('#task_group').attr('data-id', '').val('');
            $('#task_score').val(90);
            $('#task_follow').val([]).empty().selectpicker('refresh');
            $('#task_line').val('');
        }
    }, event_polling = $.timer(function () {
        // wait callback
        event_polling.pause();

        if (object.selected && object.eventPoll.tid) {
            var parameter = 'configId=' + object.eventPoll.tid + '&userId=' + object.selected;

            var api = '/api/va/bovia/lpr/snapshot?' + parameter;

            if (object.eventPoll.after) api += '&snapshotId=' + object.eventPoll.after;
            // console.log(api);
            ajax('PUT', '/agent/api', data_format(api, 0, 'GET', {}, null), function (a) {

                if (a.error) {
                    $.growl.error({message: a.error});
                } else if (Object.keys(a).length && object.selected == a.user.id) {
                    // console.log(a);
                    a.detectTime && $('#event_detectTime').html(moment(a.detectTime).format('YYYY-MM-DD HH:mm:ss'));

                    var size = auto_resize(), img = $('#event_snapshot');

                    if (object.map && a.latitude && a.longitude) {
                        $('#video_gps').html(a.latitude + ', ' + a.longitude);
                        handlerMarker(object.map, {
                            'id': 'fr',
                            'gps': {
                                'latitude': a.latitude,
                                'longitude': a.longitude,
                                'timestamp': a.detectTime
                            }
                        }, true, true);
                    }

                    $('#device_modal').find('img').attr('src', a.snapshotUrl);

                    if ('device' in a && 'id' in a.device)
                        $('#device_modal').attr('data-id', a.device.id);

                    $('#video_title').html(a.description);

                    img.attr({
                        'src': a.snapshotUrl,
                        'width': size.width,
                        'height': size.height
                    });

                    var svg = '', panel = {'metadata': a.metadata || [], 'roi': a.roi || []};
                    $('#draw-results-container').width(size.width).height(size.height);
                    for (var target in panel) for (var i in panel[target]) {
                        var style = '', hit = panel[target][i];

                        for (var j in hit) switch (j) {
                            case 'x':
                                style += 'left: ' + Math.round(hit[j] * size.width) + 'px; ';
                                break;
                            case 'y':
                                style += 'top: ' + Math.round(hit[j] * size.height) + 'px; ';
                                break;
                            case 'h':
                                style += 'height: ' + Math.round(hit[j] * size.height) + 'px; ';
                                break;
                            case 'w':
                                style += 'width: ' + Math.round(hit[j] * size.width) + 'px; ';
                                break;
                            case 'matched':
                                style += 'border:2px solid ' + (hit[j] == 1 ? 'red' : 'blue') + '; ';
                                break;
                        }

                        hit.hasOwnProperty('matched') || (style += 'border:2px solid blue; ');
                        svg += '<div class="fr-draw-face" id="fr-draw-face" style="' + style + '; position: absolute;" x="' + hit.x + '" y="' + hit.y + '" w="' + hit.w + '" h="' + hit.h + '"></div>';
                    }
                    $('#draw-results-container').find('span').html(svg);

                    if (object.eventPoll.after != a.id) {
                        object.eventPoll.after = a.id;
                        // do envent something
                        var event = a.event;
                        if (event) {
                            var tamplate = function (lazy, data) {
                                var content = '', html = '<tr>', _rank = {}, rankInfo = data.triggered;
                                if (data.metadata) for (var i in data.metadata) if (data.vehicleIndex == data.metadata[i].vehicleIndex) {
                                    var hit = data.metadata[i];
                                    content += ' x="' + hit.x + '"';
                                    content += ' y="' + hit.y + '"';
                                    content += ' w="' + hit.w + '"';
                                    content += ' h="' + hit.h + '" ';
                                    break;
                                }

                                gps = {lat: '', lng: ''};
                                if (a.latitude) gps.lat = a.latitude;
                                if (a.longitude) gps.lng = a.longitude;

                                if (data.triggered != null) {

                                    if (lazy)
                                        html += '<td rowspan="3" align="center" style="vertical-align: middle; border-bottom:2px dashed #bbb;" width="15%"><img style="border-radius: 4px;" class="lazy img-origin" data-time="' + data.detectTime + '" data-src="' + data.photoUrl + '" data-lng="' + gps.lng + '" data-lat="' + gps.lat + '" width="120" height="160" content="' + data.snapshotUrl + '" onerror="this.src=\'/img/default.jpg\';"' + content + '></td>';
                                    else
                                        html += '<td rowspan="3" align="center" style="vertical-align: middle; border-bottom:2px dashed #bbb;" width="15%"><img style="border-radius: 4px;" class="img-origin" data-time="' + data.detectTime + '" src="' + data.photoUrl + '" data-lng="' + gps.lng + '" data-lat="' + gps.lat + '" width="120" height="160" content="' + data.snapshotUrl + '" onerror="this.src=\'/img/default.jpg\';"' + content + '></td>';

                                    html += '</tr>';

                                    var records = '';

                                    html += '<tr class="info">' +
                                        '<th>' + langDict.lprlicensePlate + '</th>' +
                                        '<th>' + langDict.lprcompare + '</th>' +
                                        '<th>' + langDict.lprtag + '</th>' +
                                        '<th>' + langDict.lprbrand + '</th>' +
                                        '<th>' + langDict.lprcolor + '</th>' +
                                        '<th>' + langDict.lprclassification + '</th>' +
                                        '<th>' + langDict.lprDate + '</th>' +
                                        '</tr>';

                                    html += '<tr style="border-bottom:2px dashed #bbb;">' +
                                        '<td>' + data.triggered[0].content + '</td>';

                                    if (data.triggered[0].licensePlate == "")
                                        html += '<td><button class="btn btn-sm btn-secondary">[' + langDict.lprnotfound + ']</button></td>';
                                    else if (data.triggered[0].licensePlate != data.triggered[0].content)
                                        html += '<td><button class="btn btn-sm btn-secondary">[' + langDict.lprnotsure + ']</button></td>';
                                    else
                                        html += '<td><button class="btn btn-sm btn-danger" data-container="body" data-toggle="popover" data-trigger="focus" data-placement="left" data-content="' + data.triggered[0].licensePlate + '">&emsp;' + data.triggered[0].licensePlate + '&emsp;</button></td>';

                                    var tagText = '';

                                    for (var record in data.triggered[0].tag) {
                                        for (var tag in object.tagList) {
                                            if (data.triggered[0].tag[record] == object.tagList[tag]['id'])
                                                tagText += object.tagList[tag]['name'] + '&ensp;';
                                        }
                                    }

                                    html += '' +
                                        '<td>' + tagText + '</td>' +
                                        '<td>' + data.triggered[0].brand + '</td>   ' +
                                        '<td>' + data.triggered[0].color + '</td>' +
                                        '<td>' + data.triggered[0].classification + '</td>' +
                                        '<td>' + moment(data.detectTime).format('HH:mm:ss') + '</td>' +
                                        '</tr>'
                                } else {
                                    html += '<tr></tr>';
                                }
                                return html;
                            };

                            var tbody = '', diff = (100 - (event.length + ($('#results tr').length / 3)));

                            if (diff < 0) for (var i = 0; i < Math.abs(3 * diff); i++)
                                $('#results tr').last().remove();

                            for (var i in event) tbody += tamplate(i > 2, event[i]);

                            if ($('#results').find('table').length) {
                                $('#results').find('tbody').prepend(tbody);
                            } else {
                                $('#results').html('<table class="table table-hover"><tbody>' + tbody + '</tbody></table>');
                            }
                            //todo: position not fix when scrolling issue
                            $('[data-toggle="popover"]').popover();
                        }
                    } else {
                        object.eventPoll.after = 0;
                    }
                }
                // wait callback
                event_polling.play();
            });
        }
    }).set({time: 3000, autostart: false}), edit_man_form = function (car) {

        if (car) {

            object.vehicles.launch(car);

            $('#vehicle_modal').attr('data-id', car.id);
            $('#car_enabled').prop('checked', car.enabled);
            $('#car_licensePlate').val(car.licensePlate);
            $('#car_brand').val(car.brand).selectpicker('refresh');
            $('#car_model').val(car.model);
            $('#car_color').val(car.color).selectpicker('refresh');
            $('#car_classification').val(car.classification).selectpicker('refresh');
            // console.log("CAR_CLASS::" + car.classification);
            $('#car_note').val(car.note);
            $('#car_owner_name').val(car.name);
            $('#car_owner_idCard').val(car.idCard);
            $('#car_tag').val(car.tag).selectpicker('refresh');


        } else {
            object.vehicles.launch({});

            $('#vehicle_modal').attr('data-id', '');

            $('#car_enabled').prop('checked', 1);
            $('#car_licensePlate').val('');
            $('#car_brand').val('');
            $('#car_model').val('');
            $('#car_color').val('');
            $('#car_classification').val('');
            $('#car_note').val('');
            $('#car_owner_name').val('');
            $('#car_owner_idCard').val('');
            $('#car_tag').val([]).selectpicker('refresh');
        }
    }, draw_db_row = function (data, checked) {
        var snapshot = '/img/default.jpg';

        try {
            snapshot = data['photoUrl'];
        } catch (e) {

        }

        var checkbox = '<div class="checkbox"> <label>' + '<input type="checkbox" class="selection" data-id="' + data.id + '" ' + (checked ? 'checked' : '') + '>' + '<span class="cr" style="width: 1.5em; height: 1.5em;">' + '<i class="cr-icon fas fa-check" style="font-size: 12pt"></i></span></label></div>';

        //if (data.wantedText) for (var i in data.wantedText) wantedText += (data.wantedText[i] + '&ensp;');
        //if (data.tagText) for (var i in data.tagText) tagText += (data.tagText[i] + '&ensp;');

        var str = '<div class="align-self-center" style="padding: 0 15px">' + checkbox + '</div>';
        str += '<div class="align-self-center">' + '<div style="width: 160px"><img style="max-width: 100%; height: auto;" data-id="' + data.id + '" class="db-profile" src="' + snapshot + '" onerror="this.src=\'/img/default.jpg\';"></div>' + '</div>';
        str += '<div style="padding: 0 10px">' +
            '   <div class="align-self-center">' +
            '       <span class="form-control" style="background-color: transparent; border: transparent; font-weight: 500; display: inline; font-size: 1.2em">' + data.LicesePlate + '</span>' +
            '   </div>' +
            '   <div class="align-self-center form-control" style="background-color: transparent; border: transparent;font-size: 1.2em">' +
            '       <span>' + data.brand + ',&ensp;<span>' + data.color + '</span></div>' +
            '   </div>';

        str = '<div class="d-flex flex-row">' + str + '</div>';

        return str;
    }, task_view = function (tid, id) {
        if (object.selected != id) {

            object.selected = id;
            event_polling.pause();

            object.map && (object.map.remove(), markers = {"_lastOne": null, "_lastLength": 0});
            object.map = map_initial('map1');
            $('#event_snapshot').attr('src', '/img/default.jpg');

            $('#draw-results-container').find('span').empty();
            $('#event_detectTime').html('');

            $('#device_modal').attr('data-id', '').find('img').attr('src', '/img/default.jpg');
            $('#player').attr({'x': '', 'y': '', 'h': '', 'w': ''});
            $('#minPlateDim').val('');
            $('#scoreThreshold').val('');
            $('#confidenceThreshold').val('');
            $('#candidateScoreThreshold').val('');
            $('#device_follow').val('');

            $('#video_title').html('');
            $('#video_gps').html('');
            $('#results').html('<div class="col text-center"><br><br><br><i class="fa fa-spinner fa-pulse fa-5x"></i></div>');

            object.eventPoll.tid = tid;
            object.eventPoll.after = 0;
            event_polling.play();
        }

        $('#task_container').hide();
        $('#event_container').show();

        auto_resize();
    }, utc_converter = function () {
        $('.utc-time').each(function () {
            $(this).html(moment($(this).html()).format(' YYYY-MM-DD HH:mm:ss')).removeClass('utc-time');
        });
    }, draw_vehicle_row = function (data, cb) {
        ajax('PUT', '/agent/lpr-vehicle-row', {'payload': data}, function (a) {
            cb(a);
        });
    }, orsnapshot_resize = function () {
        var img = $('#or_snapshot');
        var width = img.width(), height = img.height(),
            attr = img.attr('x') && img.attr('y') && img.attr('w') && img.attr('h');

        if (attr) {
            var name = img.attr('list').split('_'),  x = img.attr('x').split('_'), y = img.attr('y').split('_'), w = img.attr('w').split('_'), h = img.attr('h').split('_');
            img.parent().find('span').empty();
            img.parent().find('span').css('left', '0');
            for(const i in name){
                img.parent().find('span').append($('<div class="fr-draw-face '+ name[i]+'"></div>').css({
                    'width': parseFloat(w[i]) * width,
                    'height': parseFloat(h[i]) * height,
                    'left': parseFloat(x[i]) * width,
                    'top': parseFloat(y[i]) * height,
                    'border': '2px solid ' + draw_or_box(name[i]),
                }).attr('id', name[i]+'_'+i));
            }
        }
        img.parent().height(height);
    }, draw_or_box = function (type) {
        var color = '#ff0000';
        switch (type) {
            case "Person":
                color = "#ff0000";
                break;
            case "Car":
                color = "#94ffe6";
                break;
            case "Bike":
                color = "#7773ff";
                break;
            case "Airplane":
                color = "#8fb5a7";
                break;
            case "Bus":
                color = "#f1fae6";
                break;
            case "Train":
                color = "#e6e6fa";
                break;
            case "Truck":
                color = "#ffcc00";
                break;
            case "Boat":
                color = "#f1ff73";
                break;
            case "Bag":
                color = "#6dfc6f";
                break;
            case "Suitcase":
                color = "#ca6ad9";
                break;
            default:
                color = '#ff0000';
        }
        return color;
    };

    ajax('PUT', '/agent/api', data_format('/api/va/bovia/lpr/tag/list', 0, 'GET', {}, null), function (a) {
        if (a.error) {
            $.growl.error({message: a.error});
        } else {
            object.tagList = a.tagList;

            for (var i in object.tagList) {
                $('#car_tag').append('<option value="' + object.tagList[i].id + '">' + object.tagList[i].name + '</option>');
                //$('#select_dbTag').append('<option value="' + object.tagList[i].id + '">' + object.tagList[i].name + '</option>');

                var div = document.createElement('div');
                var tagGroup = $('[name="tag[]"]').first().closest('.form-group');
                var cloneGroup = tagGroup.clone();

                cloneGroup.find('.tag-add').removeClass('tag-add btn-success').addClass('tag-remove btn-danger').html('<i class="fas fa-minus"></i>');
                cloneGroup.find('input').val(object.tagList[i].name).attr('data-id', object.tagList[i].id).addClass('tag-input');

                if (object.tagList[i].locked) {
                    cloneGroup.find('.btn').prop('disabled', 1);
                    cloneGroup.find('input').prop('disabled', 1);
                }

                div.classList.add('col-6');
                div.appendChild(cloneGroup[0]);
                $('#tag-list').append(div);
            }

            $('#car_tag').selectpicker('refresh');
            //$('#select_dbTag').selectpicker('refresh');
        }
    });

    ajax('PUT', '/agent/api', data_format('/api/va/bovia/lpr/codebooks', 0, 'GET', {}, null), function (a) {
        if (a.error) {
            $.growl.error({message: a.error});
        } else {
            object.codebooks = a;
            for (var i in a.brand) {
                if (i == 0) $("#car_brand").append("<option value='" + i + "'>" + a.brand[i] + "</option>").selectpicker('refresh');

                if (i % 10000 != 0) {
                    if (i / 10000 < 2) {
                        $("#Motorcycle").append("<option value='" + i + "'>" + a.brand[i] + "</option>");
                    } else {
                        if (i % 100 != 0) $("#Car").append("<option style='text-indent: 0.5em;' value='" + i + "'>" + a.brand[i] + "</option>");
                        else $("#Car").append("<option value='' disabled>" + a.brand[i] + "</option>");
                    }
                    $("#car_brand").selectpicker('refresh');
                }
            }

            $("#car_classification").empty();
            for (var i in a.classification) {
                $("#car_classification").append("<option value='" + i + "'>" + a.classification[i] + "</option>").selectpicker('refresh');
            }

            $("#car_color").empty();
            for (var i in a.color) {
                $("#car_color").append("<option value='" + i + "'>" + a.color[i] + "</option>").selectpicker('refresh');
            }
        }
    });

    ajax('PUT', '/agent/api', data_format('/api/user/tree', 0, 'GET', {}, null), function (a) {
        if (a.error) $.growl.error({message: a.error}); else {
            var task = recursive(a, true, 'task'),
                group = recursive(a, true, 'group'),
                user = recursive(a, false, 'user');

            $('#task_tree').jstree({
                "plugins": ["wholerow", "changed", "grid", 'ui', 'search'],
                'core': {
                    'data': task,
                    'themes': {'name': 'proton', 'responsive': true, 'variant': 'large'},
                    'check_callback': true
                },
                "grid": {
                    columns: [
                        {'header': '&nbsp;', 'value': 'id', 'width': '30%'},
                        {'header': langDict.name, 'value': 'name', 'width': '15%'},
                        {'header': langDict.title, 'value': 'title', 'width': '15%'},
                        {'header': langDict.score, 'value': 'score', 'width': '10%'},
                        {'header': langDict.bulletin, 'value': 'bulletin', 'width': '20%'},
                        {'header': langDict.setting, 'value': 'functional', 'width': '5%'},
                        {'header': langDict.viewer, 'value': 'view', 'width': '5%'}
                    ],
                    resizable: true,
                    width: '100%',
                }
            }).bind("loaded.jstree", function (event, data) {
                task_polling();

                try {
                    $(this).jstree('open_node', md5('task_group_' + $('[name="_group"]').attr('content').split('_')[1]));
                } catch (e) {
                    //$(this).jstree('open_all');
                }
            }).on('select_node.jstree', function (event, data) {
                es5_includes([icons.online, icons.offline], data.node.icon) && $('#task_keyword').attr('data-id', data.node.original.more.id).val(data.node.text);
            }).bind("dblclick.jstree", function (event) {
                // var node = $(event.target).closest("li");
                // if (node.length) {
                //     node = $('#task_tree').jstree('get_node', node[0].id);
                //     if (node && es5_includes([icons.online, icons.offline], node.icon)) {
                //         var parent = $('#task_tree').jstree('get_node', node.parent);
                //         task_view(parent.original.more.id, node.original.more.user.id);
                //     }
                // }
            });

            $('#user_tree').jstree({
                "plugins": ["wholerow", "changed", "grid", 'ui', 'checkbox', 'search'],
                'core': {
                    'data': user,
                    'themes': {'name': 'proton', 'responsive': true, 'variant': 'large'},
                    'check_callback': true
                },
                "grid": {
                    columns: [
                        {'header': '&nbsp;', 'value': 'id', 'width': '40%'},
                        {'header': langDict.name, 'value': 'name', 'width': '30%'},
                        {'header': langDict.title, 'value': 'title', 'width': '30%'}
                    ],
                    resizable: true,
                    width: '100%',
                }
            }).bind("loaded.jstree", function (event, data) {
                try {
                    $(this).jstree('open_node', md5('user_group_' + $('[name="_group"]').attr('content').split('_')[1]));
                } catch (e) {
                    //$(this).jstree('open_all');
                }
            });

            $('#device_tree').jstree({
                "plugins": ["wholerow", "changed", "grid", 'ui', 'search'],
                'core': {
                    'data': user,   //todo: id duplicate
                    'themes': {'name': 'proton', 'responsive': true, 'variant': 'large'},
                    'check_callback': true
                },
                "grid": {
                    columns: [
                        {'header': '&nbsp;', 'value': 'id', 'width': '40%'},
                        {'header': langDict.name, 'value': 'name', 'width': '30%'},
                        {'header': langDict.title, 'value': 'title', 'width': '30%'}
                    ],
                    resizable: true,
                    width: '100%',
                }
            }).bind("loaded.jstree", function (event, data) {
                try {
                    $(this).jstree('open_node', md5('user_group_' + $('[name="_group"]').attr('content').split('_')[1]));
                } catch (e) {
                    //$(this).jstree('open_all');
                }
            }).on('select_node.jstree', function (event, data) {
                if (data.node.icon != icons.users) {
                    $('#device_follow').val(data.node.original.more.id);
                    $('#_user_modal').modal('hide');
                    $('#device_modal').show();
                }
            });

            $('#group_tree').jstree({
                "plugins": ["wholerow", "changed", 'ui', 'search'],
                'core': {
                    'data': group,
                    'themes': {'name': 'proton', 'responsive': true, 'variant': 'large'},
                    'check_callback': true
                }
            }).bind("loaded.jstree", function (event, data) {
                try {
                    $(this).jstree('open_node', md5('group_group_' + $('[name="_group"]').attr('content').split('_')[1]));
                } catch (e) {
                    //$(this).jstree('open_all');
                }
            }).on('select_node.jstree', function (event, data) {
                if ($('#task_tab').is(':visible')) {
                    $('#task_group').attr('data-id', data.node.original.more.id).val(data.node.text);
                } else if ($('#event_tab').is(':visible')) {
                    $('#select_group').empty().append('<option value="' + data.node.original.more.id + '">' + data.node.original.text + '</option>');
                    $('#select_group').selectpicker('refresh');
                }

                $('#group_modal').modal('hide');
            });
        }
    });

    $('#task_keyword').on('keyup', function (e) {
        $(this).val().length == 0 && $('#task_tree').jstree('search', '');
    });

    $('[id$=_search_btn]').on('click', function (e) {
        var btn = $(this), tree = $('#' + btn.attr('id').split('_')[0] + '_tree'),
            val = btn.closest('.input-group').find('input').val();
        val && (btn.button('loading'), setTimeout(function () {
            try {
                tree.jstree(true).search(val);
                tree.find('.jstree-search:eq(0)')[0].scrollIntoView();
            } catch (e) {
                $.growl.warning({message: langDict.notFound});
            }
            btn.button('reset');
        }, 300));
    });

    $(document).on('click', '[class*=cell-input-]', function (e) {
        $(this).focus();
    });

    $(document).on('click', '.cell-input-task', function (e) {
        var tid = $(this).attr('data-id'), nid = md5('task_task_' + tid),
            node = $('#task_tree').jstree('get_node', nid);

        if (node) {

            $('#task_revert').show();
            $('#task_delete').show();

            node = node.original.more;
            edit_task_form(node);

            $('#task_modal').modal({
                backdrop: 'static',
                keyboard: true,
                show: true
            });
        }
    });

    $(document).on('click', '#task_add', function (e) {

        $('#task_revert').hide();
        $('#task_delete').hide();

        edit_task_form(0);

        $('#task_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });

    $('select[id=task_follow]').on('show.bs.select', function (e) {
        $('#user_tree').jstree(true).search('');
        $('#task_modal').hide();

        $('#user_tree').jstree('deselect_all');
        var selected = $('#task_follow').val();
        for (var i in selected) $('#user_tree').jstree('select_node', md5('user_user_' + selected[i]));

        $('#user_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });

    $('.select-group-modal').on('click', function (e) {
        $('#group_tree').jstree(true).search('');
        $('#group_tree').jstree('deselect_all');
        $('#task_tab').is(':visible') && $('#task_modal').hide();

        $('#group_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });

    $('.select-user-modal').on('click', function (e) {
        $('#device_tree').jstree(true).search('');
        $('#device_tree').jstree('deselect_all');
        $('#device_modal').is(':visible') && $('#device_modal').hide();

        $('#_user_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });

    $('#_user_modal').on('hidden.bs.modal', function (e) {
        $('#device_modal').show();
    });

    $('#user_modal,#group_modal').on('shown.bs.modal hidden.bs.modal', function (e) {
        switch (e.type) {
            case 'shown':
                var _tree = '#group_tree';
                e.target.id == 'user_modal' && (_tree = '#user_tree');
                $(_tree).find('.jstree-clicked:eq(0)')[0] && $(_tree).find('.jstree-clicked:eq(0)')[0].scrollIntoView();
                break;
            case 'hidden':
                $('#task_tab').is(':visible') && $('#task_modal').show();
                break;
        }
    });

    $('#users_apply').on('click', function () {
        var tree = $('#user_tree'), selected = tree.jstree('get_selected'), selection = $('#select_users');
        selection.empty();
        for (var i in selected) {
            var node = tree.jstree().get_node(selected[i]).original;
            (node.icon != icons.users) && selection.append('<option selected>' + node.more.id + '</option>');
        }
        selection.selectpicker('refresh');
    });

    $('#task_view').on('click', function (e) {
        $(this).hide();
        $('#task_container').hide();
        $('#' + object.task_tab).show();
        auto_resize();
        $('#task_list').show();
    });

    $('#task_list').on('click', function (e) {
        if (!$('#task_container').is(':visible')) {
            $(this).hide();
            $('#task_container').show();
            $('#event_container').hide();
            $('#muti_container').hide();
            $('#task_view').show();
        }
    });

    $('#task_keyword').on('click', function (e) {
        if ($('#event_container').is(':visible') || $('#muti_container').is(':visible')) {
            $('#task_container').show();
            $('#event_container').hide();
            $('#muti_container').hide();
        }
    });

    $(document).on('click', '.cell-input-btn', function (e) {
        var obj = {}, btn = $(this), input = btn.closest('.input-group').find('input'), tid = input.attr('data-id');

        var nid = md5('task_task_' + tid), node = $('#task_tree').jstree('get_node', nid);

        if (input.hasClass('cell-input-threshold')) {

            if (node.original.more.threshold != input.val()) {

                obj = {
                    'id': tid,
                    'threshold': parseFloat(input.val())
                };

            } else
                $.growl.warning({message: langDict.notChanged});

        } else if (input.hasClass('cell-input-line')) {

            if (node.original.more.line.length == 0 || node.original.more.line[0] != input.val()) {

                obj = {
                    'id': tid,
                    'line': [input.val()]
                };
            }
        }

        if (Object.keys(obj).length) {
            btn.button('loading');

            ajax('PUT', '/agent/api', data_format('/api/va/bovia/lpr', 0, 'PUT', obj, null), function (a) {

                if (a.error) {
                    $.growl.error({message: a.error});
                } else {

                    if (obj.threshold) {
                        node.original.more.threshold = obj.threshold;
                        node.data.score = gen_input(tid, 'threshold', obj.threshold);
                    }

                    if (obj.line) {
                        node.original.more.line = obj.line;
                        node.data.bulletin = gen_input(tid, 'line', obj.line[0], false, false);
                    }

                    $('#task_tree').jstree('redraw_node', nid);
                    $.growl.notice({message: langDict.wasModified});
                }

                btn.button('reset');
            });
        }
    });

    $(document).on('click', '.cell-btn-delete', function (e) {
        var btn = $(this), tid = btn.attr('task-id'), id = btn.attr('data-id'), cid = md5('task_' + tid + '_' + id),
            node = $('#task_tree').jstree('get_node', cid), parent = $('#task_tree').jstree('get_node', node.parent);

        node && parent && bootbox.confirm({
            'title': langDict.aruYouSure,
            'message': langDict.doYouWantDelete + '<a href="#" onclick="return false;">' + node.text + '</a> ',
            'buttons': {
                'cancel': {'label': '<i class="fa fa-times"></i> ' + langDict.cancel},
                'confirm': {'label': '<i class="fa fa-check"></i> ' + langDict.apply}
            },
            'callback': function (confirm) {
                if (confirm) {
                    btn.button('loading');

                    var obj = {'id': tid, 'follow': []}, _follow = [];
                    for (var i in parent.original.more.follow) if (parent.original.more.follow[i].user.id != id) {
                        obj.follow.push(parent.original.more.follow[i].user.id);
                        _follow.push(parent.original.more.follow[i]);
                    }

                    ajax('PUT', '/agent/api', data_format('/api/va/bovia/lpr', 0, 'PUT', obj, null), function (a) {
                        if (a.error) {
                            btn.button('reset');
                            $.growl.error({message: a.error});
                        } else {
                            parent.original.more.follow = _follow;
                            $('#task_tree').jstree('delete_node', cid);

                            $.growl.notice({message: langDict.wasDeleted});
                        }
                    });
                }
            }
        });
    });

    $('.task-btn').on('click', function (e) {
        var btn = $(this), tid = $('#task_modal').attr('data-id'), obj = {}, btn_state = function (state) {
            if (state) {
                $('#task_apply').button('loading');
                $('#task_revert').button('loading');
                $('#task_delete').button('loading');
                $('#task_close').button('loading');
            } else {
                $('#task_apply').button('reset');
                $('#task_revert').button('reset');
                $('#task_delete').button('reset');
                $('#task_close').button('reset');
            }
        };

        switch (btn.attr('id')) {
            case 'task_apply':
                if (tid) {

                    var nid = md5('task_task_' + tid), node = $('#task_tree').jstree('get_node', nid),
                        data = node.original.more, follow = $('#task_follow').val();

                    if (follow.length != data.follow.length) {
                        obj.follow = follow;
                    } else
                        for (var i in data.follow) if (!es5_includes(follow, data.follow[i].user.id)) { // deselected
                            obj.follow = follow;
                            break;
                        }

                    if (data.enabled != +($('#task_enabled').prop('checked'))) obj.enabled = +($('#task_enabled').prop('checked'));
                    if (data.groupId != $('#task_group').attr('data-id')) obj.groupId = $('#task_group').attr('data-id');
                    if (data.description != $('#task_name').val()) obj.description = $('#task_name').val();
                    if (data.threshold != $('#task_score').val()) obj.threshold = parseFloat($('#task_score').val());
                    if (data.notify != +($('#task_mailing').prop('checked'))) obj.notify = +($('#task_mailing').prop('checked'));

                    if (data.line.length == 0 && $('#task_line').val()) {
                        obj.line = [$('#task_line').val()];
                    } else if (data.line.length && $('#task_line').val() != data.line[0]) {
                        obj.line = [$('#task_line').val()];
                    }

                    if (Object.keys(obj).length) {
                        btn_state(true);

                        obj.id = tid;

                        ajax('PUT', '/agent/api', data_format('/api/va/bovia/lpr', 0, 'PUT', obj, null), function (a) {
                            if (a.error) {
                                $.growl.error({message: a.error});
                            } else {
                                node.original.more = a;

                                if (obj.description) {
                                    node.text = obj.description;
                                    node.original.text = obj.description;
                                    node.original.more.description = obj.description;
                                    $('#task_keyword').val(obj.description);

                                    $('#select_task option[value=' + tid + ']').html(obj.description);
                                    $('#select_task').selectpicker('refresh');
                                }

                                if (obj.threshold)
                                    node.data.score = gen_input(tid, 'threshold', obj.threshold);

                                if (obj.line)
                                    node.data.bulletin = gen_input(tid, 'line', obj.line[0], false, false);

                                if (obj.follow) {
                                    // delete each children after append
                                    var _count = node.children.length;
                                    while (_count) {
                                        _count--;
                                        $('#task_tree').jstree('delete_node', node.children[_count]);
                                    }

                                    var child = gen_child_node(tid, a.follow);

                                    for (var cid in child) $('#task_tree').jstree().create_node(nid, child[cid], "first", function () {
                                    });
                                    child.length && $('#task_tree').jstree('_open_to', child[0].id);
                                }

                                if (obj.groupId) {
                                    $('#task_tree').jstree(true).move_node(nid, md5('task_group_' + obj.groupId), 'first', function () {
                                    });
                                } else
                                    $('#task_tree').jstree('redraw_node', nid);
                                $.growl.notice({message: langDict.wasModified});
                            }

                            btn_state(false);
                        });
                    } else {
                        $.growl.warning({message: langDict.notChanged});
                    }
                } else {
                    if ($('#task_name').val().trim().length == 0) {
                        $.growl.warning({message: langDict.noname});
                    } else if ($('#task_group').val().trim().length == 0) {
                        $.growl.warning({message: langDict.noParent});
                    } else if ($('#task_score').val().trim().length == 0) {
                        $.growl.warning({message: langDict.noThreshold});
                    } else {
                        btn_state(true);

                        obj.enabled = +($('#task_enabled').prop('checked'));
                        obj.description = $('#task_name').val();
                        obj.groupId = $('#task_group').attr('data-id');
                        obj.threshold = parseFloat($('#task_score').val());
                        obj.follow = $('#task_follow').val();
                        obj.notify = +($('#task_mailing').prop('checked'));

                        ajax('PUT', '/agent/api', data_format('/api/va/bovia/lpr', 0, 'POST', obj, null), function (a) {
                            if (a.error) {
                                $.growl.error({message: a.error});
                            } else {
                                $('#task_modal').modal('hide');
                                gen_task_node(a);
                                $.growl.notice({message: langDict.wasCreated});
                            }

                            btn_state(false);
                        });
                    }
                }
                break;
            case 'task_revert':
                var nid = md5('task_task_' + tid), node = $('#task_tree').jstree('get_node', nid);
                if (node) edit_task_form(node.original.more);
                break;
            case 'task_delete':
                if (tid) {
                    var nid = md5('task_task_' + tid), node = $('#task_tree').jstree('get_node', nid);
                    $('#task_modal').hide();

                    bootbox.confirm({
                        'title': langDict.aruYouSure,
                        'message': langDict.doYouWantDelete + '<a href="#" onclick="return false;">' + node.text + '</a> ',
                        'buttons': {
                            'cancel': {'label': '<i class="fa fa-times"></i> ' + langDict.cancel},
                            'confirm': {'label': '<i class="fa fa-check"></i> ' + langDict.apply}
                        },
                        'callback': function (confirm) {
                            if (confirm) {
                                $('#task_apply').button('loading');
                                $('#task_revert').button('loading');
                                $('#task_delete').button('loading');
                                $('#task_close').button('loading');

                                ajax('PUT', '/agent/api', data_format('/api/va/bovia/lpr', 0, 'DELETE', {'id': tid}, null), function (a) {
                                    if (a.error)
                                        $.growl.error({message: a.error});
                                    else {
                                        $('#task_tree').jstree().delete_node(nid, function () {
                                        });

                                        $('#task_apply').button('reset');
                                        $('#task_revert').button('reset');
                                        $('#task_delete').button('reset');
                                        $('#task_close').button('reset');

                                        edit_task_form(0);
                                        $('#task_modal').modal('hide');
                                        $.growl.notice({message: langDict.wasDeleted});
                                    }
                                });
                            } else
                                $('#task_modal').show();
                        }
                    });
                }
                break;
            case 'task_close':
                edit_task_form(0);
                break;
        }
    });

    $('#device_modal').on('shown.bs.modal hidden.bs.modal', function (e) {
        switch (e.type) {
            case 'shown':
                var width = $('#player').width(), height = (width * 9 / 16);
                new SVGCreate('player', $('#event_snapshot').attr('src'), width, height, 'rect', function (svg) {
                    object.roi = svg;

                    var _roi = {'x': 1, 'y': 1, 'w': 0, 'h': 0};

                    for (var i in _roi) if ($('#player').attr(i))
                        _roi[i] = parseFloat($('#player').attr(i));

                    object.roi.svgControlPanel.createRegion([
                        {'x': _roi.x, 'y': _roi.y},
                        {'x': _roi.x + _roi.w, 'y': _roi.y},
                        {'x': _roi.x + _roi.w, 'y': _roi.y + _roi.h},
                        {'x': _roi.x, 'y': _roi.y + _roi.h}]);
                });
                break;
            case 'hidden':
                $('#player').empty();
                object.roi = null;
                break;
        }
    });

    $('.roi-btn').on('click', function (e) {
        if (object.roi && !object.roi.svgControlPanel.isCreating) {
            object.roi.svgControlPanel.isCreating = true;
            object.roi.svgControlPanel.getPolyPoint() && object.roi.svgControlPanel.removePoly();
            var poly = object.roi.svgPanel.rect().fill("#f06").opacity(0.5).draw({snapToGrid: 10});
            poly.on("drawstop", function () {
                object.roi.areaObjectList.push(poly);
                object.roi.svgControlPanel.isCreating = false;
                object.roi.svgControlPanel.getPolyPoint();
            });
        }
    });

    $('#device_apply').on('click', function (e) {
        var btn = $(this), id = object.selected,
            origin = $.extend(true, {}, object.device);

        var obj = {
            'id': object.selected,
            'type': 'ai'
        }

        if (origin.lpr) {
            // support fr

            if (object.roi) {
                var roi = object.roi.svgControlPanel.getPolyPoint();

                if (roi) {

                    origin.lpr.roi = [{
                        'x': roi[0].x,
                        'y': roi[0].y,
                        'w': roi[1].x - roi[0].x,
                        'h': roi[2].y - roi[1].y
                    }]

                    for (var i in origin.lpr.roi[0]) if (origin.lpr.roi[0][i] > 1) origin.lpr.roi[0][i] = 1;
                } else {
                    $.growl.warning({message: langDict.noRoi});
                    return false;
                }
            }

            $('#minPlateDim').val() && (origin.lpr.minLicenseplateDim = parseInt($('#minPlateDim').val()));
            $('#confidenceThreshold').val() && (origin.lpr.confidenceThreshold = parseFloat($('#confidenceThreshold').val()));
            $('#device_follow').val() && (origin.lpr.source = $('#device_follow').val());

            obj.config = origin;
            obj.config.enabled = +($('#lpr_enabled').prop('checked'));
        }

        btn.button('loading');
        ajax('PUT', '/agent/api', data_format("/api/user/config", 0, "PUT", obj, null), function (a) {
            if (a.error) {
                $.growl.error({message: a.error});
            } else {
                $.growl.notice({message: langDict.wasModified});
                object.device = origin;
            }
            btn.button('reset');
        });
    });

    $(document).on('click', '.cell-input-view', function (e) {
        var tid = $(this).attr('task-id'), id = $(this).attr('data-id');
        object.task_tab = 'event_container';
        task_view(tid, id);
        muti_event.pause();
        $('#task_list').show();
        $('#task_view').hide();
    });

    $(document).on('click', '.cell-task-view', function (e) {
        var tid = $(this).attr('data-id');
        object.muti = [];
        object.task_tab = 'muti_container';
        object.muti_selected = tid;
        event_polling.pause();

        for (const i in object.task) if (tid == object.task[i].id) {
            const follow = object.task[i].follow;
            for (const j in follow){
                object.muti.push([j, follow[j].user.id, 0]);
            }
            muti_event.play();
            break;
        }

        $('#task_keyword').val($(this).attr('data-description'));
        $("#muti_title").html($(this).attr('data-description'));
        $('#muti_results').html('<div class="col text-center"><br><br><br><i class="fa fa-spinner fa-pulse fa-5x"></i></div>');
        $('#task_container').hide();
        $('#muti_container').show();

        $('#task_list').show();
        $('#task_view').hide();
    });

    $('#results').on('scroll', function (e) {
        $('.lazy').lazy();
    });

    $('#device_btn').on('click', function (e) {
        const id = $('#device_modal').attr('data-id'), btn = $(this);

        object.device = {};

        if (object.selected) {

            btn.button('loading');

            ajax('PUT', '/agent/api', data_format("/api/user/config?id=" + object.selected + '&type[]=ai', 0, "GET", {}, null), function (a) {
                if (a.error)
                    $.growl.error({message: a.error});
                else {
                    object.device = a.ai.config;
                    // console.log(object.device);
                    try {
                        $('#minPlateDim').val(object.device.lpr.minLicenseplateDim);
                        $('#confidenceThreshold').val(object.device.lpr.confidenceThreshold);

                        $('#lpr_enabled').prop('checked', object.device.enabled);
                        $('#device_follow').val(object.device.lpr.source);

                        $('#player').attr({
                            'x': object.device.lpr.roi[0].x,
                            'y': object.device.lpr.roi[0].y,
                            'h': object.device.lpr.roi[0].h,
                            'w': object.device.lpr.roi[0].w
                        });
                    } catch (e) {
                        console.warn(e);
                    }

                    $('#device_modal').modal({
                        backdrop: 'static',
                        keyboard: true,
                        show: true
                    });
                }
                btn.button('reset');
            });
        } else {
            //$.growl.warning({message: langDict.noneSelectedText});
            $.growl.warning({message: 'Device not uploaded configuration'});
        }
    });

    $(document).on('mouseenter click', '.table .img-origin', function (e) {
        switch (e.type) {
            case 'click':
                var img = $(this), attr = img.attr('x') && img.attr('y') && img.attr('w') && img.attr('h');

                if (attr) {
                    $('#original_modal').find('img').attr({
                        'src': img.attr('content'),
                        'x': img.attr('x'),
                        'y': img.attr('y'),
                        'w': img.attr('w'),
                        'h': img.attr('h')
                    });

                    $('#map2').height(1);
                    object._map && (object._map.remove());
                    object._map = map_initial('map2');

                    if (img.attr('data-lat') && img.attr('data-lng')) {
                        gps = {
                            'lat': img.attr('data-lat'),
                            'lng': img.attr('data-lng')
                        };

                        new L.marker(gps, {
                            'icon': L.ExtraMarkers.icon({
                                icon: 'fa-star',
                                markerColor: 'red',
                                shape: 'circle',
                                prefix: 'fas'
                            })
                        }).addTo(object._map).bindPopup('<label>' + gps.lat + ', ' + gps.lng + '</label>&emsp;');
                        object._map.setView(new L.LatLng(gps.lat, gps.lng));
                    }

                    $('#original_modal').modal({
                        backdrop: 'static',
                        keyboard: true,
                        show: true
                    }).find('.modal-title').html(moment(img.attr('data-time')).format('YYYY-MM-DD HH:mm:ss'));
                }
                break;
            case 'mouseenter':
                $(this).css('cursor', 'zoom-in');
                break;
        }
    });

    $('#original_modal').on('shown.bs.modal hidden.bs.modal', function (e) {
        var img = $('#original_modal').find('img');

        switch (e.type) {
            case 'shown':
                var width = img.width(), height = img.height(),
                    attr = img.attr('x') && img.attr('y') && img.attr('w') && img.attr('h');

                $('#map2').height(height);
                if (object._map) object._map.invalidateSize();

                img.parent().height(height);

                if (attr) img.parent().find('span').html($('<div class="fr-draw-face"></div>').css({
                    'width': parseFloat(img.attr('w')) * width,
                    'height': parseFloat(img.attr('h')) * height,
                    'left': parseFloat(img.attr('x')) * width,
                    'top': parseFloat(img.attr('y')) * height,
                    'border': '2px solid red'
                }));

                break;
            case 'hidden':
                img.removeAttr('x y w h').parent().find('span').empty();
                break;
        }
    });

    $(document).on('mouseenter click', '.video-origin', function (e) {
        switch (e.type) {
            case 'click':
                var img = $(this), video = $(this).data('video'), poster = img.data('src'), vid = $(this).attr('id').split('_')[1];
                var list = $('#list_'+vid), attr = list.data('x') && list.data('y') && list.data('w') && list.data('h');

                object.snapshot = {'poster': poster, 'videoUrls' : video};
                if (attr) {

                    $('#previous_event').css('display', 'block').attr('data-target', $(this).attr('data-previous'));
                    $('#next_event').css('display', 'block').attr('data-target', $(this).attr('data-next'));
                    $('#nav_img').click();

                    $('#or_snapshot').attr({
                        'src': poster,
                        'x': list.data('x'),
                        'y': list.data('y'),
                        'w': list.data('w'),
                        'h': list.data('h'),
                        'list': list.data('list')
                    });

                    $('#map_video').height(1);
                    object._map && (object._map.remove());
                    object._map = map_initial('map_video');

                    if (img.attr('data-lat') && img.attr('data-lng')) {
                        gps = {
                            'lat': img.attr('data-lat'),
                            'lng': img.attr('data-lng')
                        };
                        new L.marker(gps, {
                            'icon': L.ExtraMarkers.icon({
                                icon: 'fa-star',
                                markerColor: 'red',
                                shape: 'circle',
                                prefix: 'fas'
                            })
                        }).addTo(object._map).bindPopup('<label>' + gps.lat + ', ' + gps.lng + '</label>&emsp;');
                        object._map.setView(new L.LatLng(gps.lat, gps.lng));
                    }

                    var name = $('#or_'+vid).text().split(','), object_list = '<div class="d-flex flex-wrap col-12">';
                    name.pop();
                    for( const i in name){
                        name[i] = name[i].trim();
                        var description = '';
                        if( name[i].includes('*')) {
                            description = '<span class="btn" id="' +  name[i].split('*')[0] + '" style="background-color:' + draw_or_box(name[i].split('*')[0]) + '">' + name[i].split('*')[0] + '</span><span class="align-self-center">*' + name[i].split('*')[1] + '</span>';
                            name[i] = name[i].split('*')[0];
                        }
                        else description = '<span class="btn" id="' +  name[i] + '" style="background-color:' + draw_or_box(name[i]) + '">' + name[i] + '</span>';

                        object_list += '<div class="col-12">';
                            object_list += '<label class="custom-control overflow-checkbox">';
                            object_list += '<input type="checkbox" class="overflow-control-input or-draw" id="' + name[i] + '" checked>';
                            object_list += '<span class="overflow-control-indicator"></span>';
                            object_list += '<span class="material-control-description">' + description + '</span>';
                            object_list += '</label>';
                        object_list += '</div>';
                    }
                    object_list += '</div>';

                    var info = '<tr><th>' + langDict.name + '</th><td>' + $('#ordpt_'+vid).val() + '</td></tr>';
                        info += '<tr><th>' + langDict.regconize_result + '</th><td>' + $('#or_'+vid).html() + '</td></tr>';
                    var info2 = '<tr><th>' + langDict.name + '</th></tr><tr><td>' + $('#ordpt_'+vid).val() + '</td></tr>';
                        info2 += '<tr><th>' + langDict.regconize_result + '</th></tr><tr><td>' + object_list + '</td></tr>';
                    $('#video_info').html(info);
                    $('#video_info2').html(info2);
                    $('#video_latitude').html(gps.lat);
                    $('#video_longitude').html(gps.lng);

                    $('#video_modal').modal({
                        backdrop: 'static',
                        keyboard: true,
                        show: true
                    }).find('.modal-title').html(moment(img.attr('data-time')).format('YYYY-MM-DD HH:mm:ss'));
                }else
                    $('#video_modal').modal('hide');
                break;
            case 'mouseenter':
                $(this).css('cursor', 'zoom-in');
                break;
        }
    });

    $('#video_modal').on('show.bs.modal shown.bs.modal hidden.bs.modal', function (e) {
        var img = $('#or_snapshot');

        switch (e.type) {

            case 'show':
                $('#plyr').attr({'poster': object.snapshot.poster, 'src': object.snapshot.videoUrls});
                $('#or_snapshot').attr('src', object.snapshot.poster);
                break;

            case 'shown':
                var width = img.width(), height = img.height(),
                    attr = img.attr('x') && img.attr('y') && img.attr('w') && img.attr('h');

                $('#map_video').height($('#right_content').height());
                if (object._map) object._map.invalidateSize();
                $('#plyr').parent().height(height);
                img.parent().height(height);

                if (attr) {
                    var name = img.attr('list').split('_'),  x = img.attr('x').split('_'), y = img.attr('y').split('_'), w = img.attr('w').split('_'), h = img.attr('h').split('_');
                    img.parent().find('span').empty();
                    img.parent().find('span').css('left', '0');
                    for(const i in name){
                        img.parent().find('span').append($('<div class="fr-draw-face '+ name[i]+'"></div>').css({
                            'width': parseFloat(w[i]) * width,
                            'height': parseFloat(h[i]) * height,
                            'left': parseFloat(x[i]) * width,
                            'top': parseFloat(y[i]) * height,
                            'border': '2px solid ' + draw_or_box(name[i])
                        }).attr('id', name[i]+'_'+i));
                    }
                }
                break;

            case 'hidden':
                // img.removeAttr('x y w h').parent().find('span').empty();
                $("#plyr").get(0).pause();
                $('#plyr').attr({'poster': 'img/default.jpg', 'src': ''});
                break;
        }
    });

    $('#or_snapshot').bind('load', function(){
        var img = $('#or_snapshot');
        var width = img.width(), height = img.height(),
            attr = img.attr('x') && img.attr('y') && img.attr('w') && img.attr('h');
        $('#map_video').height($('#right_content').height());
        orsnapshot_resize();
    });

    $(document).on('click mouseenter mouseleave dblclick', '.table .img-rank', function (e) {
        var img = $(this), _car = function (img) {
            var data = null;

            if ($('#task_tab').is(':visible')) {
                data = object.blacklist[img.attr('content')];
            } else if ($('#event_tab').is(':visible')) {
                for (var i in object.history) if (object.history[i].id == img.attr('event-id')) {
                    var triggered = object.history[i].triggered;
                    for (var j in triggered) if (triggered[j].PhotoUrl == img.attr('data-src')) {
                        data = triggered[j];
                        break;
                    }
                    break;
                }
            }
            return data;
        };

        var car = _car(img)

        switch (e.type) {
            case 'dblclick':
                if (car) {
                    car.enabled = 1;
                    edit_man_form(car);

                    object.vehicles.preview(car);

                    $('#car_snapshot_row').show();
                    $('#car_apply').hide();
                    $('#car_revert').hide();
                    $('#car_delete').hide();

                    $('#vehicle_modal').modal({
                        backdrop: 'static',
                        keyboard: true,
                        show: true
                    });
                }
                break;
            case 'click':
                var row = img.closest('tr'), inEvent = row.closest('#events').length;

                row.find('img').css('border', "");
                img.css('border', "solid 2px red");

                /*

                var tds = inEvent ? '<td colspan="6"></td>' : '<td colspan="10"></td>';
                if (car) {

                    car.idCard.split('-').length > 4 && (car.idCard = '');

                    var wanted = '<button class="btn btn-sm btn-secondary">&emsp;' + langDict.no + '&emsp;</button>',
                        records = '';

                    try {
                        if (car.wantedText.length) {
                            var wantedText = '';
                            for (var i in car.wantedText) {
                                wantedText += car.wantedText[i] + ' ';
                            }
                            wanted = '<button class="btn btn-sm btn-danger" data-container="body" data-toggle="popover" dat' +
                                'a-trigger="focus" data-placement="left" data-content="' + wantedText + '">&emsp;' + langDict.yes + '&emsp;</button>';
                        }
                    } catch (e) {

                    }
                    car.tag && car.tag.length && (records = car.tagText[0]);

                    if (inEvent)
                        tds = '<td>' + car.licensePlate + '</td><td colspan="2">' + car.note + '</td><td>' + car.brand + '</td><td colspan="2">' + car.model + '</td><td>' + car.color + '</td><td>' + car.classification + '</td>';
                    else
                        tds = '<td>' + car.name + '</td><td>' + gender(car.gender) + '</td><td>' + car.idCard + '</td><td>' + gen_age(car.birthday) + '</td><td>' + wanted + '</td><td>' + records + '</td><td>' + moment(img.attr('time')).format('HH:mm:ss') + '</td>';

                    row.next('tr').next('tr').html(tds);

                } else
                    row.next('tr').next('tr').html(tds);
                */


                break;
            case 'mouseenter':
                $(this).css('cursor', 'pointer');
                break;
        }
    });
    // ##### End task event #####

    //#### Start Event Table ####

    $('[id^=condition_]*').on('click', function () {
        var checked = $(this).prop('checked'), target = $(this).attr('id').split('_')[1];
        checked ? $('#' + target + '_row').show() : $('#' + target + '_row').hide();
    });

    var event_table_btn = function (action) {
        $('#eventSearchBtn').button(action);
        $('.dt-buttons').find('button').each(function () {
            $(this).button(action);
        });
    }, eventTable = $('#events').DataTable({
        "processing": true,
        "serverSide": true,
        "autoWidth": true,
        "dom": 'lBprtip',
        "lengthMenu": [10, 25, 50, 100],
        "language": {"url": 'files/' + lang + '.json'},
        "iDisplayLength": 25,
        "buttons": [{
            "text": langDict['selectAll'],
            'className': 'btn btn-success',
            "action": function () {
                eventTable.rows()[0].length && $('#events > tbody > tr').each(function () {
                    $(this).find('input[type=checkbox][class=selection]').prop('checked', 1)
                });
            }
        }, {
            "text": langDict['diselectAll'],
            'className': 'btn btn-warning',
            "action": function () {
                eventTable.rows()[0].length && $('#events > tbody > tr').each(function () {
                    $(this).find('input[type=checkbox][class=selection]').prop('checked', 0)
                });
            }
        }, {
            "text": langDict['delete'],
            'className': 'btn btn-danger',
            "action": function () {
                if (eventTable.rows()[0].length) {
                    var selected = [], name = '';
                    $('#events > tbody > tr').each(function () {
                        var checkbox = $(this).find('input[type=checkbox][class=selection]');
                        if (checkbox.prop('checked'))
                            selected.push(checkbox.attr('data-id'));
                    });

                    if (selected.length) {
                        event_table_btn('loading');
                        var data = data_format('/api/va/bovia/or/snapshot/delete', 0, "POST", {'snapshotIDs': selected}, null);

                        ajax('PUT', '/agent/api', data, function (a) {
                            if (a.error) {
                                $.growl.error({message: a.error});
                            } else {
                                $.growl.notice({message: langDict.wasDeleted});
                                //ui remove only, server side need implement delete request
                                for (var i in selected) {
                                    var row_id = 'history' + selected[i];
                                    eventTable.row(row_id).remove();
                                    $('tr[id=' + row_id + ']').remove();
                                }
                            }
                            event_table_btn('reset');
                        });
                    } else
                        $.growl.warning({message: langDict.noneSelectedText});
                }
            }
        }, {
            "text": langDict['preservation'],
            'className': 'btn btn-success',
            "action": function () {
                if (eventTable.rows()[0].length) {
                    var selected = [], name = '';
                    $('#events > tbody > tr').each(function () {
                        var checkbox = $(this).find('input[type=checkbox][class=selection]');
                        if (checkbox.prop('checked'))
                            selected.push(checkbox.attr('data-id'));
                    });

                    if (selected.length) {
                        event_table_btn('loading');
                        var data = data_format('/api/va/bovia/or/snapshot/update', 0, "POST", {
                            'snapshotIDs': selected,
                            'keep': 1
                        }, null);

                        ajax('PUT', '/agent/api', data, function (a) {
                            if (a.error) {
                                $.growl.error({message: a.error});
                            } else {
                                $.growl.notice({message: langDict.wasModified});
                                //ui remove only, server side need implement delete request
                                for (var i in selected) {
                                    var row_id = 'history' + selected[i];
                                    $('tr[id=' + row_id + ']').find('.history-keep[type=checkbox]').prop('checked', 1);
                                }
                            }
                            event_table_btn('reset');
                        });
                    } else
                        $.growl.warning({message: langDict.noneSelectedText});
                }
            }
        }, {
            "text": langDict['disposable'],
            'className': 'btn btn-warning',
            "action": function () {
                if (eventTable.rows()[0].length) {
                    var selected = [], name = '';
                    $('#events > tbody > tr').each(function () {
                        var checkbox = $(this).find('input[type=checkbox][class=selection]');
                        if (checkbox.prop('checked'))
                            selected.push(checkbox.attr('data-id'));
                    });

                    if (selected.length) {
                        event_table_btn('loading');
                        var data = data_format('/api/va/bovia/or/snapshot/update', 0, "POST", {
                            'snapshotIDs': selected,
                            'keep': 0
                        }, null);

                        ajax('PUT', '/agent/api', data, function (a) {
                            if (a.error) {
                                $.growl.error({message: a.error});
                            } else {
                                $.growl.notice({message: langDict.wasModified});
                                //ui remove only, server side need implement delete request
                                for (var i in selected) {
                                    var row_id = 'history' + selected[i];
                                    $('tr[id=' + row_id + ']').find('.history-keep[type=checkbox]').prop('checked', 0);
                                }
                            }
                            event_table_btn('reset');
                        });
                    } else
                        $.growl.warning({message: langDict.noneSelectedText});
                }
            }
        }],
        "columnDefs": [
            {'data': 'selection', "targets": [0], "orderable": false, "className": "text-center", 'width': '6%'},
            {'data': 'body', "targets": [1], "orderable": false, 'width': '94%'},
        ], "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
            $('img', nRow).lazyLoadXT();
        }, "fnDrawCallback": function (oSettings, oData) {
            utc_converter();
        }, 'fnInitComplete': function (oSettings, json) {
            $('.dt-buttons').find('button').each(function () {
                $(this).removeClass('btn-secondary').attr('data-loading-text', '<span class=\'spinner-grow spinner-grow-sm\'></span>');
            });
            loading(false);
        }, "ajax": $.fn.dataTable.pipeline(object.eventConditon, function (a) {
            if (!a.error) {
                object.history = a.origin;
                $.growl.notice({message: langDict.result + ': ' + a.total + ' ' + langDict.row + langDict.event_details});
            }
        })
    });

    // $(document).on('scroll', function (e) {
    //     $('.utc-time').each(function () {
    //         $(this).html(moment($(this).html()).format(' YYYY-MM-DD HH:mm:ss')).removeClass('utc-time');
    //     });
    // });

    $('#condition_task').on('click', function (e) {
        if ($(this).prop('checked')) {
            $('#condition_group').prop('checked', 0);
            $('#group_row').hide();
        }
    });

    $('#condition_group').on('click', function (e) {
        if ($(this).prop('checked')) {
            $('#condition_task').prop('checked', 0);
            $('#task_row').hide();
        }
    });

    $('#eventSearchBtn').on('click', function (e) {
        var btn = $(this), data = {};

        $('#condition_users').prop('checked') && $('#select_users').val() && (data['user'] = $('#select_users').val());
        $('#condition_group').prop('checked') && $('#select_group').val() && (data['group'] = [$('#select_group').val()]);
        $('#condition_object').prop('checked') && $('#select_object').val() && (data['object'] = $('#select_object').val());

        $('#condition_misjudged').prop('checked') && (data['misjudged'] = 1);

        if ($('#condition_time').prop('checked')) {
            data['startTime'] = $('#search_time').data('daterangepicker').startDate.format('YYYY-MM-DDTHH:mm:ssZ');
            data['stopTime'] = $('#search_time').data('daterangepicker').endDate.format('YYYY-MM-DDTHH:mm:ssZ');
        }

        if (Object.keys(data).length) {
            btn.button('loading');
            object.eventConditon = data_format('/api/va/bovia/or/snapshot/search', 0, 'POST', data, 30);
            video_search(eventTable, object.eventConditon, function (a) {
                if (!a.error) {
                    object.history = a.origin;
                    $.growl.notice({message: langDict.result + ': ' + a.total + ' ' + langDict.row + langDict.event_details});
                }
                btn.button('reset');
            });
        } else
            $.growl.warning({message: langDict.noInputData});
    });

    $('.tag-list').on('click', function (e) {
        //console.log(object.tagList);

        $('#tag_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });

    $(document).on('click', '.tag-add, .tag-remove, .tag-apply, .tag-revert', function (event) {
        var btn = $(this), target = btn.closest('.input-group'), id = target.find('.tag-input').attr('data-id'),
            name = target.find('input').val().trim();

        var reset = function () {
            for (var i in object.tagList) if (object.tagList[i].id == id) {
                target.find('.tag-revert').addClass('d-none');
                target.find('.tag-input').val(object.tagList[i].name);
                target.find('.tag-apply').removeClass('btn-primary tag-apply').addClass('btn-danger tag-remove').html('<i class="fas fa-minus"></i>');
                break;
            }
        };

        if (btn.hasClass('tag-revert')) {
            reset();
        } else if (btn.hasClass('tag-add')) {
            if (name.length) {

                //avoid clone loading button
                var clone = target.closest('.form-group').clone();

                btn.button('loading');
                ajax('PUT', '/agent/api', data_format('/api/va/bovia/lpr/tag', 0, 'POST', {'name': name}, null), function (a) {
                    if (a.error) {
                        $.growl.error({message: a.error});
                    } else {

                        var div = document.createElement('div');

                        clone.find('.tag-add').removeClass('tag-add btn-success').addClass('tag-remove btn-danger').html('<i class="fas fa-minus"></i>');
                        clone.find('input').attr('data-id', a.id).addClass('tag-input');
                        div.classList.add('col-6');
                        div.appendChild(clone[0]);
                        $('#tag-list').prepend(div);

                        object.tagList.push(a);

                        $('#car_tag').prepend('<option value="' + a.id + '">' + a.name + '</option>').selectpicker('refresh');
                        //$('#select_dbTag').prepend('<option value="' + a.id + '">' + a.name + '</option>').selectpicker('refresh');

                        $.growl.notice({message: langDict.wasCreated});
                    }
                    btn.button('reset');
                });
            } else $.growl.warning({message: langDict.noInputData});
        } else if (btn.hasClass('tag-remove')) {

            btn.button('loading');

            ajax('PUT', '/agent/api', data_format('/api/va/bovia/lpr/tag', 0, 'DELETE', {'id': id}, null), function (a) {
                if (a.error) {
                    $.growl.error({message: a.error});
                    btn.button('reset');
                } else {
                    target.closest('.col-6').remove();

                    //remove tag from client side
                    $('#car_tag option[value=' + id + ']').remove();
                    //$('#select_dbTag option[value=' + id + ']').remove();

                    $('#car_tag').selectpicker('refresh');
                    //$('#select_dbTag').selectpicker('refresh');

                    var i = object.tagList.length;
                    while (i > 0) {
                        i--;
                        if (object.tagList[i].id == id) {
                            object.tagList.splice(i, 1);
                            break;
                        }
                    }
                    $.growl.notice({message: langDict.wasDeleted});
                }
            });

        } else if (btn.hasClass('tag-apply')) {
            if (name.length) {

                target.find('.tag-apply').button('loading');
                target.find('.tag-revert').button('loading');

                ajax('PUT', '/agent/api', data_format('/api/va/bovia/lpr/tag', 0, 'PUT', {
                    'id': id,
                    'name': name
                }, null), function (a) {

                    target.find('.tag-apply').button('reset');
                    target.find('.tag-revert').button('reset');

                    if (a.error) {
                        $.growl.error({message: a.error});
                    } else {
                        $('#car_tag option[value=' + id + ']').html(name);
                        //$('#select_dbTag option[value=' + id + ']').html(name);

                        $('#car_tag').selectpicker('refresh');
                        //$('#select_dbTag').selectpicker('refresh');

                        for (var i in object.tagList) if (object.tagList[i].id == id) {
                            object.tagList[i].name = name;
                            break;
                        }
                        reset();
                        $.growl.notice({message: langDict.wasModified});
                    }
                });
            } else $.growl.warning({message: langDict.noInputData});
        }
    });
    $(document).on('keyup', '.tag-input', function (e) {
        var input = $(this), id = input.attr('data-id'), parent = input.parent();

        for (var i in object.tagList) if (object.tagList[i].id == id) {
            if (object.tagList[i].name != input.val()) {
                parent.find('.tag-remove').removeClass('btn-danger tag-remove').addClass('btn-primary tag-apply').html('<i class="fas fa-check"></i>');
                parent.find('.tag-revert').removeClass('d-none');
            } else {
                parent.find('.tag-apply').removeClass('btn-primary tag-apply').addClass('btn-danger tag-remove').html('<i class="fas fa-minus"></i>');
                parent.find('.tag-revert').addClass('d-none');
            }
            break;
        }
    });

    $(document).on('click', '.history-keep, .history-misjudged', function (e) {
        var checkbox = $(this),
            obj = {'snapshotIDs': [checkbox.attr('data-id')]};

        if (checkbox.hasClass('history-keep')) {
            obj.keep = +(checkbox.prop('checked'));
        } else if (checkbox.hasClass('history-misjudged')) {
            obj.misjudged = +(checkbox.prop('checked'));
        }

        ajax('PUT', '/agent/api', data_format('/api/va/bovia/or/snapshot/update', 0, "POST", obj, null), function (a) {
            if (a.error) {
                $.growl.error({message: a.error});
                checkbox.prop('checked', !checkbox.prop('checked'))
            } else {
                $.growl.notice({message: langDict.wasModified});
            }
        });
    });

    $(window).resize(function (e) {
        auto_resize();
        //object.roi && object.roi.resize(width, heigh);
    });

    $('select[id=select_group]').on('show.bs.select', function (e) {
        $('#group_tree').jstree(true).search('');
        $('#group_tree').jstree('deselect_all');

        // var selected = $(this).val();
        // for (var i in selected) $('#group_tree').jstree('select_node', md5('group_group_' + selected[i]));

        $('#group_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });

    $('#select_users').on('show.bs.select', function (e, clickedIndex, isSelected, previousValue) {
        $('#user_search').val('');
        $('#user_tree').jstree(true).search('');
        $('#user_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });

    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        var target = e.target.hash;
        if (target == '#task_tab') auto_resize();
        if (target == '#img') orsnapshot_resize();
        if (target == '#map') window.dispatchEvent(new Event('resize'));
    });

    $(document).on('click', '.or-draw', function (e) {
        var type = $(this).attr('id');
        if($('#nav_img').is(':visible')){
            $('.'+type).css('display',($('.'+type).css('display') == 'none') ? 'block' : 'none');
        }
    });

    $(document).on('click', '#next_event, #previous_event', function (e){
        var target = $(this).attr('data-target');
        switch (target) {
            case 'event_0':
                $('#video_modal').modal('hide');
                $.growl.notice({message: langDict.reachtop});
                $('html, body').animate({scrollTop:0}, 1000);
                break;
            case 'event_999999':
                $('#video_modal').modal('hide');
                $.growl.notice({message: langDict.reachbottom});
                $('html, body').animate({scrollTop:$(document).height()}, 1000);
                break;
            default:
                $('#'+target).click();
        }
    });
});