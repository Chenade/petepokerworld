/**
 * Created by Cloud on 2016/11/3.
 */
$(document).ready(function () {

    if(window.localStorage['errorLog']){
        var error = localStorage.getItem('errorLog').split(",");
        for(const i in error){
            var detail = "";
            if(error[i]){
                var tmp = error[i].split("@");  //content@time
                if(tmp[0]) detail += "&ensp;:<br>&emsp;&emsp;" + tmp[0];    //content
                detail += "<br>&emsp;&emsp;" + moment(tmp[1]).format('YYYY-MM-DD HH:mm:ss');    //time
            }
            $.growl.warning({message: langDict['loginFailed'] + detail});
        }
        localStorage.removeItem('errorLog');
    }

    var isFullScreen = false;

    const sheet = document.createElement('style');
    sheet.innerHTML = `
        video::-webkit-media-controls-timeline {display: none;}
        video::-webkit-media-controls-current-time-display{display: none;}
        video::-webkit-media-controls-time-remaining-display {display: none;}
        video::-webkit-media-controls-toggle-closed-captions-button {display: none;}
        
        .vms-tab video {border-radius: 4px; object-fit: fill;}
        
        #user_tree {height: ${$(window).height() * 0.7}px;}
        .device-tab {height: ${$(window).height() * 0.75}px;}`;
    document.body.appendChild(sheet);

    $(document).on('fullscreenchange mozfullscreenchange webkitfullscreenchange msfullscreenchange', function () {
        (document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen || document.msFullscreenElement) ?
            isFullScreen = true : isFullScreen = false;
    });
    var plyr_, volume = 0;
    var jq = function (myid) {
        return "#" + myid.replace(/(:|\.|\[|\]|,|=|@)/g, "\\$1");
    }, object = {'tree': [], 'player': null, 'maps': {}}, autoResize = function () {
        try {
            var width = $('.player-container').width(), heigh = (width * 9) / 16;
            $('#map1').is(':visible') && object.maps.player && ($('#map1').height(heigh), $('#map1').width($('#map1').parent().width()), object.maps.player.invalidateSize());
        } catch (e) {
            //console.error(e);
        }
    }, recursive = function (origin) {
        var data = {
            'text': String(origin.group.name),
            'icon': icons.users,
            'state': {'selected': false},
            'more': origin.group,
            'children': [],
            'id': 'group_' + origin.group.id,
            'a_attr': {'class': 'text-primary'}
        };
        var users = []
        /*-------- group sorting --------*/
        var chld = origin['children'];
        chld && (chld = chld.sort(function (a, b) {
            return (a.group.name > b.group.name) ? 1 : ((b.group.name > a.group.name) ? -1 : 0);
        }));
        /*-------- end sort --------*/
        for (var i in chld) data['children'].push(recursive(chld[i]));
        return data;
    }, get_live_list = function (cb) {
        var obj = {'sharing': [], 'live': []}, count = 0;
        ajax('PUT', '/agent/api', data_format('/api/task/live/list', 0, 'GET', {}, null), function (a) {
            a.error || (obj.sharing = a.liveList);
            for (var i in obj.sharing) obj.sharing[i]['target'] = 'sharing';  // not in api
            count += 1;
            count == 2 && cb(obj);
        });
        ajax('PUT', '/agent/api', data_format('/api/live/list', 0, 'GET', {}, null), function (a) {
            a.error || (obj.live = a.liveList);
            for (var i in obj.live) obj.live[i]['target'] = 'live';  // not in api
            count += 1;
            count == 2 && cb(obj);
        });
    }, gen_input = function (id, value) {
        return '<div class="input-group"><input type="text" class="form-control form-control-sm" data-id="' + id + '" value="' + value + '" disabled></div>';
    }, liveList = {'sharing': {}, 'live': {}}, _polling = function () {
        get_live_list(function (a) {
            var _tmpList = {'sharing': {}, 'live': {}};

            for (var field in a) for (var i in a[field]) {
                var live = a[field][i], new_node_id = null, obj = {
                    'text': live.id,
                    'icon': icons.online,
                    'state': {'selected': false},
                    'more': live,
                    'a_attr': {'class': 'text-secondary'},
                    'data': {
                        'id': live.id,
                        'name': gen_input(live.id, live.name),
                        'title': gen_input(live.id, live.videoTitle)
                    }
                };

                _tmpList[field][live.id] = live;

                if (live.id in liveList[field]) {
                    var img = $('div[class=form-group][data-target="' + field + '"][data-id="' + live.id + '"]').find('img'),
                        modal = $('#device_modal'), handling = false;
                    if (img.length) {
                        var unix = moment().unix(), _unix = parseInt(img.attr('data-time'));
                        if (unix - _unix > 300) {  // update snapshot of ui each 5min
                            img.attr('data-time', unix);
                            img.attr('src', live.snapshotUrl);
                        }
                    }
                    if (modal.attr('data-target') == field && modal.attr('data-id') == live.id && modal.is(':visible')) {
                        handling = true;
                    }
                    if (field == 'sharing' && modal.attr('data-task') != live.taskId) {
                        handling = false;
                    }
                    if (handling && live.gps) {
                        try {
                            // live.gps.old && $.growl.warning({message: live.id + ' GPS has not been updated for a long time.'});
                            live.gps.lock && (live.gps.timestamp = moment().format('YYYY-MM-DD HH:mm:ss'));

                            handlerMarker(object.maps.player, {
                                'id': live.id,
                                'gps': live.gps
                            }, true, true);
                        } catch (e) {
                            //console.error(e);
                        }
                    }
                } else {
                    var parent = '#', parents = [], icon = '';

                    switch (field) {
                        case 'live':
                            parent = 'group_' + live.groupId;
                            break;
                        case 'sharing':
                            parent = 'sharing_' + live.taskId;
                            break;
                    }

                    new_node_id = 'user_' + parent + '_' + live.id;
                    obj.id = new_node_id;

                    $('#user_tree').jstree().create_node(parent, obj, "last", function () {
                        $('#user_tree').jstree('_open_to', new_node_id);
                        parents = $('#user_tree').jstree('get_node', new_node_id).parents;
                    });

                    if (parents.length) {
                        parents.pop(); // pop #
                        parents.reverse();
                        var groups_text = '', uuid = '';

                        for (var gid = 0; gid < parents.length; gid++) {
                            var group = $('#user_tree').jstree('get_node', parents[gid]);
                            uuid += group.id;
                            groups_text += group.text;
                            gid < parents.length - 1 && (groups_text += '&ensp;<i class="fas fa-angle-double-right"></i>&ensp;');
                        }
                        //es5_endsWith(groups_text, ' > ') && (groups_text = groups_text.slice(0, -3));

                        if (field == 'live')
                            groups_text = '<i class="' + icons.users + ' text-primary search-group" data-id="' + parent + '"> ' + groups_text + '</i>';
                        else if (field == 'sharing')
                            groups_text = '<i class="' + icons.share + ' search-group" data-id="' + parent + '"> ' + groups_text + '</i>';

                        if ($('div[class=input-group][data-id=' + uuid + ']').length == 0) {
                            var container = '<div class="input-group" data-id="' + uuid + '"><div class="row col-12" style="cursor: pointer; padding-bottom: 7px; font-size: 1.2em">' + groups_text + '</div></div>';
                            $('.device-tab').append(container);
                        }

                        var card = gen_card(field, live);
                        $('div[class=input-group][data-id=' + uuid + ']').append(card);

                        if ($('[name="_user"]').attr('content') == '_manager') {
                            var player = $('div[class=form-group][data-target="' + field + '"][data-id="' + live.id + '"]' + (field == 'sharing' ? '[data-task="' + live.taskId + '"]' : '')).find('video');
                            if (player.length) {
                                player = player.get(0);
                                //console.log(live)
                            }
                        }
                    }
                }
            }

            for (var field in liveList) for (var i in liveList[field]) {
                var old_live = liveList[field][i], parent = '#', node_id;

                switch (field) {
                    case 'live':
                        parent = 'group_' + old_live.groupId;
                        break;
                    case 'sharing':
                        parent = 'sharing_' + old_live.taskId;
                        break;
                }

                node_id = 'user_' + parent + '_' + old_live.id;

                if (i in _tmpList[field]) {

                    var node = $('#user_tree').jstree('get_node', node_id), redraw = false;

                    if (node) {
                        var card = $('.form-group[data-target="' + field + '"][data-id="' + i + '"]');

                        if (node.original.more.name != _tmpList[field][i].name) {
                            node.data.name = gen_input(_tmpList[field][i].id, _tmpList[field][i].name);
                            redraw = true;
                        }
                        if (node.original.more.videoTitle != _tmpList[field][i].videoTitle) {
                            node.data.title = gen_input(_tmpList[field][i].id, _tmpList[field][i].videoTitle);
                            //todo: update card title
                            if (card.find('.cell-input-title')) {
                                card.find('.cell-input-title').find('input').val(_tmpList[field][i].videoTitle);
                            }
                            redraw = true;
                        }
                        if (card.find('._state'))
                            card.find('._state').html(gen_state_row(_tmpList[field][i]));
                        if (card.find('._time'))
                            card.find('._time').html(moment(_tmpList[field][i].startTime).format('YYYY-MM-DD HH:mm:ss'));

                        node.original.more = _tmpList[field][i];
                        redraw && $('#user_tree').jstree('redraw_node', node_id);
                    }
                } else {
                    $('#user_tree').jstree('delete_node', node_id);
                    var card = $('.form-group[data-target="' + field + '"][data-id="' + i + '"]'),
                        upper = card.closest('.input-group');

                    card.remove();

                    if (upper.find('.card').length == 0) {
                        upper.remove();
                    }
                }
            }

            liveList = _tmpList;
            //console.log(liveList);
            // if ($('[name="_user"]').attr('content') == 'manager') $('.form-group video').each(function (e) {
            //     this.paused && this.play;
            // });

            setTimeout(_polling, 5000);
        });
    }, storage_state = function (obj) {
        var text = '<i class="fas fa-sd-card"></i>', ro = false;

        const state = function (target) {
            if (obj[target]['readOnly']) {
                ro = true;
                text = '<i class="fas fa-sd-card text-danger"></i>';
            } else
                text = '<i class="fas fa-sd-card text-success"></i>';
        }

        try {
            if ('sdcard' in obj)
                state('sdcard');
            else if ('usbdisk' in obj)
                state('usbdisk');
        } catch (e) {
            text = '<i class="fas fa-sd-card text-warning"></i>';

        }

        return text;
    }, publish_state = function (s) {
        var text = '';

        switch (s) {
            case 'running':
                text = '<i class="fas fa-play text-success"></i>';
                break;
            case 'idle':
            case 'connecting':
                text = '<i class="fas fa-play text-warning"></i>';
                break;
            case 'error':
            case'unknown':
                text = '<i class="fas fa-play text-danger"></i>';
                break;
            default:
                text = '<i class="fas fa-play"></i>';
                break;
        }
        return text;
    }, record_state = function (s) {
        var text = '';

        switch (s) {
            case 'running':
                text = '<i class="fas fa-film text-success"></i>';
                break;
            case 'idle':
                text = '<i class="fas fa-film text-warning"></i>';
                break;
            case 'error':
            case'unknown':
                text = '<i class="fas fa-film text-danger"></i>';
                break;
            default:
                text = '<i class="fas fa-film"></i>';
                break;
        }
        return text;
    }, vcc_state = function (info) {
        var vcc = '--V';
        try {
            if (info.int_bat_vbus)
                vcc = (info.int_bat_vbus / 100) + 'V';
        } catch (e) {
            //console.warn(e);
        }
        return vcc;
    }, temp_state = function (info) {
        try {
            var temp = '--°C', temperature = null;

            if ('temperature' in info)
                temperature = info.temperature;
            else if ('board_temp2' in info.sensor)
                temperature = Math.round(info.sensor.board_temp2 / 100);

            if (temperature) {
                if (temperature <= 60) {
                    temp = '<font>' + temperature + '</font>°C';
                } else if (temperature <= 80)
                    temp = '<font class="text-warning font-weight-bold">' + temperature + '</font>°C';
                else
                    temp = '<font class="text-danger font-weight-bold">' + temperature + '</font>°C';
            }
            return temp;
        } catch (e) {
            return '';
        }
    }, gen_state_row = function (data) {
        var state = '', tx = '', rx = '';

        // try {
        //     tx = formatBytes(data.device.status.networks.throughput.tx * 1024, 0, 1024);
        //     rx = formatBytes(data.device.status.networks.throughput.rx * 1024, 0, 1024);
        //     // tx = '<i class="fas fa-upload"> ' + tx + '</i>';
        //     // rx = '<i class="fas fa-download"> ' + rx + '</i>';
        // } catch (error) {
        // }

        try {
            if (moment().unix() - moment(moment(data.device.status._date)).local().unix() <= 60) {
                var _ch = 99;
                for (var i in data.device.status.services.server.channels) if (data.device.status.services.server.channels[i] == data.id) {
                    _ch = i;
                    break;
                }
                const publishing = publish_state(data.device.status.services.publishing[_ch]),
                    recording = record_state(data.device.status.services.recording[_ch]),
                    storage = storage_state(data.device.status.systems.disk),
                    board_temp = temp_state(data.device.status.systems),
                    int_bat_vbus = vcc_state(data.device.status.systems.sensor);

                state = publishing + '&ensp;' + recording + '&ensp;' + storage + '&ensp;' + int_bat_vbus + '&ensp;' + board_temp + '&ensp;' + tx + '&ensp;' + rx;
            }
        } catch (e) {
            state = '-';
        }
        return state;
    }, gen_card = function (target, data) {
        var str = '<div class="form-group" data-target="' + target + '" data-id="' + data.id + '" data-task="' + (target == 'sharing' ? data.taskId : '') + '" style="padding-right: 2px"><div class="card" style="width: 15.rem;">';
        if ($('[name="_user"]').attr('content') == '_manager') {
            str += '<div class="card-img-top"><video preload="none" muted autoplay controls crossorigin style="border-radius: 4px;" width="240" height="135"></video></div>';
        } else {
            str += '<div class="image-container"><img class="card-img-top play-snapshot" data-time="' + moment().unix() + '" src="' + data.snapshotUrl + '" onerror="this.src=\'/img/default.jpg\';"><div class="play-icon"></div> </div>';
        }
        str += '<div class="card-body">';
        str += '<div class="cell-input-title" style="display:inline-block; position:relative; cursor: pointer;margin-top: -10px;">';
        str += '<input type="text" class="form-control font-weight-bold" value="' + data.videoTitle + '" style="background-color: #fff; border: none; padding: 0; color: #212529; font-size: 1.2em; width: 200px;" disabled>';
        str += '<div style="position:absolute; left:0; right:0; top:0; bottom:0;"></div></div>​';
        str += '<div class="form-group" style="margin-top: -10px;"><span class="' + icons.online + '" style="position: absolute; z-index: 2; display: block; height: 2.375rem; line-height: 2.375rem; text-align: center; pointer-events: none; padding-top: 0.1em"></span>';
        str += '<div class="input-group" style=" width: 200px"><input type="text" class="form-control" style="background-color: #fff; border: none; padding-left: 1.375rem; color: #212529;" value="' + data.id + '" disabled><div class="input-group-append"> <button class="btn btn-sm btn-light call-btn" data-id="' + data.index + '" style="border-radius: 10px" data-loading-text="<span class=\'spinner-grow spinner-grow-sm\'></span>"><i class="fas fa-phone-alt"></i></button> </div> </div>'
        str += '</div>';
        str += '<div style="margin-top: -20px;">';
        str += '<small class="text-muted _state" style="margin-top: 10px;">' + gen_state_row(data) + '</small><br />';
        str += '<small class="text-muted _time" style="margin-top: 10px;">' + moment(data.startTime).format('YYYY-MM-DD HH:mm:ss') + '</small>';
        str += '</div></div></div></div>';

        return str;
    }, _player_watchdog = function () {
        const target = $('#device_modal').attr('data-target'), uid = $('#device_modal').attr('data-id');
        let data = null;

        try {
            data = liveList[target][uid];
        } catch (e) {
            data = null;
        }

        if (object.player) {
            object.player.heartbeat += 1;

            if (object.player.heartbeat >= 5) {
                if (data) {

                    object.player.close();
                    object.player = null;

                    object.player = new mse(document.getElementById('plyr'), data.mseUrl, autoResize);
                    object.player.startup();
                }
                object.player.heartbeat = 0;
            }
        }
        setTimeout(_player_watchdog, 1000);
    };

    _player_watchdog();

    ajax('PUT', '/agent/api', data_format('/api/task/list', 0, 'GET', {}, null), function (task) {
        if (!task.error) for (var i in task) object.tree.push({
            'text': task[i].description,
            'icon': icons.share,
            'state': {'selected': false},
            'more': task[i],
            'children': [],
            'id': 'sharing_' + task[i].id
        });
        ajax('PUT', '/agent/api', data_format('/api/group/tree', 0, 'GET', {}, null), function (a) {
            if (a.error) $.growl.error({message: a.error}); else {

                object.tree.push(recursive(a));

                $('#user_tree').jstree({
                    "plugins": ["wholerow", "changed", "search", "grid", 'ui', 'checkbox'],
                    "search": {"show_only_matches": false, "show_only_matches_children": false},
                    'core': {
                        'data': object.tree,
                        'themes': {
                            'name': 'proton',
                            'responsive': true,
                            'variant': 'large'
                        }, "dnd": {
                            'copy_modifier': false,
                            'check_while_dragging': true
                        }, 'check_callback': true
                    },
                    "grid": {
                        columns: [
                            {'header': '&nbsp;', 'value': 'id', 'width': '50%'},
                            {'header': langDict.name, 'value': 'name', 'width': '30%'},
                            {'header': langDict.title, 'value': 'title', 'width': '30%'}
                        ],
                        resizable: true,
                        width: '100%',
                    }
                }).bind("loaded.jstree", function (event, data) {
                    _polling();
                    loading(false);

                    try {
                        $(this).jstree('open_node', 'group_' + $('[name="_group"]').attr('content').split('_')[1]);
                    } catch (e) {
                    }
                });
            }
        });
    });
    $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        var target = $(e.target).attr("href");
        if (target == "#map_tab") {
            object.maps.device || (object.maps.device = map_initial('map2'));
        }
    });
    $(document).on('click', '.card .image-container, .card-body > .cell-input-title', function (e) {
        var card = $(this).closest('.form-group'), target = card.attr('data-target'), id = card.attr('data-id');
        try {
            $('#device_modal').attr({'data-id': id, 'data-target': target});
            var live = liveList[target][id];

            target == 'sharing' && $('#device_modal').attr('data-task', live.taskId);

            var type = live.device.info.type.length ? '[' + live.device.info.type + '] ' : '';
            $('#device_modal').find('.modal-title').html(live.videoTitle);
            $('#video_content').html(type + live.id + ', ' + live.name + ', ' + moment(live.startTime).format('YYYY-MM-DD HH:mm:ss'));

            $('#device_modal').modal({
                backdrop: 'static',
                keyboard: true,
                show: true
            });

        } catch (e) {

        }
    });

    var locked = false;  // avoid player not ready issue
    $('#device_modal').on('shown.bs.modal hide.bs.modal', function (e) {
        switch (e.type) {
            case 'shown':
                plyr_ = document.getElementById('plyr');
                $('#Pause').css('display', 'inline-block');
                $('#Play').css('display', 'none');
                $('#Mute').html('<i class="fas fa-volume-up"></i>');
                $('#volume').val(100);
                var width = $('.player-container').width(), height = parseInt((width * 9) / 16),
                    live = liveList[$(this).attr('data-target')][$(this).attr('data-id')];

                object.player = new mse(document.getElementById('plyr'), live.mseUrl, autoResize);
                object.player.startup();

                if (!object.maps.player) {
                    object.maps.player = new L.Map('map1');
                    L.control.scale({metric: true, imperial: false}).addTo(object.maps.player);
                    var osmUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
                        osmAttrib = '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors',
                        osm = new L.tileLayer(osmUrl, {
                            'attribution': osmAttrib,
                            minZoom: 3,
                            maxZoom: 19
                        }).addTo(object.maps.player);
                    object.maps.player.setView(new L.LatLng(24.807969, 121.033765), 15);
                    object.maps.player.addLayer(osm);
                }

                if (live.gps) {
                    //live.gps.old && $.growl.warning({message: live.id + ' GPS has not been updated for a long time.'});
                    live.gps.lock && (live.gps.timestamp = moment().format('YYYY-MM-DD HH:mm:ss'));

                    handlerMarker(object.maps.player, {
                        'id': live.id,
                        'gps': live.gps
                    }, true, true);
                }
                break;

            case 'hide':
                $(this).attr({'data-id': '', 'data-task': '', 'data-target': ''}); // reset
                $('#digitalZoom').val(1);

                if (locked) {
                    $.growl.warning({message: langDict.busyPtz});
                    return false;
                } else {
                    if (object.player) {
                        object.player.close();
                        object.player = null;
                        $('.player-container').html('<video preload="none" id="plyr" autoplay controls crossorigin style="border-radius: 4px; width: 100% !important; height: auto !important;"></video>');
                    }
                    return true;
                }
                break;
        }
    });
    $('button[id=selection]').on('click', function (e) {
        $('#user_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });
    $('[id$=_search_btn]').on('click', function (e) {
        var btn = $(this), tree = $('#user_tree'), val = btn.closest('.input-group').find('input').val();
        val && (btn.button('loading'), setTimeout(function () {
            try {
                tree.jstree(true).search(val);
                tree.find('.jstree-search:eq(0)')[0].scrollIntoView();
            } catch (e) {
                $.growl.warning({message: langDict.notFound});
            }
            btn.button('reset');
        }, 300));
    });
    var view_target_with_modal = null;
    $(document).on('click', '.search-group', function (e) {
        var target = $(this).attr('data-id');
        $('#user_tree').jstree('_open_to', target);
        view_target_with_modal = target;
        $('#user_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
        return false;
    });
    $('#user_modal').on('shown.bs.modal', function (e) {
        view_target_with_modal && $('#user_tree').find(jq(view_target_with_modal))[0].scrollIntoView();
        view_target_with_modal = null;
    });
    $(window).resize(function (e) {
        isFullScreen || autoResize();
    });
    $('#digitalZoom').on('change', function () {
        $('#zoom').html($(this).val());
        $('#plyr').css('transform', 'scale('+ $(this).val() +')');
        $('#plyr').css('position', 'absolute');
    });
    $('#resetZoom').on('click', function () {
        $('#digitalZoom').val(1);
        $('#zoom').html(1);
        $('#plyr').css('transform', 'scale(1)');
        $('#plyr').css('left', '10px');
        $('#plyr').css('top', 0);
    });
    $('#position').on('click', function () {
        $('.position').each(function () {
            $(this).toggle("slide", {direction: $(this).data('direction')});
        });
    });
    $('.position').on('click', function () {
        var plyr_direction = $(this).data('direction'),
            left = parseInt($('#plyr').css('left')),
            top = parseInt($('#plyr').css('top')),
            step = 5 * $('#digitalZoom').val();

        switch (plyr_direction) {
            case 'left':
                $('#plyr').css('left', (left - step)+'px' );
                break;
            case 'right':
                $('#plyr').css('left', (left + step)+'px' );
                break;
            case 'down':
                $('#plyr').css('top', (top + step)+'px' );
                break;
            case 'up':
                $('#plyr').css('top', (top - step)+'px' );
                break;
        }
    });
    $('#Pause').on('click', function () {
        plyr_.pause();
        $('#Play').css('display', 'inline-block');
        $(this).css('display', 'none');
    });
    $('#Play').on('click', function () {
        plyr_.play();
        $('#Pause').css('display', 'inline-block');
        $(this).css('display', 'none');
    });
    $('#Mute').on('click', function () {
        if(plyr_.volume != 0){
            volume = plyr_.volume;
            plyr_.volume = 0;
            $('#volume').val(0);
            $(this).html('<i class="fas fa-volume-mute"></i>');
        }else{
            plyr_.volume = volume;
            $('#volume').val(volume);
            $(this).html('<i class="fas fa-volume-up"></i>');
        }
    });
    $('#volume').on('change', function () {
        plyr_.volume = $(this).val();
    });
    $('#Fullscreen').on('click', function () {
        plyr_.webkitRequestFullScreen().catch((error) => {
            console.log(error);
        });
    });
    $('#PIP').on('click', function () {
        plyr_.requestPictureInPicture().catch((error) => {
            console.log(error);
        });
    });
});