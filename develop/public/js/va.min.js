"use strict";

function SVGCreate(targetDivID, videoSrc, videoWidth, videoHeight, drawtype, callback) {

    this.divTarget = document.getElementById(targetDivID);

    this.divLiveStreaming;
    this.playerId = 'vxg';

    this.divSvgPanel;
    this.svgPanel;
    this.focusCircle;
    this.areaObjectList = [];
    this.circleList = [];

    this.videoRatio = 1;
    this.svgRatio = 1;
    this.width = videoWidth;
    this.height = videoHeight;
    this.url = videoSrc;
    this.drawType = drawtype;

    this.vxg = null;

    var _this = this;

    var setAttribute = function (elm, obj) {
        for (var i in obj) elm.setAttribute(i, obj[i]);
    };

    this.svgControlPanel = {
        isCreating: false,
        isModify: false,
        createRegion: function createRegion(custom) {
            if (custom == undefined) {
                if (_this.drawType == "poly") _this.svgControlPanel.createPolyRegion(); else if (_this.drawType == "rect") _this.svgControlPanel.createRectRegion();
            } else {
                if (_this.drawType == "poly") _this.svgControlPanel.createPolyRegionByCustom(custom); else if (_this.drawType == "rect") _this.svgControlPanel.createRectRegionByCustom(custom);
            }
            return custom;
        },
        changeRegionType: function changeRegionType(RegionType) {
            if (RegionType == "poly" || RegionType == "rect") {
                _this.drawType = RegionType;
                _this.svgControlPanel.removePoly();
                return RegionType;
            } else console.warn("Error Type");

        },
        createRectRegion: function createRectRegion() {
            if (this.isCreating) {
                console.warn("The creating progress is still process...");
                return;
            }
            if (this.isModify) {
                console.warn("The modify progress is still process...");
                return;
            }
            if (_this.areaObjectList.length > 0) {
                console.warn("The area has been created.");
                return;
            }
            this.isCreating = true;

            var poly = _this.svgPanel.rect().fill("#ffff99").opacity(0.5).draw({snapToGrid: 10});
            poly.on("drawstop", function () {
                _this.isModify = false;
                //_this.enabledAllButton();
                //_this.disabledSpecificButton("btn-new");
                _this.areaObjectList.push(poly);

                //console.log(poly);
                //console.log(_this.svgControlPanel.getPolyPoint());

                _this.svgControlPanel.isCreating = false;
                //$('#draw').length && drawBtn(1);
            });
        },
        createPolyRegion: function createPolyRegion() {
            if (this.isCreating) {
                console.warn("The creating progress is still process...");
                return;
            }
            if (this.isModify) {
                console.warn("The modify progress is still process...");
                return;
            }
            if (_this.areaObjectList.length > 0) {
                console.warn("The area has been created.");
                return;
            }
            this.isCreating = true;

            var poly = _this.svgPanel.polygon().fill("#ffff99").opacity(0.5).draw({snapToGrid: 10});
            var numClick = 0;

            var event_DrawPanelDoubleClick = function event_DrawPanelDoubleClick() {
                numClick++;
                setTimeout(function (d) {
                    numClick = 0;
                }, 250);

                if (numClick == 2) {
                    //End of drwaing.
                    poly.draw('done');
                    poly.off('drawstart');

                    //Remove mouse event
                    this.removeEventListener('click', event_DrawPanelDoubleClick);

                    //Remove the duplicated point.
                    var arrPolyPoint = poly.array().value;
                    if (arrPolyPoint[arrPolyPoint.length - 1].toString() == arrPolyPoint[arrPolyPoint.length - 2].toString()) {
                        arrPolyPoint.pop();
                        poly.plot(arrPolyPoint);
                    }

                    //Record the point
                    _this.areaObjectList.push(poly);
                    _this.isModify = false;
                    //_this.enabledAllButton();
                    //_this.disabledSpecificButton("btn-new");

                    _this.svgControlPanel.isCreating = false;
                    //$('#draw').length && drawBtn(1);
                }
            };

            //When double click the panel, finish creating the poly.
            poly.on('drawstart', function (e) {
                document.getElementById('svg-panel').addEventListener('click', event_DrawPanelDoubleClick);
            });
        },

        createRectRegionByCustom: function createRectRegionByCustom(custom) {
            this.removePoly();

            var parse = custom.map(function (d) {
                return [d.x * _this.width, d.y * _this.height];
            });
            //console.warn(parse);
            var x = parse[0][0],
                y = parse[0][1],
                width = Math.abs(parse[0][0] - parse[1][0]),
                height = Math.abs(parse[0][1] - parse[2][1]);
            var tmp = _this.svgPanel.rect(width, height).fill('#ffff99').move(x, y).opacity(0.5);
            //tmp.fill("#ffff99");

            _this.areaObjectList.push(tmp);
        },

        createPolyRegionByCustom: function createPolyRegionByCustom(custom) {
            this.removePoly();
            var parse = custom.map(function (d) {
                return [d.x * _this.width, d.y * _this.height];
            });
            var tmp = _this.svgPanel.polygon(parse);
            tmp.fill("#ffff99").opacity(0.5);

            _this.areaObjectList.push(tmp);
        },

        modifyRegion: function modifyRegion() {
            if (_this.drawType == "poly") _this.svgControlPanel.modifyPolyRegion(); else if (_this.drawType == "rect") _this.svgControlPanel.modifyRectRegion();
        },
        modifyRectRegion: function modifyRectRegion() {
            //Append top-left circle
            var circleTopLeft = _this.svgPanel.circle(20).stroke({width: 1}).fill('#ccc').center(_this.areaObjectList[0].x(), _this.areaObjectList[0].y());

            //Append bottom-right circle
            var circleBottomRight = _this.svgPanel.circle(20).stroke({width: 1}).fill('#ccc').center(_this.areaObjectList[0].x() + _this.areaObjectList[0].width(), _this.areaObjectList[0].y() + _this.areaObjectList[0].height());

            //Add the mouse event in created circle
            circleTopLeft.node.addEventListener("mousedown", function () {
                _this.focusCircle = {index: 0, TopLeft: circleTopLeft, BottomRight: circleBottomRight};
                document.getElementById('svg-panel').addEventListener("mousemove", _this.svgControlPanel.changeRectLocation);
            });

            circleBottomRight.node.addEventListener("mousedown", function () {
                _this.focusCircle = {index: 1, TopLeft: circleTopLeft, BottomRight: circleBottomRight};
                document.getElementById('svg-panel').addEventListener("mousemove", _this.svgControlPanel.changeRectLocation);
            });
        },

        changeRectLocation: function changeRectLocation(e) {
            if (_this.focusCircle.index == 0) {
                //Top-Left
                _this.focusCircle.TopLeft.center(e.offsetX * _this.svgRatio, e.offsetY * _this.svgRatio);
            } else if (_this.focusCircle.index == 1) {
                //Bottom-Right
                _this.focusCircle.BottomRight.center(e.offsetX * _this.svgRatio, e.offsetY * _this.svgRatio);
            }

            //Get the Position
            var x = 0,
                y = 0,
                width = 0,
                height = 0;
            x = Math.min(_this.focusCircle.TopLeft.cx(), _this.focusCircle.BottomRight.cx());
            y = Math.min(_this.focusCircle.TopLeft.cy(), _this.focusCircle.BottomRight.cy());
            width = Math.abs(_this.focusCircle.TopLeft.cx() - _this.focusCircle.BottomRight.cx());
            height = Math.abs(_this.focusCircle.TopLeft.cy() - _this.focusCircle.BottomRight.cy());
            _this.areaObjectList[0].x(x);
            _this.areaObjectList[0].y(y);
            _this.areaObjectList[0].width(width);
            _this.areaObjectList[0].height(height);
        },
        modifyPolyRegion: function modifyPolyRegion() {
            if (_this.areaObjectList.length == 0) {
                console.warn("There are no area to modify.");
                return;
            }
            if (this.isCreating) {
                console.warn("The area creating is processing...");
                return;
            }
            console.log("Start to modify the region.");

            //Clear the circle.
            _this.svgControlPanel.clearCircle();

            //Draw the circle.
            _this.areaObjectList[0].array().value.forEach(function (element, index) {
                var createdCircle = _this.svgPanel.circle(20).stroke({width: 1}).fill('#ccc').center(element[0], element[1]);
                _this.circleList.push(createdCircle);

                //Add the mouse event in created circle
                createdCircle.node.addEventListener("mousedown", function () {
                    //index = number of circle index in array.
                    //createdCircle is the svg.js object
                    _this.focusCircle = {index: index, SVGObject: createdCircle};
                    document.getElementById('svg-panel').addEventListener("mousemove", _this.svgControlPanel.changePolyLocation);
                });
            });
        },

        clearCircle: function clearCircle() {
            for (var i = 0; i < _this.circleList.length; i++) {
                _this.circleList[i].remove();
            }
            _this.circleList.length = 0;

            if (_this.focusCircle) {
                if (_this.focusCircle.TopLeft) _this.focusCircle.TopLeft.remove();
                if (_this.focusCircle.BottomRight) _this.focusCircle.BottomRight.remove();
            }
        },

        removePoly: function removePoly() {
            //Remove the circle
            _this.svgControlPanel.clearCircle();

            //Remove the poly
            for (var i = 0; i < _this.areaObjectList.length; i++) {
                _this.areaObjectList[i].remove();
            }

            //Clear the array
            _this.areaObjectList = [];
        },

        changePolyLocation: function changePolyLocation(e) {
            _this.focusCircle.SVGObject.center(e.offsetX * _this.svgRatio, e.offsetY * _this.svgRatio);
            var focusAreaObjectList = _this.areaObjectList[0].array().value;
            focusAreaObjectList[_this.focusCircle.index] = [e.offsetX * _this.svgRatio, e.offsetY * _this.svgRatio];
            _this.areaObjectList[0].plot(focusAreaObjectList);
        },

        getPolyPoint: function getPolyPoint() {
            //Return points
            if (_this.areaObjectList[0] != undefined) {
                if (_this.drawType == "poly") {
                    var areaPoints = _this.areaObjectList[0].array().value.map(function (d) {
                        return {"x": d[0] / _this.width, "y": d[1] / _this.height};
                    });
                    return areaPoints;
                } else if (_this.drawType == "rect") {
                    var x = 0,
                        y = 0,
                        width = 0,
                        height = 0;
                    x = _this.areaObjectList[0].x();
                    y = _this.areaObjectList[0].y();
                    width = _this.areaObjectList[0].width();
                    height = _this.areaObjectList[0].height();
                    return [{
                        "x": x / _this.width,
                        "y": y / _this.height
                    }, {
                        "x": (x + width) / _this.width,
                        "y": y / _this.height
                    }, {
                        "x": (x + width) / _this.width,
                        "y": (y + height) / _this.height
                    }, {"x": x / _this.width, "y": (y + height) / _this.height}];
                }
            } else {
                console.warn("Cant not get the poly object.");
            }
        }
    };

    this.initialPlayer = function (cb) {
        this.divLiveStreaming = document.createElement("div");

        this.divTarget.setAttribute("width", _this.width);
        this.divTarget.classList.add("targetDiv");

        //Create live streaming panel

        setAttribute(this.divLiveStreaming, {'style': 'width: ' + this.width + 'px; height: ' + this.height + 'px; position:relative;'});
        var image = document.createElement("img");
        setAttribute(image, {
            'id': this.playerId,
            'src': this.url,
            'onerror': 'this.src="/img/default.jpg"',
            'width': '100%',
            'height': '100%',
            'style': 'border-radius: 4px;'
        });
        this.divLiveStreaming.appendChild(image);

        this.divTarget.appendChild(this.divLiveStreaming);

        this.divSvgPanel = document.createElement("div");
        setAttribute(this.divSvgPanel, {'id': 'svg-panel', 'class': 'svg-panel'});
        this.divLiveStreaming.appendChild(this.divSvgPanel);
        this.svgPanel = new SVG('svg-panel').size('100%', '100%').viewbox(0, 0, this.width, this.height);
        document.getElementById('svg-panel').addEventListener("mouseup", function (e) {
            document.getElementById('svg-panel').removeEventListener('mousemove', _this.svgControlPanel.changePolyLocation);
            document.getElementById('svg-panel').removeEventListener('mousemove', _this.svgControlPanel.changeRectLocation);
        });
        cb();
    };

    this.src = function () {
        if (arguments.length && arguments[0] !== undefined) {
            this.url = arguments[0].snapshotUrl;
            document.getElementById(this.playerId).src = this.url;
        } else
            return this.url;
    };

    this.resize = function (width, height) {

        this.divLiveStreaming.setAttribute("style", "width:" + width + "px;height:" + height + "px;position:relative;");
        this.svgPanel.size(width, height);
        this.divSvgPanel.setAttribute("style", "width:" + width + "px;height:" + height + "px;position:absolute;");
    };

    this.initialPlayer(function () {
        callback(_this);
    });
}

function drawBack(metadataSrc, plyr, size) {

    this.divTarget = document.getElementById('player');
    this.video = plyr;

    this.videoSize = size;

    this.currentVideoTime = 0;

    this.drawPanel;
    this.drawPanelSVG;
    this.drawBondbox;

    this.metadata;
    this.metadataRegion;
    var _this = this;

    this.initial = function () {
        axios.get(metadataSrc)
            .then(function (response) {
                _this.metadata = response.data;
                _this.metadataRegion = _this.metadata.intrusion_detection.custom.roi;
            })
            .then(function () {
                _this.setDrawPanel();
                _this.drawPanelSVG.viewbox(0, 0, _this.videoSize[0], _this.videoSize[1]);
                _this.setVideoEventListeners();
            })
            .catch(function (error) {
                console.log(error)
            })
    }

    this.setVideoEventListeners = function () {
        this.video.on('timeupdate', function (currentTime) {
            _this.currentVideoTime = _this.video.currentTime;
            _this.videoTimeChanged();
        });
    }

    this.setDrawPanel = function () {
        this.drawPanel = document.createElement("div");
        this.drawPanel.setAttribute("class", "svg-panel");
        this.drawPanel.setAttribute("id", "drawback-panel");

        this.divTarget.appendChild(this.drawPanel);

        this.drawPanelSVG = new SVG('drawback-panel').size('100%', '100%').viewbox(0, 0, 0, 0);

        this.drawBondbox = this.drawPanelSVG
            .polyline(this.metadataRegion)
            .attr({
                'fill': '#8bc34a',
                'fill-opacity': .4,
                'stroke': '#8bc34a',
                'stroke-width': 1
            })
    }

    this.videoTimeChanged = function () {
        var currentFrame = Math.ceil(this.metadata.fps * this.currentVideoTime);
        if (this.metadata.intrusion_detection.frames[currentFrame] != undefined) {
            if (this.metadata.intrusion_detection.frames[currentFrame].mode == 0) {
                this.drawBondbox.attr({
                    'fill': '#8bc34a',
                    'stroke': '#8bc34a',
                    'fill-opacity': .4
                })
            } else {
                this.drawBondbox.attr({
                    'fill': '#ff5722',
                    'stroke': '#ff5722',
                    'stroke-width': 1
                })
            }
        }
    }

    if (this.divTarget != null)
        this.initial();
    else
        console.warn("[Warn] Can't find the div.");
}

$(document).ready(function () {

    $('#task_tree').parent().height($(window).height() * 0.7);
    $('#taskSetting').height($(window).height() * 0.65);

    var isFullScreen = false;
    var object = {
        'liveList': {},
        'taskList': {},
        'userList': {},
        'selected': null,
        'svg': null,
        'eventList': [],
        'eventConditon': data_format('/api/va/je/event/search', 0, 'POST', {'config': ['0']}, 30),
        'gps': {},
        'foucs': {},
        'map1': null
    };
    date_range_init(moment().subtract(1, 'days'), moment());

    var conditions = {}, table_btn = function (action) {
        $('#searchBtn').button(action);
        $('.dt-buttons').find('button').each(function () {
            $(this).button(action);
        });
    }, table = $('#videos').DataTable({
        "processing": true,
        "serverSide": true,
        "deferLoading": 0,
        "dom": 'lBprtip',
        "lengthMenu": [10, 25, 50, 100],
        "iDisplayLength": 25,
        "columnDefs": [{"targets": [0], "visible": true, "searchable": false}],
        "language": {"url": 'files/' + lang + '.json'},
        "autoWidth": false,
        "buttons": [{
            "text": langDict['selectAll'],
            'className': 'btn btn-success',
            "action": function () {
                table.rows().eq(0).each(function (index) {
                    var row = table.row(index), id = row.data().DT_RowId;
                    $('.selection[data-id=' + id + ']').prop('disabled') || $('.selection[data-id=' + id + ']').prop('checked', 1);
                });
            }
        }, {
            "text": langDict['diselectAll'],
            'className': 'btn btn-warning',
            "action": function () {
                table.rows().eq(0).each(function (index) {
                    var row = table.row(index), id = row.data().DT_RowId;
                    $('.selection[data-id=' + id + ']').prop('checked', 0);
                });
            }
        }, {
            "text": langDict['delete'],
            'className': 'btn btn-danger',
            "action": function () {

                var videos = [];

                table.rows().eq(0).each(function (index) {
                    var row = table.row(index), id = row.data().DT_RowId;
                    $('.selection[data-id=' + id + ']').prop('checked') && videos.push(id);
                });
                if (videos.length) {
                    bootbox.confirm({
                        'title': langDict['aruYouSure'],
                        'message': langDict['doYouWantDelete'] + ' ?',
                        'buttons': {
                            'cancel': {'label': '<i class="fa fa-times"></i> ' + langDict['cancel']},
                            'confirm': {'label': '<i class="fa fa-check"></i> ' + langDict['apply']}
                        },
                        'callback': function (confirm) {
                            if (confirm) {
                                table_btn('loading');
                                var data = data_format("/api/va/je/event/delete", 0, "POST", {"id": videos}, null);

                                ajax('PUT', '/agent/api', data, function (a) {
                                    if (a.error) {
                                        $.growl.error({message: a.error});
                                    } else {
                                        $.growl.notice({message: langDict.wasDeleted});
                                        for (var i in videos) {
                                            $('tr[id=' + videos[i] + ']').remove();
                                            //table.row(videos[i]).remove().draw();
                                            table.row(videos[i]).remove();
                                        }
                                    }
                                    table_btn('reset');
                                });
                            }
                        }
                    });
                } else
                    $.growl.warning({message: langDict.noneSelectedText});
            }
        }, {
            "text": langDict['batchDownload'],
            'className': 'btn btn-primary',
            "action": function () {
                var videos = [];

                table.rows().eq(0).each(function (index) {
                    var row = table.row(index), id = row.data().DT_RowId;
                    $('.selection[data-id=' + id + ']').prop('disabled') || ($('.selection[data-id=' + id + ']').prop('checked') && videos.push(id));
                });

                if (videos.length) {
                    for (var id in videos) for (var i in playbackList) if (playbackList[i].id == videos[id]) {
                        if (!es5_includes(downloaded, videos[id])) { // avoid re-deownload
                            downloaded.push(videos[id]);
                            $.fileDownload(playbackList[i].downloadUrl).done(function () {
                            }).fail(function () {
                            });
                        }
                        break;
                    }
                } else
                    $.growl.warning({message: langDict.noneSelectedText});
            }
        }],
        "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
            $('img', nRow).lazyLoadXT();
        }, 'fnInitComplete': function (oSettings, json) {
            $('.dt-buttons').find('button').each(function () {
                $(this).removeClass('btn-secondary').attr('data-loading-text', '<span class=\'spinner-grow spinner-grow-sm\'></span>');
            });
        },
        'initComplete': function () {
            $('.dt-buttons').find('.btn-secondary').removeClass('btn-secondary');
        },
        "ajax": $.fn.dataTable.pipeline(object.eventConditon, function (a) {
        }), "drawCallback": function (settings) {
            utc_converter();
        }, "drawCallback": function (settings) {
            utc_converter();
        }
    });

    var autoResize = function () {
        if ($('#task_edit_player').is(':visible')) {
            var width = $('#task_edit_player').width(), height = (width * 9 / 16);
            //todo svg resize

            if (object.svg) object.svg.resize(width, height);

            // $('.fr-draw-face').each(function () {
            //     $(this).css({
            //         width: Math.round($(this).attr('w') * width),
            //         height: Math.round($(this).attr('h') * height),
            //         left: Math.round($(this).attr('x') * width),
            //         top: Math.round($(this).attr('y') * height)
            //     });
            // });
        }
    }, utc_converter = function () {
        $('.utc-time').each(function () {
            $(this).html(moment($(this).html()).format('YYYY-MM-DD HH:mm:ss')).removeClass('utc-time');
        });
    }, gen_input = function (id, target, value, icon, disabled) {
        var placeholder = '';

        if (target == 'title') placeholder = langDict.title;
        else if (target == 'source') placeholder = langDict.source;
        else if (target == 'trigger') {
            placeholder = langDict.trigger;
            var _value = '';
            for (var i in value) try {
                _value += langDict[value[i]] + ', ';
            } catch (e) {
                _value += value[i] + ', ';
            }
            value = _value.length > 2 ? _value.slice(0, -2) : _value;
        } else if (target == 'line') placeholder = langDict.bulletin;
        else if (target == 'name') placeholder = langDict.name;

        return '<div class="input-group"><input type="text" placeholder="' + placeholder + '" class="form-control form-control-sm cell-input-' + target + '" data-id="' + id + '" value="' + value + '" ' + (disabled ? 'disabled' : '') + '><div class="input-group-append"> <button type="button" class="btn ' + (icon ? 'btn-outline-secondary' : 'btn-primary') + ' btn-sm cell-input-btn" data-loading-text="<span class=\'spinner-grow spinner-grow-sm\'></span>"><i class="' + (icon ? icon : 'fas fa-check') + '"></i></button></div></div>';
    }, recursive = function (origin, onlyGroup, prefix) {
        var real_gid = prefix + '_group_' + origin.group.id, md5_gid = md5(real_gid);

        var group_node_id = md5(prefix + '_group_' + origin.group.id), data = {
            'text': origin.group.name,
            'icon': icons.users,
            'state': {'selected': false},
            'more': origin.group,
            'children': [],
            'id': md5_gid,
            'a_attr': {'class': 'text-primary'}
        };
        var users = [];
        if (!onlyGroup) {
            users = origin.userList;
            data.data = {
                'id': origin.group.name,
                'name': '',
                'title': '',
                'score': '',
                'bulletin': '',
                'functional': '',
            };
        }
        if (users.length) {
            /*-------- user sorting --------*/
            users = users.sort(function (a, b) {
                return (a.id > b.id) ? 1 : ((b.id > a.id) ? -1 : 0);
            });
            /*-------- end sort --------*/
            for (var i in users) {
                var user = users[i], icon = icons.camera, _class = 'text-secondary',
                    real_uid = prefix + '_user_' + user.id, md5_uid = md5(real_uid);

                user.name = user.info.name;
                user.gid = origin.group.id;
                user.group = origin.group.name;
                user.layer = origin.group.layer;

                try {
                    user.video.title
                } catch (e) {
                    //todo: old api does not provide
                    user.video = {'title': 'API not provider'}
                }

                object.userList[user.id] = user;

                var obj = {
                    'text': user.id,
                    'icon': icon,
                    'state': {'selected': false},
                    'more': user,
                    'id': md5_uid,
                    'a_attr': {'class': _class},
                    'data': {
                        'id': user.id,
                        'name': '<input type="text" class="form-control form-control-sm" value="' + user.name + '" readonly>',
                        'title': '<input type="text" class="form-control form-control-sm" value="' + user.video.title + '" readonly>',
                        'score': '',
                        'bulletin': '',
                        'functional': '',
                    }
                };
                data.children.push(obj);
            }
        }
        /*-------- group sorting --------*/
        var chld = origin['children'];
        chld && (chld = chld.sort(function (a, b) {
            return (a.group.name > b.group.name) ? 1 : ((b.group.name > a.group.name) ? -1 : 0);
        }));
        /*-------- end sort --------*/
        for (var i in chld) data['children'].push(recursive(chld[i], onlyGroup, prefix));
        return data;
    }, get_live_list = function () {
        ajax('PUT', '/agent/api', data_format('/api/live/list', 0, 'GET'), function (a) {
            var _liveList = {};
            if (a.error)
                console.warn(a.error);
            else for (var i in a.liveList) {
                _liveList[a.liveList[i].id] = a.liveList[i];
                $('.cell-input-source[value="' + a.liveList[i].id + '"]').parent('.input-group').find('i').attr('class', icons.online);
            }
            for (var i in object.liveList) if (!(i in _liveList)) {
                $('.cell-input-source[value="' + object.liveList[i].id + '"]').parent('.input-group').find('i').attr('class', icons.offline);
            }
            object.liveList = _liveList;
            setTimeout(get_live_list, 5000);
        });
    }, parse_config_tree_to_list = function () {
        var _rec = function (item) {
            for (var i in item.configList) {
                //todo: API need add this field
                item.configList[i].enabled = (item.configList[i].enableTime ? 1 : 0);
                object.taskList[item.configList[i].id] = item.configList[i];
            }
            for (var i in item.children) _rec(item.children[i]);
        };

        ajax('PUT', '/agent/api', data_format('/api/va/je/tree', 0, 'GET'), function (a) {
            if (a.error)
                $.growl.error({message: a.error});
            else {
                _rec(a);

                for (var i in object.taskList) {
                    var task = object.taskList[i], nid = md5('task_task_' + task.id);

                    $('#task_tree').jstree().create_node(md5('task_group_' + task.groupId), {
                        "text": task.description,
                        'id': nid,
                        "icon": task.enabled ? 'fas task-enabled' : icons.task,
                        "state": {"selected": false},
                        "more": task,
                        'data': {
                            'id': '',
                            'source': gen_input(task.id, 'source', task.targetId, icons.camera, true),
                            'title': gen_input(task.id, 'title', object.userList[task.targetId].video.title, false, false),
                            'trigger': gen_input(task.id, 'trigger', task.pipelines[0].params.triggers, 'fas fa-list', true),
                            'bulletin': gen_input(task.id, 'line', task.email, false, false),
                            'functional': '<div class="input-group"><button class="btn btn-sm btn-warning cell-input-task" data-id="' + task.id + '"><i class="fas fa-cog"></i></button></div>',
                        }
                    }, "first", function () {
                        $('#task_tree').jstree('_open_to', nid);
                        $('#task_tree').jstree('open_node', nid);
                    });
                }

                get_live_list();
                //console.log(object.taskList);
            }
        });
    }, task_edit_form = function (data) {

        if (data) {
            var gid = data.groupId, group = $('#task_tree').jstree('get_node', md5('task_group_' + gid));
            group || console.warn('group data not in tree');

            $('#task_edit_parent').parent('.input-group').find('button').prop('disabled', 1);
            $('#user_apply').hide();

            $('#task_modal').attr('data-id', data.id);
            $('#task_edit_enabled').prop('checked', data.enableTime || data.enabled);
            $('#task_edit_notice').prop('checked', data.notify);

            for (var i in data.pipelines[0].params.triggers)
                $('#task_edit_' + data.pipelines[0].params.triggers[i]).prop('checked', 1);

            try {
                if (data.pipelines[0].params.roi.length == 4 &&
                    data.pipelines[0].params.roi[0]['x'] == data.pipelines[0].params.roi[3]['x'] &&
                    data.pipelines[0].params.roi[0]['y'] == data.pipelines[0].params.roi[1]['y'] &&
                    data.pipelines[0].params.roi[1]['x'] == data.pipelines[0].params.roi[2]['x'] &&
                    data.pipelines[0].params.roi[2]['y'] == data.pipelines[0].params.roi[3]['y']) {
                    $('input[name="draw_type"]:checked').val() || $('input[name="draw_type"][value="rect"]').prop('checked', 1);
                } else
                    $('input[name="draw_type"]:checked').val() || $('input[name="draw_type"][value="poly"]').prop('checked', 1);

            } catch (e) {
                console.warn(e);
            }

            $('#task_edit_description').val(data.description);
            $('#task_edit_parent').attr('data-id', group.original.more.id).val(group.original.more.name);
            $('#task_edit_source').val(data.targetId);

            //console.log(data);
            //todo: tba

        } else {
            $('#task_edit_player').empty();

            $('input[name="draw_type"]').prop('checked', 0);
            $('#task_modal').attr('data-id', '');
            $('#task_edit_enabled').prop('checked', 0);
            $('#task_edit_notice').prop('checked', 0);
            $('input[name="task_edit_trigger[]"]').prop('checked', 0);

            $('#task_edit_description').val('');
            $('#task_edit_parent').attr('data-id', '').val('');
            $('#task_edit_source').val('');
            $('#task_edit_line').val('');
        }

        if (object.svg) {

            if (!object.svg.svgControlPanel.isCreating) {
                object.svg.svgControlPanel.removePoly();

                // const drawType = $('input[name="draw_type"]:checked').val();
                //
                // if (object.svg.drawType != drawType)
                //     object.svg.svgControlPanel.changeRegionType(drawType);

                try {
                    object.svg.svgControlPanel.createRegion(data.pipelines[0].params.roi);
                } catch (e) {

                }
            }
        }
    }, task_rest = function (obj, enabled, method, cb) {
        const button = function (do_something) {

            if ($('#task_edit_apply').is(':visible')) $('#task_edit_apply').button(do_something);
            if ($('#task_edit_revert').is(':visible')) $('#task_edit_revert').button(do_something);
            if ($('#task_edit_delete').is(':visible')) $('#task_edit_delete').button(do_something);

        }, refresh = function (data) {
            if (data.id in object.taskList) {
                // modify
                if ('enabled' in data) object.taskList[data.id]['enabled'] = data.enabled;
                if ('enableTime' in data) object.taskList[data.id]['enableTime'] = data.enableTime;
                if ('description' in data) object.taskList[data.id]['description'] = data.description;
                if ('targetId' in data) object.taskList[data.id]['targetId'] = data.targetId;
                if ('notify' in data) object.taskList[data.id]['notify'] = data.notify;
                if ('pipelines' in data) object.taskList[data.id]['pipelines'] = data.pipelines;

                var node = $('#task_tree').jstree('get_node', md5('task_task_' + data.id));
                if (node) {
                    if (object.taskList[data.id]['enabled']) {
                        node.icon = icons.enabled;
                        node.original.icon = icons.enabled;
                    } else {
                        node.icon = icons.task;
                        node.original.icon = icons.task;
                    }

                    node.text = object.taskList[data.id]['description'];
                    node.original.text = object.taskList[data.id]['description'];

                    node.data.source = gen_input(data.id, 'source', object.taskList[data.id]['targetId'], icons.camera, true);
                    node.data.trigger = gen_input(data.id, 'trigger', object.taskList[data.id]['pipelines'][0].params.triggers, 'fas fa-list', true);
                    //todo: add title and bot id when api return

                    node.original.more = object.taskList[data.id];
                }
                $('#task_tree').jstree('redraw_node', md5('task_task_' + data.id));

            } else {
                // new
                object.taskList[data.id] = data;

                var nid = md5('task_task_' + data.id);

                $('#task_tree').jstree().create_node(md5('task_group_' + data.groupId), {
                    "text": data.description,
                    'id': nid,
                    "icon": data.enabled ? 'fas task-enabled' : icons.task,
                    "state": {"selected": false},
                    "more": data,
                    'data': {
                        'id': '',
                        'source': gen_input(data.id, 'source', data.targetId, icons.camera, true),
                        'title': gen_input(data.id, 'title', '', false, false),
                        'trigger': gen_input(data.id, 'trigger', data.pipelines[0].params.triggers, 'fas fa-list', true),
                        'bulletin': gen_input(data.id, 'line', data.email, false, false),
                        'functional': '<div class="input-group"><button class="btn btn-sm btn-warning cell-input-task" data-id="' + data.id + '"><i class="fas fa-cog"></i></button></div>',
                    }
                }, "first", function () {
                    $('#task_tree').jstree('_open_to', nid);
                    $('#task_tree').jstree('open_node', nid);
                });
            }

            button('reset');
            cb();
        };

        button('loading');

        if (object.selected.enableTime && enabled) {
            // disable -> update -> enable
            ajax('PUT', '/agent/api', data_format('/api/va/je/disable', 0, 'POST', {'id': obj.id}), function (a) {
                if (a.error) {
                    $.growl.error({message: a.error});
                    button('reset');
                    cb();
                } else {
                    ajax('PUT', '/agent/api', data_format('/api/va/je', 0, 'PUT', obj), function (b) {
                        if (b.error) {
                            $.growl.error({message: b.error});
                            refresh({'id': obj.id, 'enabled': 0, 'enableTime': 0});
                            button('reset');
                        } else {
                            ajax('PUT', '/agent/api', data_format('/api/va/je/enable', 0, 'POST', {'id': obj.id}), function (c) {
                                if (c.error) {
                                    $.growl.error({message: 'task was updated, but enabling failed'});
                                    //manual, not from api
                                    obj.enableTime = 0;
                                    obj.enabled = 0;
                                } else {
                                    $.growl.notice({message: langDict.wasModified});
                                }
                                refresh(obj);
                            });
                        }
                    });
                }
            });
        } else if (object.selected.enableTime && !enabled) {
            // disable -> update
            ajax('PUT', '/agent/api', data_format('/api/va/je/disable', 0, 'POST', {'id': obj.id}), function (a) {
                if (a.error) {
                    $.growl.error({message: a.error});
                    button('reset');
                    cb();
                } else if (Object.keys(obj).length >= 2) {
                    ajax('PUT', '/agent/api', data_format('/api/va/je', 0, 'PUT', obj), function (b) {
                        if (b.error) {
                            $.growl.error({message: 'task was disabled, but updated failed'});
                            refresh({'id': obj.id, 'enabled': 0, 'enableTime': 0});
                        } else {
                            $.growl.notice({message: langDict.wasModified});
                            //manual, not from api
                            obj.enableTime = 0;
                            obj.enabled = 0;
                            refresh(obj);
                        }
                    });
                } else {
                    $.growl.notice({message: langDict.wasModified});
                    refresh({'id': obj.id, 'enabled': 0, 'enableTime': 0});
                }
            });
        } else if (!object.selected.enableTime && enabled) {
            // update -> start
            if (Object.keys(obj).length == 1) {
                ajax('PUT', '/agent/api', data_format('/api/va/je/enable', 0, 'POST', {'id': obj.id}), function (b) {
                    if (b.error) {
                        $.growl.error({message: b.error});
                        button('reset');
                        cb();
                    } else {
                        $.growl.notice({message: langDict.wasModified});
                        //manual, not from api
                        obj.enableTime = moment().format('YYYY-MM-DDTHH:mm:ssZ');
                        obj.enabled = 1;
                        refresh(obj);
                    }
                });
            } else {
                ajax('PUT', '/agent/api', data_format('/api/va/je', 0, method, obj), function (a) {
                    if (a.error) {
                        $.growl.error({message: a.error});
                        button('reset');
                        cb();
                    } else {
                        // response from api when creating new task
                        if (method == 'POST') obj = a;

                        ajax('PUT', '/agent/api', data_format('/api/va/je/enable', 0, 'POST', {'id': obj.id}), function (b) {
                            if (b.error) {
                                $.growl.error({message: 'task was updated, but enabling failed'});
                            } else {
                                method == 'POST' ? $.growl.notice({message: langDict.wasCreated}) : $.growl.notice({message: langDict.wasModified});
                                //manual, not from api
                                obj.enableTime = moment().format('YYYY-MM-DDTHH:mm:ssZ');
                                obj.enabled = 1;
                            }
                            refresh(obj);
                        });
                    }
                });
            }
        } else if (!object.selected.enableTime && !enabled) {
            // update
            ajax('PUT', '/agent/api', data_format('/api/va/je', 0, method, obj), function (a) {
                if (a.error) {
                    $.growl.error({message: a.error})
                    button('reset');
                    cb();
                } else {
                    // response from api when creating new task
                    if (method == 'POST') {
                        obj = a;
                        $.growl.notice({message: langDict.wasCreated});
                    } else {
                        $.growl.notice({message: langDict.wasModified});
                    }
                    //manual, not from api
                    obj.enabled = 0;
                    refresh(obj);
                }
            });
        }
    };

    $(document).on('fullscreenchange mozfullscreenchange webkitfullscreenchange msfullscreenchange', function () {
        (document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen || document.msFullscreenElement) ?
            isFullScreen = true : isFullScreen = false;
        //isFullScreen ? $('rect').hide() : $('rect').show();
    });

    $(window).resize(function (e) {
        isFullScreen || autoResize();
    });

    ajax('PUT', '/agent/api', data_format('/api/user/tree', 0, 'GET', {}, null), function (a) {
        if (a.error) $.growl.error({message: a.error}); else {
            var task = recursive(a, true, 'task'),
                group = recursive(a, true, 'group'),
                user = recursive(a, false, 'user');

            loading(0);

            $('#task_tree').jstree({
                "plugins": ["wholerow", "changed", "grid", 'ui', 'search'],
                'core': {
                    'data': task,
                    'themes': {'name': 'proton', 'responsive': true, 'variant': 'large'},
                    'check_callback': true
                },
                "grid": {
                    columns: [
                        {'header': '&nbsp;', 'value': 'id', 'width': '30%'},
                        {'header': langDict.source, 'value': 'source', 'width': '15%'},
                        {'header': langDict.title, 'value': 'title', 'width': '20%'},
                        {'header': langDict.trigger, 'value': 'trigger', 'width': '15%'},
                        {'header': langDict.bulletin, 'value': 'bulletin', 'width': '20%'},
                        {'header': langDict.setting, 'value': 'functional', 'width': '5%'},
                    ],
                    resizable: true,
                    width: '100%',
                }
            }).bind("loaded.jstree", function (event, data) {
                //task_polling();

                try {
                    $(this).jstree('open_node', md5('task_group_' + $('[name="_group"]').attr('content').split('_')[1]));
                    parse_config_tree_to_list();
                } catch (e) {
                    //$(this).jstree('open_all');
                }
            }).on('select_node.jstree', function (event, data) {

            }).bind("dblclick.jstree", function (event) {
                var node = $(event.target).closest("li");
                if (node.length) {
                    node = $('#task_tree').jstree('get_node', node[0].id);
                    if (node && es5_includes([icons.task, icons.enabled], node.icon)) {

                        task_edit_form(0);

                        object.selected = node.original.more;
                        object.svg = null;

                        $('#task_edit_revert').show();
                        $('#task_edit_delete').show();

                        task_edit_form(object.selected);

                        $('#task_modal').modal({
                            backdrop: 'static',
                            keyboard: true,
                            show: true
                        });
                    }
                }
            });

            $('#user_tree').jstree({
                "plugins": ["wholerow", "changed", "grid", 'ui', 'search'],
                'core': {
                    'data': user,
                    'themes': {'name': 'proton', 'responsive': true, 'variant': 'large'},
                    'check_callback': true
                },
                "grid": {
                    columns: [
                        {'header': '&nbsp;', 'value': 'id', 'width': '30%'},
                        {'header': langDict.name, 'value': 'name', 'width': '35%'},
                        {'header': langDict.title, 'value': 'title', 'width': '40%'}
                    ],
                    resizable: true,
                    width: '100%',
                }
            }).bind("loaded.jstree", function (event, data) {
                try {
                    $(this).jstree('open_node', md5('user_group_' + $('[name="_group"]').attr('content').split('_')[1]));
                } catch (e) {
                    //$(this).jstree('open_all');
                }
            }).on('select_node.jstree', function (event, data) {
                if ($('#task_modal').hasClass('show')) {
                    $('#user_modal').modal('hide');
                    $('#task_edit_source').val(data.node.original.more.id);
                    $('#task_modal').show();
                } else if ($('#event_manage').is(':visible')) {
                    $('#user_modal').modal('hide');
                    $('#select_users').empty().append('<option value="' + data.node.original.more.id + '" data-subtext="' + data.node.original.more.video.title + '" selected>' + data.node.original.more.id + '</option>').selectpicker('refresh');
                }
            });

            $('#group_tree').jstree({
                "plugins": ["wholerow", "changed", 'ui', 'search'],
                'core': {
                    'data': group,
                    'themes': {'name': 'proton', 'responsive': true, 'variant': 'large'},
                    'check_callback': true
                }
            }).bind("loaded.jstree", function (event, data) {
                try {
                    $(this).jstree('open_node', md5('group_group_' + $('[name="_group"]').attr('content').split('_')[1]));
                } catch (e) {
                    //$(this).jstree('open_all');
                }
            }).on('select_node.jstree', function (event, data) {
                if ($('#task_modal').hasClass('show')) {
                    $('#group_modal').modal('hide');
                    $('#task_edit_parent').val(data.node.original.more.name).attr('data-id', data.node.original.more.id);
                    $('#task_modal').show();
                } else if ($('#event_manage').is(':visible')) {
                    $('#group_modal').modal('hide');
                    $('#select_group').empty().append('<option value="' + data.node.original.more.id + '" selected>' + data.node.original.more.name + '</option>').selectpicker('refresh');
                }
            });
        }
    });

    $(document).on('click', '[class*=cell-input-]', function (e) {
        $(this).focus();
    });

    $(document).on('click', '.cell-input-btn', function (e) {
        var btn = $(this), input = btn.closest('.input-group').find('input'), id = input.attr('data-id');
        if (input.hasClass('cell-input-source')) {
            $('#user_modal').attr('data-id', '');
            $('#user_apply').show();

            try {
                var source = object.taskList[id].targetId;
                $('#user_modal').attr('data-id', id);
                $('#user_tree').jstree('deselect_all');
                $('#user_tree').jstree('select_node', md5('user_user_' + source));

                $('#user_modal').modal({
                    backdrop: 'static',
                    keyboard: true,
                    show: true
                });

            } catch (e) {
                console.warn(e);
            }

        } else if (input.hasClass('cell-input-title')) {
            try {
                var uid = object.taskList[id].targetId, user = object.userList[uid];

                if (user.video.title == input.val()) {
                    $.growl.warning({message: langDict.notChanged});
                    return;
                } else {
                    var obj = data_format('/api/user', 0, 'PUT', {'id': uid, 'videoTitle': input.val()}, null);

                    btn.button('loading');

                    ajax('PUT', '/agent/api', obj, function (a) {
                        if (a.error) {
                            $.growl.error({message: a.error});
                        } else {
                            input.attr('value', input.val());
                            object.userList[uid].video.title = input.val();

                            var t_node = $('#task_tree').jstree().get_node(md5('task_task_' + id)),
                                u_node = $('#user_tree').jstree().get_node(md5('user_user_' + uid));

                            t_node.data.title = gen_input(id, 'title', input.val(), false, false);
                            u_node.data.title = '<input type="text" class="form-control form-control-sm" value="' + input.val() + '" readonly>';
                            u_node.original.more.video.title = input.val();

                            $('#task_tree').jstree('redraw_node', md5('task_task_' + id));
                            $('#user_tree').jstree('redraw_node', md5('user_user_' + uid));

                            $.growl.notice({message: langDict['wasModified']});
                        }
                        btn.button('reset');
                    });
                }
            } catch (e) {
                console.warn(e);
            }
        } else if (input.hasClass('cell-input-trigger')) {
            $('#trigger_description').val('').attr('data-id', '');
            $('input[name="trigger[]"]').prop('checked', 0);

            try {
                $('#trigger_description').val(object.taskList[id].description).attr('data-id', id);

                for (var i in object.taskList[id].pipelines[0].params.triggers)
                    $('#trigger_' + object.taskList[id].pipelines[0].params.triggers[i]).prop('checked', 1);

                $('#trigger_modal').modal({
                    backdrop: 'static',
                    keyboard: true,
                    show: true
                });

            } catch (e) {
                console.warn(e);
            }
        } else if (input.hasClass('cell-input-line')) {
            //console.log(input.val());
        }
    });

    $(document).on('click', '.cell-input-task', function (e) {
        var id = $(this).attr('data-id');
        task_edit_form(0);

        object.selected = null;
        object.svg = null;

        $('#task_edit_revert').show();
        $('#task_edit_delete').show();

        try {
            var task = object.taskList[id];
            task_edit_form(task);
            object.selected = task;

            $('#task_modal').modal({
                backdrop: 'static',
                keyboard: true,
                show: true
            });
        } catch (e) {
            console.warn(e);
        }
    });

    $('#user_apply').on('click', function (e) {
        try {
            var tid = $('#user_modal').attr('data-id'), task = object.taskList[tid],
                nid = $('#user_tree').jstree('get_selected'), node = $('#user_tree').jstree().get_node(nid[0]);

            object.selected = task;

            if (node.icon == icons.users) {
                $.growl.warning({message: langDict.noSource});
                return;
            } else {
                const obj = {'id': tid, 'userId': node.original.more.id, 'targetId': node.original.more.id};

                if (obj.targetId == task.targetId) {
                    $.growl.warning({message: langDict.notChanged});
                    return;
                } else {
                    $('#user_apply').button('loading');

                    task_rest(obj, task.enabled, 'PUT', function (cb) {
                        $('#user_apply').button('reset');
                    });
                }
            }
        } catch (e) {
            console.warn(e);
        }
    });

    $('#trigger_apply').on('click', function (e) {
        try {
            const tid = $('#trigger_description').attr('data-id'), task = object.taskList[tid];

            object.selected = task;

            var triggers = [];

            $.each(['person', 'car', 'motorcycle'], function (i, v) {
                $('#trigger_' + v).prop('checked') && triggers.push(v);
            });

            if (triggers.length == 0) {
                $.growl.warning({message: langDict.noTrigger});
                return;
            }

            var chagned = false, pipelines = task.pipelines;

            $.each(['person', 'car', 'motorcycle'], function (i, v) {
                $('#trigger_' + v).prop('checked') ? (es5_includes(task.pipelines[0].params.triggers, v) || (chagned = true)) : (es5_includes(task.pipelines[0].params.triggers, v) && (chagned = true));
            });

            //task.pipelines[0].params.triggers
            if (chagned) {
                pipelines[0].params.triggers = triggers;

                $('#trigger_apply').button('loading');

                task_rest({'id': task.id, 'pipelines': pipelines}, task.enabled, 'PUT', function (cb) {
                    $('#trigger_apply').button('reset');
                });
            } else {
                $.growl.warning({message: langDict.notChanged});
                return;

            }
        } catch (e) {
            console.warn(e);
        }
    });

    $('#user_modal,#group_modal').on('shown.bs.modal hidden.bs.modal', function (e) {
        switch (e.type) {
            case 'shown':
                var _tree = '#group_tree';
                e.target.id == 'user_modal' && (_tree = '#user_tree');
                $(_tree).find('.jstree-clicked:eq(0)')[0] && $(_tree).find('.jstree-clicked:eq(0)')[0].scrollIntoView();
                break;
            case 'hidden':
                if ($('#task_modal').hasClass('show')) {
                    $('#task_modal').show();
                }
                break;
        }
    });

    $('.select-group-modal').on('click', function (e) {
        $('#group_tree').jstree('deselect_all');

        if ($('#task_modal').hasClass('show')) {
            var id = $('#task_edit_parent').attr('data-id');
            $('#group_modal').attr('data-id', '');
            if (id.length) $('#group_tree').jstree('select_node', md5('group_group_' + id));

            $('#task_modal').hide();
        }

        $('#group_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });

    $('.select-user-modal').on('click', function (e) {

        $('#user_tree').jstree('deselect_all');

        if ($('#task_modal').hasClass('show')) {
            var id = $('#task_edit_source').val();
            $('#user_modal').attr('data-id', '');
            if (id.length) $('#user_tree').jstree('select_node', md5('user_user_' + id));

            $('#task_modal').hide();
        }

        $('#user_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });

    $('#task_modal').on('shown.bs.modal', function (e) {
        if (!object.svg) {
            var width = $('#task_edit_player').width(), height = (width * 9 / 16),
                data = object.selected, snapshotUrl = '/img/default.jpg';

            try {
                snapshotUrl = object.liveList[data.targetId].snapshotUrl;
            } catch (e) {
                //console.warn(e);
            }

            new SVGCreate('task_edit_player', snapshotUrl, width, height, $('input[name="draw_type"]:checked').val(), function (a) {
                object.svg = a;

                try {
                    object.svg.svgControlPanel.createRegion(data.pipelines[0].params.roi);
                } catch (e) {
                    //console.warn(e);
                }
            });
        }
    });

    $('.roi-btn').on('click', function (e) {
        if (object.svg && !object.svg.svgControlPanel.isCreating) {
            object.svg.svgControlPanel.getPolyPoint() && object.svg.svgControlPanel.removePoly();

            const drawType = $('input[name="draw_type"]:checked').val();

            if (object.svg.drawType != drawType) object.svg.svgControlPanel.changeRegionType(drawType);

            if (drawType == 'rect') {
                object.svg.svgControlPanel.createRectRegion();
            } else {
                object.svg.svgControlPanel.createPolyRegion();
            }
        }
    });

    $('#task_edit_revert').on('click', function (e) {
        if (object.selected) {
            task_edit_form(object.selected);
        } else {
            task_edit_form(0);
        }
    });

    $('#task_edit_delete').on('click', function (e) {
        if ($('#task_modal').attr('data-id')) {
            $('#task_modal').hide();

            bootbox.confirm({
                'title': langDict['aruYouSure'],
                'message': langDict['doYouWantDelete'] + ' ' + object.selected.description + ' ?',
                'buttons': {
                    'cancel': {'label': '<i class="fa fa-times"></i> ' + langDict['cancel']},
                    'confirm': {'label': '<i class="fa fa-check"></i> ' + langDict['apply']}
                },
                'callback': function (confirm) {
                    if (confirm) {
                        var node = $('#task_tree').jstree('get_node', md5('task_task_' + object.selected.id));

                        if (node) {
                            $('#task_edit_apply').button('loading');
                            $('#task_edit_revert').button('loading');
                            $('#task_edit_delete').button('loading');
                            $('#task_edit_close').button('loading');

                            if (object.selected.enabled) {
                                ajax('PUT', '/agent/api', data_format('/api/va/je/disable', 0, 'POST', {'id': object.selected.id}), function (a) {
                                    if (a.error) {
                                        $.growl.error({message: 'disable task failed'});
                                        $('#task_edit_apply').button('reset');
                                        $('#task_edit_revert').button('reset');
                                        $('#task_edit_delete').button('reset');
                                        $('#task_edit_close').button('reset');
                                    } else {
                                        ajax('PUT', '/agent/api', data_format('/api/va/je', 0, 'DELETE', {'id': object.selected.id}), function (b) {
                                            if (b.error) {
                                                $.growl.error({message: b.error});
                                                object.taskList[object.selected.id].enableTime = 0;
                                                object.taskList[object.selected.id].enabled = 0;
                                                object.selected.enableTime = 0;
                                                object.selected.enabled = 0;

                                                $('#task_edit_enabled').prop('checked', 0);

                                                node.icon = icons.task;
                                                node.original.icon = icons.task;
                                                node.original.more = object.taskList[object.selected.id];

                                                $('#task_tree').jstree('redraw_node', node.id);

                                            } else {
                                                $('#task_tree').jstree().delete_node(node.id, function () {
                                                });
                                                $('#task_tree').jstree("deselect_all");
                                                $('#task_modal').modal('hide');
                                                $.growl.notice({message: langDict.wasDeleted});
                                            }

                                            $('#task_edit_apply').button('reset');
                                            $('#task_edit_revert').button('reset');
                                            $('#task_edit_delete').button('reset');
                                            $('#task_edit_close').button('reset');
                                        });
                                    }
                                });
                            } else {
                                ajax('PUT', '/agent/api', data_format('/api/va/je', 0, 'DELETE', {'id': object.selected.id}), function (a) {
                                    if (a.error) {
                                        $.growl.error({message: a.error});
                                    } else {
                                        $('#task_tree').jstree().delete_node(node.id, function () {
                                        });
                                        $('#task_tree').jstree("deselect_all");
                                        $('#task_modal').modal('hide');
                                        $.growl.notice({message: langDict.wasDeleted});
                                    }
                                    $('#task_edit_apply').button('reset');
                                    $('#task_edit_revert').button('reset');
                                    $('#task_edit_delete').button('reset');
                                    $('#task_edit_close').button('reset');
                                });
                            }
                        }
                    } else {
                        $('#task_modal').show();
                    }
                }
            });
        }
    });

    $('#task_edit_apply').on('click', function (e) {

        if (!object.svg) {
            $.growl.warning({message: 'SVG not created'});
            return;
        }

        var obj = {}, roi = object.svg.svgControlPanel.getPolyPoint(), triggers = [], method = 'PUT';

        if (!roi || roi.length < 3) {
            $.growl.warning({message: langDict.noPoint});
            return;
        }

        if (!$('#task_edit_description').val()) {
            $.growl.warning({message: langDict.noname});
            return;
        }
        if (!$('#task_edit_parent').attr('data-id')) {
            $.growl.warning({message: langDict.noParent});
            return;
        }
        if (!$('#task_edit_source').val()) {
            $.growl.warning({message: langDict.noSource});
            return;
        }

        $.each(['person', 'car', 'motorcycle'], function (i, v) {
            $('#task_edit_' + v).prop('checked') && triggers.push(v);
        });

        if (triggers.length == 0) {
            $.growl.warning({message: langDict.noTrigger});
            return;
        }

        obj.pipelines = [{'params': {'roi': roi, 'triggers': triggers}, 'type': 'IntrusionDetection'}];

        if (object.selected) {
            var chagned = false, params = object.selected.pipelines[0].params;

            $.each(['person', 'car', 'motorcycle'], function (i, v) {
                $('#task_edit_' + v).prop('checked') ? (es5_includes(params.triggers, v) || (chagned = true)) : (es5_includes(params.triggers, v) && (chagned = true));
            });
            if (params.roi.length == roi.length) for (var i in params.roi) for (var j in params.roi[i]) {
                roi[i][j] != params.roi[i][j] && (chagned = true);
                if (chagned) break;
            } else chagned = true;

            chagned || delete obj.pipelines;

            if ($('#task_edit_description').val() != object.selected.description) obj.description = $('#task_edit_description').val();
            if ($('#task_edit_parent').attr('data-id') != object.selected.groupId) obj.groupId = $('#task_edit_parent').attr('data-id');
            if ($('#task_edit_source').val() != object.selected.targetId) {
                obj.userId = $('#task_edit_source').val();
                obj.targetId = $('#task_edit_source').val();
            }
            if (+($('#task_edit_notice').prop('checked')) != object.selected.notify) obj.notify = +($('#task_edit_notice').prop('checked'));

            var enabled = +($('#task_edit_enabled').prop('checked'));

        } else {
            method = 'POST';

            object.selected = {'enableTime': 0};
            // creator???
            // obj.userId = $('[name="_user"]').attr('content');
            obj.userId = $('#task_edit_source').val();
            obj.description = $('#task_edit_description').val();
            obj.groupId = $('#task_edit_parent').attr('data-id');
            obj.targetId = $('#task_edit_source').val();
            obj.notify = +($('#task_edit_notice').prop('checked'));
        }

        if (Object.keys(obj).length || enabled != object.selected.enabled) {
            obj.id = object.selected.id;

            task_rest(obj, enabled, method, function (cb) {
                // nothing
            });
        } else {
            $.growl.warning({message: langDict.notChanged});
        }
    });

    $('#task_add').on('click', function (e) {
        task_edit_form(0);

        object.selected = null;
        object.svg = null;

        $('#task_edit_parent').parent('.input-group').find('button').prop('disabled', 0);

        $('#task_edit_revert').hide();
        $('#task_edit_delete').hide();

        var selected = $('#task_tree').jstree('get_selected');

        try {
            var node = $('#task_tree').jstree().get_node(selected[0]).original;

            if (node.more.groupId) {
                var parent_id = $('#task_tree').jstree(true).get_parent(selected),
                    parent = $('#task_tree').jstree().get_node(parent_id).original;

                $('#task_edit_parent').attr('data-id', node.more.groupId).val(parent.text);
            } else if (node.more.id) {
                $('#task_edit_parent').attr('data-id', node.more.id).val(node.text);
            }

        } catch (e) {
            //
        }

        $('#task_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });

    $('[id^=condition_]*').on('click', function () {
        var checked = $(this).prop('checked'), target = $(this).attr('id').split('_')[1];
        (checked) ? $('#' + target + '_row').show() : $('#' + target + '_row').hide();
    });

    $('#select_users').on('show.bs.select', function (e, clickedIndex, isSelected, previousValue) {
        //$('#user_tree').jstree(true).search('');
        $('#user_tree').jstree('deselect_all');

        var value = $(this).val();
        $('#user_tree').jstree('select_node', md5('user_user_' + value));

        $('#user_apply').hide();

        $('#user_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });

    $('#select_group').on('show.bs.select', function (e, clickedIndex, isSelected, previousValue) {
        //$('#group_tree').jstree(true).search('');
        $('#group_tree').jstree('deselect_all');

        var value = $(this).val();
        $('#group_tree').jstree('select_node', md5('group_group_' + value));

        $('#group_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });

    $('#searchBtn').on('click', function (e) {
        var btn = $(this), data = {};

        $('#condition_triggers').prop('checked') && $('#select_triggers').val().length && (data['triggered'] = [$('#select_triggers').val()]);
        $('#condition_group').prop('checked') && $('#select_group').val().length && (data['group'] = [$('#select_group').val()]);
        $('#condition_users').prop('checked') && $('#select_users').val().length && (data['postID'] = $('#select_users').val());
        $('#condition_keyword').prop('checked') && $('#select_keyword').val().length && (data['config'] = $('#select_keyword').val());

        data['keep'] = +($('#condition_keep').prop('checked'));
        data['misjudged'] = +($('#condition_misjudged').prop('checked'));

        if ($('#condition_time').prop('checked')) {
            data['startTime'] = $('#search_time').data('daterangepicker').startDate.format('YYYY-MM-DDTHH:mm:ssZ');
            data['stopTime'] = $('#search_time').data('daterangepicker').endDate.format('YYYY-MM-DDTHH:mm:ssZ');
        }

        if (Object.keys(data).length) {
            btn.button('loading');

            object.eventConditon = data_format('/api/va/je/event/search', 0, 'POST', data, null);

            video_search(table, object.eventConditon, function (a) {
                if (a.error) {
                    $.growl.error({message: a.error});
                } else {
                    object.eventList = a.origin;
                    $.growl.notice({message: langDict['result'] + ': ' + a.total + ' ' + langDict.row});
                }
                btn.button('reset');
            });
        }
    });

    $(document).on('click', '#videos .play-icon', function (e) {
        switch (e.type) {
            case 'click':
                var id = $(this).attr('data-id');

                $('#video_download').attr('onclick', '');
                $('#video_info').empty();
                object.foucs = {};
                $('#video_title').val('');

                for (var i in object.eventList) {
                    if (object.eventList[i]['id'] == id) {

                        object.foucs = object.eventList[i];

                        $('#video_title').val(object.foucs.description);

                        try {
                            $('#player_modal').find('.modal-title').text(object.userList[object.foucs.targetId].video.title);
                            //console.log(object.userList[object.foucs.targetId]);
                        } catch (e) {
                            $('#video_title').val('');
                        }

                        $('#video_content').html(object.foucs.type);
                        var info = '<tr><th>' + langDict.startTime + '</th><td>' + moment(object.foucs.startTime).local().format('YYYY-MM-DD HH:mm:ss') + '</td></tr>';
                        info += '<tr><th>' + langDict.fileSize + '</th><td>' + formatBytes(object.foucs.size, 0, 1024) + '</td></tr>';
                        $('#video_info').append(info);
                        $('#video_download').attr('onclick', 'window.location.href=\'' + object.foucs.downloadUrl + '\'');
                        break;
                    }
                }

                if (!object.foucs.size) {
                    $.growl.warning({message: 'video not ready'});
                    return;
                }

                $('#player_modal').modal({
                    backdrop: 'static',
                    keyboard: true,
                    show: true
                });
                break;
        }
    });

    $('#player_modal').on('show.bs.modal shown.bs.modal hidden.bs.modal', function (e) {
        switch (e.type) {
            case 'show':
                object.plyr = new Plyr('#plyr', {
                    controls: [
                        'play-large', // The large play button in the center
                        //'restart', // Restart playback
                        'rewind', // Rewind by the seek time (default 10 seconds)
                        'play', // Play/pause playback
                        'fast-forward', // Fast forward by the seek time (default 10 seconds)
                        'progress', // The progress bar and scrubber for playback and buffering
                        'current-time', // The current time of playback
                        'duration', // The full duration of the media
                        'mute', // Toggle mute
                        'volume', // Volume control
                        'captions', // Toggle captions
                        'settings', // Settings menu
                        'airplay', // Airplay (currently Safari only)
                        'download', // Show a download button with a link to either the current source or a custom URL you specify in your options
                        'fullscreen', // Toggle fullscreen
                    ],
                    //ratio: '16:9',
                    speed: {selected: 1, options: [0.5, 1, 2, 4, 8, 16]},
                    hideControls: false
                });

                object.plyr.source = {
                    type: 'video',
                    //poster: object.foucs.snapshotUrl,
                    sources: [{src: object.foucs.videoUrl},]
                };
                break;
            case 'shown':
                //console.log(object.foucs);

                $('#map1').height($('video').height());
                $('#gps_list').width($('#gps_list').parent().width());
                if (object.map1) {
                    if (markers['_lastOne']) {
                        object.map1.removeLayer(markers['map1'][markers['_lastOne']]['point']);
                        for (var i in object.map1._layers) if (object.map1._layers[i]._path != undefined) {
                            try {
                                object.map1.removeLayer(map1._layers[i]);
                            } catch (e) {
                                console.warn("problem with " + e + map1._layers[i]);
                            }
                        }
                        markers['_lastOne'] = null;
                    }
                } else
                    object.map1 = map_initial('map1');

                var video = $('video').get(0), temp = null, last_li = null;

                if (object.plyr) {
                    const db = new drawBack(object.foucs.metadataUrl, object.plyr, [video.videoWidth, video.videoHeight]);
                    object.plyr.play();
                }

                break;
            case 'hidden':
                object.plyr && (object.plyr.destroy(), object.plyr = null);
                $('#player').html('<video preload="none" id="plyr" controls crossorigin></video>');

                $('#drawback-panel').remove();
                break;
        }
    });

    $(document).on('click', '.video-keep', function (e) {
        ajax('PUT', '/agent/api', data_format("/api/va/je/event/update", 0, "POST", {
            "id": [$(this).attr('data-id')],
            "keep": $(this).prop('checked') ? 1 : 0
        }, null), function (a) {
            if (a.error) {
                $.growl.error({message: a.error});
            } else {
                $.growl.notice({message: langDict.wasModified});
            }
        });
    });

    $(document).on('click', '.video-misjudged', function (e) {
        ajax('PUT', '/agent/api', data_format("/api/va/je/event/update", 0, "POST", {
            "id": [$(this).attr('data-id')],
            "misjudged": $(this).prop('checked') ? 1 : 0
        }, null), function (a) {
            if (a.error) {
                $.growl.error({message: a.error});
            } else {
                $.growl.notice({message: langDict.wasModified});
            }
        });
    });

    $(document).on('click', '#video_btn', function (e) {
        $('#video_btn').button('loading');
        ajax('PUT', '/agent/api', data_format("/api/va/je/event", 0, "PUT", {
            "id": object.foucs.id,
            "description": $('#video_title').val()
        }, null), function (a) {
            if (a.error) {
                $.growl.error({message: a.error});
            } else {
                $.growl.notice({message: langDict.wasModified});
            }
            $('#video_btn').button('reset');
        });
    });

    $('#task_keyword').on('keyup', function (e) {
        $(this).val().length == 0 && $('#task_tree').jstree('search', '');
    });

    $('[id$=_search_btn]').on('click', function (e) {
        var btn = $(this), tree = $('#' + btn.attr('id').split('_')[0] + '_tree'),
            val = btn.closest('.input-group').find('input').val();
        val && (btn.button('loading'), setTimeout(function () {
            try {
                tree.jstree(true).search(val);
                tree.find('.jstree-search:eq(0)')[0].scrollIntoView();
            } catch (e) {
                $.growl.warning({message: langDict.notFound});
            }
            btn.button('reset');
        }, 300));
    });

    // $('#player_modal').on('show.bs.modal shown.bs.modal hidden.bs.modal', function (e) {
    //     switch (e.type) {
    //         case 'show':
    //             plyr ? (plyr.source = {
    //                 "type": 'video',
    //                 "poster": foucs['snapshotUrl'],
    //                 "sources": [{"src": foucs['videoUrl'], "type": 'video/mp4'}]
    //             }) : ($('#plyr').attr('poster', foucs['snapshotUrl']), $('#plyr').find('source').attr('src', foucs['videoUrl']));
    //             // gps = {};
    //             // var gps_text = '';
    //             // get_gps_data(foucs['id'], function (a) {
    //             //     if (!a.error && a['gpsList']) {
    //             //         for (var i in a['gpsList']) {
    //             //             gps_text += '<li class="list-group-item" id="gpsItem_' + Date.parse(a['gpsList'][i]['timestamp']) + '">' + a['gpsList'][i]['timestamp'] + ':&nbsp;&nbsp;' + a['gpsList'][i]['latitude'] + ',  ' + a['gpsList'][i]['longitude'] + '</li>';
    //             //             gps[a['gpsList'][i]['timestamp']] = a['gpsList'][i];
    //             //         }
    //             //     }
    //             //     $('#gps_list').html(gps_text);
    //             // });
    //             plyr || (plyr = new Plyr('#plyr', {
    //                 controls: [
    //                     'play-large', // The large play button in the center
    //                     'restart', // Restart playback
    //                     'rewind', // Rewind by the seek time (default 10 seconds)
    //                     'play', // Play/pause playback
    //                     'fast-forward', // Fast forward by the seek time (default 10 seconds)
    //                     'progress', // The progress bar and scrubber for playback and buffering
    //                     'current-time', // The current time of playback
    //                     'duration', // The full duration of the media
    //                     'mute', // Toggle mute
    //                     'volume', // Volume control
    //                     'captions', // Toggle captions
    //                     'settings', // Settings menu
    //                     'airplay', // Airplay (currently Safari only)
    //                     'download', // Show a download button with a link to either the current source or a custom URL you specify in your options
    //                     'fullscreen', // Toggle fullscreen
    //                 ]
    //             }));
    //             break;
    //         case 'shown':
    //             //console.warn(foucs);
    //             var instance = $('video')[0];
    //             $('#map1').height($('video').height());
    //             $('#gps_list').width($('#gps_list').parent().width());
    //             if (map1) markers['_lastOne'] && markers['map1'][markers['_lastOne']] && map1.removeLayer(markers['map1'][markers['_lastOne']]);
    //             else map1 = map_initial('map1');
    //             plyr && drawBack(foucs.metadataUrl, plyr, [instance.videoWidth, instance.videoHeight]);
    //
    //             // var instance = $('video')[0], temp = null, last_li = null;
    //             // instance.ontimeupdate = function (e) {
    //             //     var tsmp = moment(foucs['startTime']).add(Math.floor($('video').get(0).currentTime), 'second').format('YYYY-MM-DD HH:mm:ss');
    //             //     if (temp != tsmp && gps[tsmp]) {
    //             //         last_li && last_li.removeClass('active');
    //             //         $('#gpsItem_' + Date.parse(tsmp)).addClass('active');
    //             //         var list = $('#gps_list')[0].children, scroll_height = 0;
    //             //         for (var i in list) {
    //             //             if ($('#' + list[i]['id']).hasClass('active')) break;
    //             //             (i >= 1) && (scroll_height += ($('#' + list[i]['id']).outerHeight() + 3));
    //             //         }
    //             //         last_li && $('#gps_list').animate({scrollTop: scroll_height});
    //             //         handlerMarker(map1, {
    //             //             'id': foucs.id,
    //             //             'gps': gps[tsmp]
    //             //         }, true, true, tsmp, gps);
    //             //         temp = tsmp;
    //             //         last_li = $('#gpsItem_' + Date.parse(tsmp));
    //             //     }
    //             // };
    //             break;
    //         case 'hidden':
    //             plyr.stop();
    //             $('#drawback-panel').remove();
    //             break;
    //     }
    // });
    // $(document).on('click mouseenter mouseleave', '[id^=gpsItem_]*', function (e) {
    //     if ($(this).attr('id').split('_').length == 2) switch (e.type) {
    //         case 'click':
    //             var tsmp = $(this).attr('id').split('_')[1], instance = $('video')[0];
    //             //tsmp && instance && foucs['startTime'] && (instance.currentTime = (tsmp - Date.parse(foucs['startTime'])) / 1000);
    //             break;
    //         case 'mouseenter':
    //             $(this).css('cursor', 'pointer');
    //             $(this).css('border', "solid 2px #666");
    //             break;
    //         case 'mouseleave':
    //             $(this).css('border', "");
    //             break;
    //     }
    // });
});