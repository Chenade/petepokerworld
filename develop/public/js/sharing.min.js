$(document).ready(function () {
    $('#task_tree').parent().height($(window).height() * 0.75);
    $('#user_tree').parent().height($(window).height() * 0.7);
    $('#group_tree').parent().height($(window).height() * 0.7);
    $('#provider-list').parent().height($(window).height() * 0.5);
    $('.overflow-auto').height($(window).height() * 0.7);

    var object = {
        'user': [],
        'group': [],
        'task': [],
        'node': {'task_id': null, 'modified': false, 'width': $(window).width()}
    };
    var jq = function (myid) {
        return "#" + myid.replace(/(:|\.|\[|\]|,|=|@)/g, "\\$1");
    }, member_children = function (tid, member) {
        var _member = [];
        for (var i in member) {
            _member.push({
                'text': member[i].id,
                'icon': icons.user,
                'state': {'selected': false},
                'more': member[i],
                'id': 'task_' + tid + '_member_' + member[i].id,
                'a_attr': {'class': 'text-secondary'},
                'data': {
                    'id': member[i].id,
                    'group': '<input type="text" class="form-control form-control-sm" value="' + member[i].groupName + '" data-id="' + member[i].groupId + '" disabled>',
                    'name': '<input type="text" class="form-control form-control-sm" value="' + member[i].info.name + '" disabled>',
                    'title': '<input type="text" class="form-control form-control-sm" value="' + member[i].video.title + '" disabled>',
                    'manage': '<div class="input-group"><button class="btn btn-sm btn-danger cell-btn-delete" data-target="member" task-id="' + tid + '" data-id="' + member[i].id + '" data-loading-text="<span class=\'spinner-grow spinner-grow-sm\'></span>"><i class="fas fa-trash"></i></button></div>'
                }
            });
        }
        return  {
            'text': langDict.member,
            'icon': icons.users,
            'state': {'selected': false},
            'children': _member,
            'more': _member,
            'id': 'task_task_' + tid + '_members_',
            'a_attr': {'class': 'text-secondary'},
            'data': {
                'id': '',
                'group': '',
                'name': '',
                'title': '',
                'manage': ''
            }
        }
    }, provider_children = function (tid, providers) {
        var _provider = [];
        for (var j in providers) {
            var title = (providers[j].info.description) ? providers[j].info.description : providers[j].info.name;
            _provider.push({
                'text': providers[j].id,
                'icon': icons.camera,
                'state': {'selected': false},
                'more': providers[j],
                'id': 'task_' + tid + '_provider_' + providers[j].id,
                'a_attr': {'class': 'text-secondary'},
                'data': {
                    'id': providers[j].id,
                    'group': '<input type="text" class="form-control form-control-sm" value="' + ((providers[j].groupName) ? providers[j].groupName : '') + '" data-id="' + providers[j].groupId + '" disabled>',
                    'name': '<input type="text" class="form-control form-control-sm" value="' + ((providers[j].info.name) ? providers[j].info.name : '') + '" disabled>',
                    'title': '<input type="text" class="form-control form-control-sm" value="' + ((providers[j].info.description) ? providers[j].info.description : '') + '" disabled>',
                    'manage': '<div class="input-group"><button class="btn btn-sm btn-danger cell-btn-delete" data-target="provider" task-id="' + tid + '" data-id="' + providers[j].id + '" data-loading-text="<span class=\'spinner-grow spinner-grow-sm\'></span>"><i class="fas fa-trash"></i></button></div>'
                }
            });
        }
        return  {
            'text': langDict.provider,
            'icon': icons.users,
            'state': {'selected': false},
            'children': _provider,
            'more': _provider,
            'id': 'task_task_' + tid + '_providers_',
            'a_attr': {'class': 'text-secondary'},
            'data': {
                'id': '',
                'group': '',
                'name': '',
                'title': '',
                'manage': ''
            }
        }
    },gen_childs = function (data) {
        var childs = [member_children(data.id, data.members)];//, provider_children(data.id, data.providers)];
        return childs;
    }, recursive = function (origin, prefix, tasks) {
        /*
        * prefix = group --> group tree
        *        = task  --> task tree
        *        = user  --> user tree
        *
        * */
        var data = {
            'text': '<name>' + origin.group.name + '</name>',
            'icon': icons.users,
            'state': {'selected': false},
            'more': origin.group,
            'children': [],
            'id': prefix + '_group_' + origin.group.id,
            'a_attr': {'class': 'text-primary'}
        };
        var users = [];
        switch (prefix) {
            case 'group':
                break;
            case 'user':
                users = origin.userList;
                break;
            case 'task':
                if (origin.group.id in tasks) for (var i in tasks[origin.group.id]) {
                    var task = tasks[origin.group.id][i];
                    task.group = origin.group.name; // add group name, not in raw data

                    var obj = {
                        'text': task.description,
                        'icon': icons.share,
                        'state': {'selected': false, 'opened': true},
                        'children': gen_childs(task),
                        'more': task,
                        'id': prefix + '_task_' + task.id,
                        'a_attr': {'class': ''},
                        'data': {
                            'id': task.id,
                            'group': '',
                            'name': '',
                            'title': '',
                            'manage': '<div class="input-group"><button class="btn btn-sm btn-warning cell-btn-manage" data-id="' + task.id + '" data-loading-text="<span class=\'spinner-grow spinner-grow-sm\'></span>"><i class="fas fa-cog"></i></button></div>'
                        }
                    };
                    data.children.push(obj);
                }
                break;
        }
        if (users.length) {
            /*-------- user sorting --------*/
            users = users.sort(function (a, b) {
                return (a.id > b.id) ? 1 : ((b.id > a.id) ? -1 : 0);
            });
            // let manage and lock account to top
            var _users = [], _list = [];
            for (var i in users) if (is_manage(users[i].permission)) {
                _users.push(users[i]);
                _list.push(users[i].id);
            }
            for (var i in users) if (users[i].locked && !es5_includes(_list, users[i].id)) {
                _users.push(users[i]);
                _list.push(users[i].id);
            }
            for (var i in users) if (!es5_includes(_list, users[i].id)) _users.push(users[i]);
            users = _users;
            /*-------- end sort --------*/
            for (var i in users) {
                var user = users[i], icon = icons.user, _class = 'text-secondary';

                user.name = user.info.name;
                user.permission && is_manage(user.permission) && (icon = icons.manager, _class = '');
                user.locked && (icon = icons.lock, _class = 'text-danger');

                user.gid = origin.group.id;
                user.group = origin.group.name;
                user.layer = origin.group.layer;

                var obj = {
                    'text': '<name>' + user.id + '</name>',
                    'icon': icon,
                    'state': {'selected': false},
                    'more': user,
                    'id': prefix + '_user_' + user.id,
                    'a_attr': {'class': _class},
                    'data': {
                        'id': user.id,
                        'name': '<input type="text" class="form-control form-control-sm" value="' + user.info.name + '" disabled>',
                        'title': '<input type="text" class="form-control form-control-sm" value="' + user.video.title + '" disabled>'
                    }
                };
                data.children.push(obj);
            }
        }
        /*-------- group sorting --------*/
        var chld = origin['children'];
        chld && (chld = chld.sort(function (a, b) {
            return (a.group.name > b.group.name) ? 1 : ((b.group.name > a.group.name) ? -1 : 0);
        }));
        /*-------- end sort --------*/
        for (var i in chld) data['children'].push(recursive(chld[i], prefix, tasks));
        return data;
    }, tree_refresh = function (cb) {
        ajax('PUT', '/agent/api', data_format('/api/group/task/list', 0, 'GET', {}, null), function (task) {
            if (task.error)
                $.growl.error({message: task.error});
            else {
                var _task = {};
                for (var i in task) {
                    if (!(task[i].groupId in _task)) _task[task[i].groupId] = [];
                    _task[task[i].groupId].push(task[i]);
                }

                ajax('PUT', '/agent/api', data_format('/api/user/tree', 0, 'GET', {}, null), function (a) {
                    if (a.error) $.growl.error({message: a.error}); else {

                        if (Object.keys(object.task).length) $('#task_tree').jstree(true).destroy();
                        object.task = recursive(a, 'task', _task);
                        var width = {'id': '35%', 'group': '20%', 'name': '20%', 'title':'20%', 'manage': '5%'};
                        if(object.node.width < 450) width = {'id': '350', 'group': '200', 'name': '200', 'title':'200', 'manage': '50'};

                        $('#task_tree').jstree({
                            "plugins": ["wholerow", "changed", "search", "grid", 'ui'],
                            "search": {"show_only_matches": false, "show_only_matches_children": false},
                            'core': {
                                "check_callback": true,
                                'data': object.task,
                                'themes': {
                                    'name': 'proton',
                                    'responsive': false,
                                    'variant': 'large'
                                }
                            }, "grid": {
                                columns: [
                                    {'header': '&nbsp;', 'value': 'id', 'width': width.id},
                                    {'header': langDict.group, 'value': 'group', 'width': width.group},
                                    {'header': langDict.name, 'value': 'name', 'width': width.name},
                                    {'header': langDict.title, 'value': 'title', 'width': width.title},
                                    {'header': langDict.manage, 'value': 'manage', 'width': width.manage},
                                ],
                                resizable: true,
                                width: '100%',
                            }
                        }).bind("loaded.jstree changed.jstree", function (event, data) {
                            try {
                                $(this).jstree('open_node', 'task_group_' + $('[name="_group"]').attr('content').split('_')[1]);
                            } catch (e) {
                                //$(this).jstree('open_all');
                            }
                        });

                        if (Object.keys(object.user).length == 0) {
                            object.user = recursive(a, 'user', []);
                            $('#user_tree').jstree({
                                "plugins": ["wholerow", "checkbox", "changed", "search", 'ui', 'grid'],
                                "search": {"show_only_matches": false, "show_only_matches_children": false},
                                'core': {
                                    "check_callback": true,
                                    'data': object.user,
                                    'themes': {
                                        'name': 'proton',
                                        'responsive': true,
                                        'variant': 'large'
                                    }
                                }, "grid": {
                                    columns: [
                                        {'header': '&nbsp;', 'value': 'id', 'width': '40%'},
                                        {'header': langDict.name, 'value': 'name', 'width': '30%'},
                                        {'header': langDict.title, 'value': 'title', 'width': '30%'},
                                    ],
                                    resizable: true,
                                    width: '100%',
                                }
                            }).bind("loaded.jstree changed.jstree", function (event, data) {
                                try {
                                    $(this).jstree('open_node', 'user_group_' + $('[name="_group"]').attr('content').split('_')[1]);
                                } catch (e) {
                                    //$(this).jstree('open_all');
                                }
                            }).bind("select_node.jstree deselect_node.jstree", function(e,data){
                                if($('#select_user_modal').is(':visible')){
                                    var payload = { "id": object.node.task_id } ,method = 'DELETE';
                                    if (data.node.original.icon != icons.users) {
                                        payload['member'] = data.node.original.more.id;
                                        if(data.node.state.selected) method = 'POST';
                                        ajax('PUT', '/agent/api', data_format('/api/group/task/member', 0, method, payload, null), function (a) {
                                            if(a.error)
                                                $.growl.error({message: a.error});
                                            else {
                                                $.growl.notice({message: (method == 'POST') ? langDict.wasCreated : langDict.wasDeleted});
                                                object.node.modified = true;
                                            }
                                        });
                                    }
                                }
                            });
                        }

                        if (Object.keys(object.group).length == 0) {
                            object.group = recursive(a, 'group', []);
                            $('#group_tree').jstree({
                                "plugins": ["wholerow", "changed", "search", 'ui'],
                                "search": {"show_only_matches": false, "show_only_matches_children": false},
                                'core': {
                                    "check_callback": true,
                                    'data': object.group,
                                    'themes': {
                                        'name': 'proton',
                                        'responsive': true,
                                        'variant': 'large'
                                    }
                                }
                            }).bind("loaded.jstree changed.jstree", function (event, data) {
                                try {
                                    $(this).jstree('open_node', 'group_group_' + $('[name="_group"]').attr('content').split('_')[1]);
                                } catch (e) {
                                    //$(this).jstree('open_all');
                                }
                            }).on("select_node.jstree", function (event, data) {
                                $('#task_dept').val(data.node.original.more.name).attr('data-id', data.node.original.more.id);
                                if(object.node.task_id != null && $('#select_group_modal').is(':visible')){
                                    var payload = { "id": object.node.task_id, "groupId": data.node.original.more.id};
                                    ajax('PUT', '/agent/api', data_format('/api/group/task', 0, 'PUT', payload, null), function (a) {
                                        if(a.error)
                                            $.growl.error({message: a.error});
                                        else {
                                            $.growl.notice({message: langDict.wasModified});
                                            object.node.modified = true;
                                        }
                                    });
                                }
                                $('#select_group_modal').modal('hide');
                            });
                        }
                    }
                    cb();
                });
            }
        });
    }, task_refresh = function () {
        ajax('PUT', '/agent/api', data_format('/api/group/task?id='+object.node.task_id, 0, 'GET', {}, null), function (task) {
            var new_node = {
                "text": task.description,
                'id': 'task_task_' + task.id,
                "icon": icons.share,
                "state": {"selected": true, 'opened': true},
                "more": task,
                "children": gen_childs(task),
                'data': {
                    'id': task.id,
                    'group': '',
                    'name': '',
                    'title': '',
                    'manage': '<div class="input-group"><button class="btn btn-sm btn-warning cell-btn-manage" data-id="' + task.id + '" data-loading-text="<span class=\'spinner-grow spinner-grow-sm\'></span>"><i class="fas fa-cog"></i></button></div>'
                }
            };

            var node = $('#task_tree').jstree('get_node','task_task_' + object.node.task_id);
            if (node) $('#task_tree').jstree('delete_node', 'task_task_' + object.node.task_id);

            $('#task_tree').jstree().create_node('#task_group_' + task.groupId, new_node, 'first', function () {
                $('#task_tree').jstree('open_node', '#task_group_' + task.groupId);
            });
        });
    }, gen_provider_card = function (data) {
        var dname = (data.info.name) ? data.info.name: '', description = (data.info.description) ? data.info.description: '';
        var title = (data.info.description) ? data.info.description : data.info.name;
        var div = '<div class="col-6 provider-card" data-title="'+ title +'" id="provider_'+ data.id + '"><div class="form-group"><div class="input-group">' +
            '<div class="form-control" style="height: 5em;"><p>' +  dname + '&ensp;<span class="badge badge-info">' +  description + '</span></p>' + '<p style="font-size: 0.8em; color: #bbb;">' +  data.id + '</p>' + '</div>' +
            '<div class="input-group-append"><button data-id="' + data.id + '" class="btn provider_remove btn-danger" data-loading-text="<span class=\'spinner-grow spinner-grow-sm\'></span>"><i class="fas fa-minus"></i></button></div>' +
            '</div></div></div>';
        return div;
    }, gen_nofity_card = function (data) {
        var type = ["", "line", "telegram"];
        var div = '' +
            '<div class="col-6 notification-card" data-title="'+  data.description +'" id="notification_'+ data.to + '">' +
            '<div class="form-group">' +
            '<div class="input-group">' +
            '<div class="d-flex form-control" style="height: 5em;">' +
            '<div><img src="./img/'+ type[data.type] + '.png" alt="' + type[data.type] + '" width="60" height="60" style="margin: 0.3em;"></div>' +
            '<div>' +
            '<p>' + data.to + '</p>' +
            '<p style="font-size: 0.8em; color: #bbb;">' +  (data.description ? data.description : '') +
            '</div>' +
            '</div>' +
            '<div class="input-group-append"><button data-to="' + data.to + '" data-type="' + data.type + '" class="btn notification_remove btn-danger" data-loading-text="<span class=\'spinner-grow spinner-grow-sm\'></span>"><i class="fas fa-minus"></i></button></div>' +
            '</div></div></div>';
        return div;
    };

    $(window).resize(function() {
        if ((object.node.width > 450 && $(window).width() <= 450) || (object.node.width <= 450 && $(window).width() > 450)){
            object.node.width = $(window).width();
            $('#task_tree').parent().height($(window).height() * 0.75);
            tree_refresh(function () {
                loading(false);
            });
        }
    });

    loading(true);
    tree_refresh(function () {
        loading(false);
    });

    ajax('PUT', '/agent/api', data_format('/api/device/list', 0, 'GET', {}, null), function (devices) {
        for (const i in devices){
            // if (i > 100) break;
            var did = devices[i].id, dname = devices[i].info['name'], description = ((devices[i].info['description']) ? devices[i].info['description'] : ''), title = (description != '') ? description : dname;
            var content = "<span style=''>"+ dname + "</span>" + "&ensp;<span class='badge badge-info'>" + description + "</span>" + "<br><span style='color: #BBBBBB; font-size: 0.8em;'>" + did + "</span>";
            $('#task_provider_add').append('<option title="' + title + '" value="' + did + '" data-content="'+ content + '" data-name="' + dname + '" data-description="' + description + '"></option>');
        }
        $('#task_provider_add').selectpicker('refresh');
    });

    $(document).on('click', '.cell-btn-delete', function (e) {  // delete member from task
        var btn = $(this), target = btn.data('target'), id = btn.attr('task-id'), tid = btn.data('id'), user = btn.attr('data-id'), jq = function (myid) {
            return "#" + myid.replace(/(:|\.|\[|\]|,|=|@)/g, "\\$1");
        };

        bootbox.confirm({
            'title': langDict['aruYouSure'],
            'message': langDict['doYouWantDelete'] + '&nbsp;' + user + ' ?',
            'buttons': {
                'cancel': {'label': '<i class="fa fa-times"></i> ' + langDict['cancel']},
                'confirm': {'label': '<i class="fa fa-check"></i> ' + langDict['apply']}
            },
            'callback': function (confirm) {
                if (confirm) {
                    var data = $('#task_tree').jstree('get_node', 'task_task_' + id).original.more;
                    var payload = {'id': id};
                    if (target == 'member') payload['member'] = tid;
                    else payload['provider'] = tid;

                    ajax('PUT', '/agent/api', data_format('/api/group/task/'+target, 0, 'DELETE', payload, null), function (a) {
                        if (a.error) {
                            $.growl.error({message: a.error});
                        } else {
                            $('#task_tree').jstree('deselect_all');
                            $('#task_tree').jstree('delete_node', 'task_' + data.id + '_'+ target + '_' + user);

                            var _count = data.members.length;
                            while (_count > 0) {
                                _count--;
                                if (data.members[_count].id == user) {
                                    data.members.splice(_count, 1);
                                    break;
                                }
                            }
                            $.growl.notice({message: langDict.wasDeleted});
                        }
                    });
                }
            }
        });
    });

    $(document).on('click', '.cell-btn-manage', function (e) {  // task manage
        var btn = $(this), id = btn.attr('data-id'), node = $('#task_tree').jstree('get_node', 'task_task_' + id),
            data = node.original.more, member = '', provider_ = '', provider = [], notification_ = '';
        object.node.task_id = btn.attr('data-id');
        object.node.modified = false;

        $('#task_apply').hide();
        $('#task_reset').hide();
        $('#task_delete').show();
        $('#task_name_edit').show();
        $('#isTask').show();

        $('#task_name').val(data.description).attr('data-id', data.id);
        $('#task_dept').val(data.group).attr('data-id', data.groupId);

        $('#user_tree').jstree('deselect_all');
        $('#group_tree').jstree('deselect_all');

        $('#group_tree').jstree('select_node', 'group_group_' + data.groupId);

        for (var i in data.members) {
            $('#user_tree').jstree('select_node', 'user_user_' + data.members[i].id);
            member += data.members[i].id + ', ';
        }
        member.length && (member = member.slice(0, -2));
        $('#task_member').val(member);

        $('#provider-list').empty();
        for (var i in data.providers) {
            provider.push(data.providers[i].id);
            $('#provider-list').append( gen_provider_card(data.providers[i]) );
        }
        $('.provider-card').each(function () {provider_ += $(this).data('title') + ', ';});
        $('#task_provider').val(provider_);
        $('#task_provider_add').val(provider).selectpicker("refresh");

        $('#notification-list').empty();
        for (var i in data.notifications) $('#notification-list').append(gen_nofity_card(data.notifications[i]));
        $('.notification-card').each(function () {notification_ += ($(this).data('title').length > 0) ? ($(this).data('title') + ', ') : '';});
        $('#task_notification').val(notification_);

        $('#task_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });

    $('#task_add').on('click', function (e) {
        object.node.task_id = null;
        $('#task_name').val('').attr('data-id', '');
        $('#task_dept').val('').attr('data-id', '');
        $('#task_member').val('').attr('data-id', '');
        $('#task_provider').val('').attr('data-id', '');
        $('#task_notification').val('').attr('data-id', '');

        $('#user_tree').jstree('deselect_all');
        $('#group_tree').jstree('deselect_all');

        $('#task_apply').show();
        $('#task_reset').show();
        $('#task_delete').hide();
        $('#task_name_edit').hide();
        $('#isTask').hide();

        $('#task_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });

    $(document).on('click', '#task_apply,#task_reset,#task_delete,#task_close', function (e) {
        var node = $('#task_tree').jstree('get_node', 'task_task_' + $('#task_name').attr('data-id')),
            data = {'id': '', 'description': '', 'group': '', 'groupId': ''};
        switch (e.target.id) {
            case 'task_apply':
                var obj = {'description': $('#task_name').val(), 'groupId': $('#task_dept').attr('data-id')};

                if (obj.description.length == 0) {
                    $.growl.warning({message: langDict.noShareName});
                } else if (obj.groupId.length == 0) {
                    $.growl.warning({message: langDict.noParent});
                } else {
                    $('#task_apply').button('loading');
                    $('#task_reset').button('loading');
                    $('#task_delete').button('loading');
                    $('#task_close').button('loading');

                    ajax('PUT', '/agent/api', data_format('/api/group/task', 0, 'POST', obj, null), function (a) {
                        if (a.error) {
                            $.growl.error({message: a.error});
                        } else {
                            $.growl.notice({message: langDict.wasCreated});
                            object.node.modified = true;
                            object.node.task_id = a.id;
                            task_refresh();

                            $('#task_apply').button('reset');
                            $('#task_reset').button('reset');
                            $('#task_delete').button('reset');
                            $('#task_close').button('reset');

                            $('#task_apply').hide();
                            $('#task_reset').hide();
                            $('#task_delete').show();
                            $('#isTask').show();
                        }
                    });
                }
                break;

            case 'task_reset':
                $('#task_name').val('').attr('data-id', '');
                $('#task_dept').val('').attr('data-id', '');
                break;

            case 'task_delete':
                node && ($('#task_modal').hide(), bootbox.confirm({
                    'title': langDict['aruYouSure'],
                    'message': langDict['doYouWantDelete'] + '&nbsp;' + node.original.more.description + ' ?',
                    'buttons': {
                        'cancel': {'label': '<i class="fa fa-times"></i> ' + langDict['cancel']},
                        'confirm': {'label': '<i class="fa fa-check"></i> ' + langDict['apply']}
                    },
                    'callback': function (confirm) {
                        $('#task_modal').show();
                        if (confirm) {
                            var id = node.original.more.id;

                            $('#task_apply').button('loading');
                            $('#task_reset').button('loading');
                            $('#task_delete').button('loading');
                            $('#task_close').button('loading');

                            ajax('PUT', '/agent/api', data_format('/api/group/task', 0, 'DELETE', {'id': id}, null), function (a) {
                                if (a.error) {
                                    $.growl.error({message: a.error});
                                } else {
                                    $('#task_tree').jstree('deselect_all');
                                    $('#task_tree').jstree('delete_node', 'task_task_' + id);
                                    $('#task_modal').modal('hide');

                                    $.growl.notice({message: langDict.wasDeleted});
                                }

                                $('#task_apply').button('reset');
                                $('#task_reset').button('reset');
                                $('#task_delete').button('reset');
                                $('#task_close').button('reset');
                            });
                        }
                    }
                }));
                break;
        }
    });

    $('#task_modal').on('hidden.bs.modal', function (e) {
        if(object.node.modified) task_refresh();
    });

    $('#select_group_modal, #select_user_modal').on('shown.bs.modal', function (e) {
        var _tree = e.target.id == 'select_user_modal' ? '#user_tree' : '#group_tree';
        $(_tree).find('.jstree-clicked:eq(0)')[0] && $(_tree).find('.jstree-clicked:eq(0)')[0].scrollIntoView();
    });

    $('#select_group_modal, #select_user_modal, #select_provider_modal, #select_notification_modal').on('hidden.bs.modal', function (e) {
        var str = '';
        switch (e.target.id) {
            case 'select_provider_modal':
                $('.provider-card').each(function () {str += $(this).data('title') + ', ';});
                $('#task_provider').val(str);
                break;
            case 'select_notification_modal':
                $('.notification-card').each(function () {str += ($(this).data('title').length > 0) ? ($(this).data('title') + ', ') : '';});
                $('#task_notification').val(str);
                break;
            case 'select_user_modal':
                var selected = $('#user_tree').jstree('get_selected');
                for (var i in selected) {
                    var n = $('#user_tree').jstree().get_node(selected[i]).original;
                    (n.icon != icons.users) && (str += n.more.id + ', ');
                }
                str.length && (str = str.slice(0, -2));
                $('#task_member').val(str);
                break;
        }
        $('#task_modal').show();
    });

    $('.select-modal').on('click', function () {
        var target = $(this).data('target');
        $('#task_modal').hide();
        $('#select_'+target+'_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });

    $('[id$=_search_btn]').on('click', function (e) {
        var btn = $(this), tree = $('#' + btn.attr('id').split('_')[0] + '_tree'),
            val = btn.closest('.input-group').find('input').val();
        val && (btn.button('loading'), setTimeout(function () {
            try {
                tree.jstree(true).search(val);
                tree.find('.jstree-search:eq(0)')[0].scrollIntoView();
            } catch (e) {
                $.growl.warning({message: langDict.notFound});
            }
            btn.button('reset');
        }, 300));
    });

    $("#task_name_modify").on('click', function () {
        var obj = {"id": object.node.task_id, "description": $('#task_name').val().trim()};
        ajax('PUT', '/agent/api', data_format('/api/group/task', 0, 'PUT', obj, null), function (a) {
            if (a.error) {
                $.growl.error({message: a.error});
            } else {
                $.growl.notice({message: langDict.wasModified});
                object.node.modified = true;
            }
        });
    });

    $('#task_provider_add').on('changed.bs.select', function (e, clickedIndex, newValue, oldValue) {
        var opt = this.options[clickedIndex], payload = { "id": object.node.task_id, "provider": opt.value } ,method = 'DELETE';
        if(newValue) method = 'POST';
        ajax('PUT', '/agent/api', data_format('/api/group/task/provider', 0, method, payload, null), function (a) {
            if(a.error)
                $.growl.error({message: a.error});
            else {
                $.growl.notice({message: (method == 'POST') ? langDict.wasCreated : langDict.wasDeleted});
                object.node.modified = true;
                if(method == 'POST'){
                    var data = {'id': opt.value , 'info' : {'name': opt.dataset.name, 'description':  opt.dataset.description}};
                    $('#provider-list').append(gen_provider_card(data));
                }else{
                    $("#provider_"+opt.value).remove();
                }

            }
        });
    });

    $(document).on('click', '.provider_remove', function (e){
        var btn = $(this), payload = { "id": object.node.task_id, "provider": $(this).data('id') }
        ajax('PUT', '/agent/api', data_format('/api/group/task/provider', 0, 'DELETE', payload, null), function (a) {
            if(a.error)
                $.growl.error({message: a.error});
            else {
                $.growl.notice({message: langDict.wasDeleted});
                object.node.modified = true;
                btn.parents(".provider-card").remove();
                $('#task_provider_add').find('[value='+payload['provider']+']').prop('selected', false);
                $('#task_provider_add').selectpicker("refresh");
            }
        });
    });

    $('#notify_add').on('click', function () {
        $('#notify_container').toggle("slide", {direction: "up"});
    });

    $('#notification_add').on('click', function () {
        var payload = { "id": object.node.task_id }, condition = true, type = ["", "line", "telegram"];
        $('#notification_to').val().trim().length && (payload['to'] = $('#notification_to').val().trim());
        $('#notification_type').val().length && (payload['type'] = parseInt($('#notification_type').val()));
        $('#notification_description').val().length && (payload['description'] = $('#notification_description').val());
        if (!payload.to) {
            $.growl.warning({message: langDict.noKey});
        } else{
            ajax('PUT', '/agent/api', data_format('/api/group/task/notification', 0, 'POST', payload, null), function (a) {
                if(a.error)
                    $.growl.error({message: a.error});
                else {
                    $.growl.notice({message: langDict.wasCreated});
                    object.node.modified = true;
                    $('#notification-list').append(gen_nofity_card(payload));
                    $('#notification_to').val("");
                    $('#notification_type').val(1).selectpicker("refresh");
                    $('#notification_description').val("");
                }
            });
        }
    });

    $(document).on('click', '.notification_remove', function (e){
        var btn = $(this), payload = { "id": object.node.task_id, "to": $(this).data('to'), "type": $(this).data('type') };
        ajax('PUT', '/agent/api', data_format('/api/group/task/notification', 0, 'DELETE', payload, null), function (a) {
            if(a.error)
                $.growl.error({message: a.error});
            else {
                $.growl.notice({message: langDict.wasDeleted});
                object.node.modified = true;
                btn.parents(".notification-card").remove();
            }
        });
    });
});