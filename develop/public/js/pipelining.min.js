$.fn.dataTable.pipeline = function (conditions, response) {
    var api = '/agent/videos';
    conditions.url == '/api/va/je/event/search' && (api = '/agent/va_events');
    conditions.url == '/api/va/bovia/fr/event/search' && (api = '/agent/fr_events');
    conditions.url == '/api/va/bovia/fr/human/search' && (api = '/agent/fr_human');
    conditions.url == '/api/va/bovia/lpr/event/search' && (api = '/agent/lpr_events');
    conditions.url == '/api/va/bovia/lpr/vehicle/search' && (api = '/agent/lpr_vehicle');
    conditions.url == '/api/va/bovia/lpr/event/reports' && (api = '/agent/lpr_report');
    conditions.url == '/api/va/bovia/or/snapshot/search' && (api = '/agent/or_snapshot');
    var conf = {
        'method': 'PUT',
        'url': api,
        'pages': 1,
        'data': conditions
    };
    var cacheLower = -1, cacheUpper = null, cacheLastRequest = null, cacheLastJson = null;
    return function (request, drawCallback, settings) {
        var ajax = false;
        var requestStart = request.start;
        var drawStart = request.start;
        var requestLength = request.length;
        var requestEnd = requestStart + requestLength;
        if (settings.clearCache) {
            ajax = true;
            settings.clearCache = false;
        } else if (cacheLower < 0 || requestStart < cacheLower || requestEnd > cacheUpper) {
            ajax = true;
        } else if (JSON.stringify(request.order) !== JSON.stringify(cacheLastRequest.order) ||
            JSON.stringify(request.columns) !== JSON.stringify(cacheLastRequest.columns) ||
            JSON.stringify(request.search) !== JSON.stringify(cacheLastRequest.search)) {
            ajax = true;
        }
        cacheLastRequest = $.extend(true, {}, request);
        if (ajax) {
            if (requestStart < cacheLower) {
                requestStart = requestStart - (requestLength * (conf.pages - 1));
                (requestStart < 0) && (requestStart = 0);
            }
            cacheLower = requestStart;
            cacheUpper = requestStart + (requestLength * conf.pages);
            request.start = requestStart;
            request.length = requestLength * conf.pages;
            if ($.isFunction(conf.data)) {
                var d = conf.data(request);
                d && $.extend(request, d);
            } else if ($.isPlainObject(conf.data)) {
                $.extend(request, conf.data);
            }
            settings.jqXHR = $.ajax({
                'type': conf.method,
                'url': conf.url,
                'data': request,
                'cache': false,
                'success': function (res) {
                    cacheLastJson = $.extend(true, {}, res);
                    (cacheLower != drawStart) && res.data.splice(0, drawStart - cacheLower);
                    (requestLength >= -1) && res.data.splice(requestLength, res.data.length);
                    drawCallback(res);

                    //console.log(res);

                }, 'error': function (err) {
                    err.status == 401 && (window.location = '/logout?r=relogin');
                    $.growl.error({message: err.responseJSON ? err.responseJSON.error : err.statusText});
                    $('.dataTables_processing').hide();
                }, 'complete': function (res) {
                    res.responseJSON ? response(res.responseJSON) : response({'error': res.statusText});
                }
            });
        } else {
            json = $.extend(true, {}, cacheLastJson);
            json.draw = request.draw;
            json.data.splice(0, requestStart - cacheLower);
            json.data.splice(requestLength, json.data.length);

            //console.log(json)

            drawCallback(json);
        }
    }
};
$.fn.dataTable.Api.register('clearPipeline()', function () {
    return this.iterator('table', function (settings) {
        settings.clearCache = true;
    });
});
var video_search = function (table, conditions, callback) {
    table.clearPipeline();
    table.ajax.url(
        $.fn.dataTable.pipeline(conditions, function (a) {
            callback(a);
        })
    ).load();
};