/**
 * Created by Cloud on 2017/5/22.
 */

$(document).ready(function () {
    loading(true);

    const sheet = document.createElement('style');
    sheet.innerHTML = `
        .p-1 {padding: .05rem!important;}
        video::-webkit-media-controls-timeline {display: none;}
        video::-webkit-media-controls-current-time-display{display: none;}
        video::-webkit-media-controls-time-remaining-display {display: none;}
        video::-webkit-media-controls-toggle-closed-captions-button {display: none;}
        
        .vms-tab video {border-radius: 4px; object-fit: fill;}
        
        #tree {height: ${$(window).height() * 0.7}px;}
        #_tree {height: ${$(window).height() * 0.7}px;}
        
        .cell-input-title {margin-left: 5px;margin-bottom: -5px; display:inline-block; position:relative; cursor: pointer;}
        .cell-input-title .form-control {background-color: transparent; border: none; padding-left: 1.375rem;cursor: pointer;}
        .cell-input-title .vms-unlock, .cell-input-title .vms-lock {position: absolute; z-index: 2; display: block; height: 2.375rem; line-height: 2.375rem; text-align: center; pointer-events: none; padding-top: 0.1em;}`;

    document.body.appendChild(sheet);

    var isFullScreen = false, last_cell = 1, content = $('[name="_user"]').attr('content'),
        site = $('[name="_site"]').attr('content'),
        saveData = {'version': '0.0.3', 'settings': {}};
    saveData.settings[site] = {};  // initialing, default, nothing selected
    saveData.settings[site][content] = [];  // initialing, default, nothing selected

    try {
        var _sd = JSON.parse(window.localStorage.vms);
        if (_sd.version < saveData.version) window.localStorage.vms = JSON.stringify(saveData);
        if (!(site in _sd.settings)) {
            _sd.settings[site] = {};
            _sd.settings[site][content] = [];
            window.localStorage.vms = JSON.stringify(_sd);
        }
        saveData = JSON.parse(window.localStorage.vms);

        saveData.cells || (saveData.cells = 1);
        saveData.rows || (saveData.rows = 1);

        $('#cells').val(saveData.cells);
        $('#rows').val(saveData.rows);
        $('#nums').html(saveData.cells * saveData.rows);
    } catch (e) {
        window.localStorage.vms = JSON.stringify(saveData);
    }

    $(document).on('fullscreenchange mozfullscreenchange webkitfullscreenchange msfullscreenchange', function () {
        (document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen || document.msFullscreenElement) ?
            isFullScreen = true : isFullScreen = false;
    });

    const aspect = function (w, h) {
        return (w ? (w * 9 / 16) : (h * 16 / 9));
    }, resizing = function () {

        const width = $('main div h2').width() + 10, height = window.innerHeight - 145,
            cell = parseInt($('#cells').val()),
            row = parseInt($('#rows').val());

        //title height: +50px
        //group width: +10px
        const padding = 5, heading = 50;
        let container_w = ((width - (padding * cell)) / cell), container_h = aspect(container_w) + heading;

        while ((container_h * row) > height) {
            container_w -= 1;
            container_h = aspect(container_w) + heading;
        }

        const playerW = parseInt(container_w - padding) - 2, playerH = parseInt(aspect(playerW));
        container_h = playerH + heading;

        $('.vms-tab video').each(function () {
            $(this).css({'width': `${playerW}px`, 'height': `${playerH}px`});
            $(this).closest('.d-flex').css('height', `${container_h}px`);
            $(this).closest('.d-flex').find('.cell-input-title').width(playerW);
        });
    }, dynamicPlayer = function () {
        const cell = parseInt($('#cells').val()),
            row = parseInt($('#rows').val()),
            num = cell * row;

        while ($('#vms-tab video').length) {
            const video = $('#vms-tab video:last'), parent = video.closest('.input-group'),
                vid = video.attr('data-id');
            if (vid && object.player[vid]) {

                object.player[vid].close();
                delete object.player[vid];
            }
            video.closest('.d-flex').remove();
            if (parent.find('video').length == 0) parent.remove();
        }

        for (let i = 0; i < num; i++) {
            const title = `<div class="form-group cell-input-title" style="width: 16px"><span class="fas vms-unlock" style=""></span><input type="text" class="form-control" disabled></div>`,
                flex = `<div class="d-flex flex-column" style="height: 9px">
                            <div class="p-1">${title}<div>
                            <div class="p-1"><video poster="/img/default.jpg" controls muted autoplay crossorigin width="16" height="9" error="true"></div>
                       </div>`;
            if (i % cell == 0) $('.vms-tab').append(`<div class="input-group"></div>`);
            $('.vms-tab .input-group:last').append(flex);
        }
        resizing();
    };

    var object = {'tree': [], '_tree': [], 'liveList': {}, 'player': {}}, jq = function (myid) {
        return "#" + myid.replace(/(:|\.|\[|\]|,|=|@)/g, "\\$1");
    }, gen_input = function (id, value) {
        return '<div class="input-group"><input type="text" class="form-control form-control-sm" data-id="' + id + '" value="' + value + '" disabled></div>';
    }, recursive = function (origin, prefix) {
        var data = {
            'text': origin.group.name,
            'icon': icons.users,
            'state': {'selected': false},
            'more': origin.group,
            'children': [],
            'id': md5(prefix + 'group_' + origin.group.id),
            'a_attr': {'class': 'text-primary'}
        };
        users = origin.userList;
        data.data = {
            'id': origin.group.name,
            'name': '',
            'title': ''
        };
        if (users && users.length) {
            /*-------- user sorting --------*/
            users = users.sort(function (a, b) {
                return (a.id > b.id) ? 1 : ((b.id > a.id) ? -1 : 0);
            });
            /*-------- end sort --------*/
            for (var i in users) {
                var user = users[i];
                //let format like live data
                user.name = user.info.name;
                user.videoTile = user.video.title;

                var obj = {
                    'text': user.id,
                    'icon': icons.offline,
                    'state': {'selected': false},
                    'more': user,
                    'id': md5(prefix + 'live_' + user.id),
                    'a_attr': {'class': 'text-secondary'},
                    'data': {
                        'id': user.id,
                        'name': gen_input(user.id, user.info.name),
                        'title': gen_input(user.id, user.video.title)
                    }
                };
                data.children.push(obj);
            }
        }
        /*-------- group sorting --------*/
        var chld = origin['children'];
        chld && (chld = chld.sort(function (a, b) {
            return (a.group.name > b.group.name) ? 1 : ((b.group.name > a.group.name) ? -1 : 0);
        }));
        /*-------- end sort --------*/
        for (var i in chld) data['children'].push(recursive(chld[i], prefix));
        return data;
    }, get_live_list = function (cb) {
        var obj = {'task': [], 'live': []}, count = 0;
        ajax('PUT', '/agent/api', data_format('/api/task/live/list', 0, 'GET', {}, null), function (a) {
            a.error || (obj.task = a.liveList);
            count += 1;
            count == 2 && cb(obj);
        });
        ajax('PUT', '/agent/api', data_format('/api/live/list', 0, 'GET', {}, null), function (a) {
            a.error || (obj.live = a.liveList);
            count += 1;
            count == 2 && cb(obj);
        });
    }, _polling = function (cb) {
        get_live_list(function (a) {

            var _tmpList = {};

            for (var field in a) for (var i in a[field]) {
                //# for no hide offline mode
                var nid = md5('live_' + a[field][i].id);
                if (field == 'task') nid = md5('task_' + a[field][i].taskId + '_' + a[field][i].id);

                var live = a[field][i], node = $('#user_tree').jstree('get_node', nid);
                _tmpList[nid] = live;

                if (node) {
                    node.original.more = live;
                    node.icon = icons.online;
                    node.original.icon = icons.online;

                    if (node.original.more.name != live.name) node.data.name = gen_input(live.id, live.name);
                    if (node.original.more.videoTitle != live.videoTitle) node.data.title = gen_input(live.id, live.videoTitle);

                    $('#user_tree').jstree('redraw_node', nid);
                    $('#user_tree').jstree('_open_to', nid);
                }

                //# for hide offline mode
                var _nid = md5('_live_' + a[field][i].id), parent = md5('_group_' + a[field][i].groupId);
                if (field == 'task') {
                    parent = md5('_task_' + a[field][i].taskId);
                    _nid = md5('_task_' + a[field][i].taskId + '_' + a[field][i].id);
                }

                var _node = $('#hide_tree').jstree('get_node', _nid);

                if (_node) {
                    if (_node.original.more.name != live.name) _node.data.name = gen_input(live.id, live.name);
                    if (_node.original.more.videoTitle != live.videoTitle) _node.data.title = gen_input(live.id, live.videoTitle);

                    _node.original.more = live;

                    $('#hide_tree').jstree('redraw_node', _nid);
                    $('#hide_tree').jstree('_open_to', _nid);
                } else {
                    var obj = {
                        'text': live.id,
                        'icon': icons.online,
                        'state': {'selected': es5_includes(saveData.settings[site][content], nid)},
                        'id': _nid,
                        'more': live,
                        'a_attr': {'class': 'text-secondary'},
                        'data': {
                            'id': live.id,
                            'name': gen_input(live.id, live.name),
                            'title': gen_input(live.id, live.videoTitle)
                        }
                    };

                    $('#hide_tree').jstree().create_node(parent, obj, "last", function () {
                        $('#hide_tree').jstree('_open_to', _nid);
                    });
                }
            }
            // drop offline channel
            for (var nid in object.liveList) if (!(nid in _tmpList)) {

                var data = object.liveList[nid], _nid = md5('_live_' + data.id);
                if ('taskId' in data) _nid = md5('_task_' + data.taskId + '_' + data.id);

                $('#hide_tree').jstree().delete_node(_nid, function () {
                });

                var node = $('#user_tree').jstree('get_node', nid);

                if (node) {
                    node.icon = icons.offline;
                    node.original.icon = icons.offline;

                    $('#user_tree').jstree('redraw_node', nid);
                }
            }

            object.liveList = _tmpList;

            setTimeout(_polling, 3000);
            cb && cb();
        });
    }, _player_watchdog = function () {
        var self = saveData.settings[site][content];

        const not_playing = function () {

            for (var i in self) {
                var node = object.liveList[self[i]], target = null;

                if (node) if ($('video[data-id="' + node.id + '"]').length == 0) {
                    target = node;
                    break;
                }
            }
            return target;
        };

        $('video').each(function () {
            // get player state
            const player = $(this), titles = player.closest('.d-flex');

            if (titles.find('span').hasClass('vms-unlock')) {

                const live = not_playing();

                if (live) {

                    if (object.player[live.id]) {
                        object.player[live.id].heartbeat += 1;

                        if (object.player[live.id].heartbeat >= 5) {
                            player.attr('error', 'true');
                            console.warn(`${player.attr('data-id')} offline`);
                            object.player[live.id].heartbeat = 0;
                        }
                    }

                    if (live && player.attr('error') == 'true') {

                        const last = player.attr('data-id');

                        player.removeAttr('error');
                        player.attr('poster', live.snapshotUrl);
                        player.attr('data-id', live.id);

                        if (live.videoTitle)
                            titles.find('input[type="text"]').val(live.videoTitle);
                        else
                            titles.find('input[type="text"]').val(live.id);

                        if (last) {
                            object.player[last].close();
                            delete object.player[last]
                        } else {
                            object.player[live.id] = new mse(player[0], live.mseUrl);
                            object.player[live.id].startup();
                        }
                    }

                }
            }
        });
        setTimeout(_player_watchdog, 1000);
    };

    ajax('PUT', '/agent/api', data_format('/api/task/list', 0, 'GET', {}, null), function (task) {
        if (!task.error) for (var i in task) {
            var member = [];

            for (var j in task[i].member) member.push({
                'text': task[i].member[j].id,
                'icon': icons.offline,
                'state': {'selected': false},
                'id': md5('task_' + task[i].id + '_' + task[i].member[j].id),
                'more': task[i].member[j],
                'a_attr': {'class': 'text-secondary'},
                'data': {
                    'id': task[i].member[j].id,
                    'name': gen_input(task[i].member[j].id, task[i].member[j].info.name),
                    'title': gen_input(task[i].member[j].id, task[i].member[j].video.title)
                }
            });

            object.tree.push({
                'text': task[i].description,
                'icon': icons.share,
                'state': {'selected': false},
                'more': task[i],
                'children': member,
                'id': md5('task_' + task[i].id)
            });

            object._tree.push({
                'text': task[i].description,
                'icon': icons.share,
                'state': {'selected': false},
                'more': task[i],
                'children': [],
                'id': md5('_task_' + task[i].id)
            });
        }

        ajax('PUT', '/agent/api', data_format('/api/group/tree', 0, 'GET', {}, null), function (a) {
            a.error && (a = []);

            object._tree.push(recursive(a, '_'));

            $('#hide_tree').jstree({
                "plugins": ["wholerow", "changed", "search", "grid", 'ui', 'checkbox'],
                "search": {"show_only_matches": false, "show_only_matches_children": false},
                'core': {
                    'data': object._tree,
                    'themes': {
                        'name': 'proton',
                        'responsive': true,
                        'variant': 'large'
                    }, "dnd": {
                        'copy_modifier': false,
                        'check_while_dragging': true
                    }, 'check_callback': true
                },
                "grid": {
                    columns: [
                        {'header': '&nbsp;', 'value': 'id', 'width': '40%'},
                        {'header': langDict.name, 'value': 'name', 'width': '30%'},
                        {'header': langDict.title, 'value': 'title', 'width': '30%'}
                    ],
                    resizable: true,
                    width: '100%',
                }
            });
        });

        ajax('PUT', '/agent/api', data_format('/api/user/tree', 0, 'GET', {}, null), function (a) {
            if (a.error) $.growl.error({message: a.error}); else {

                object.tree.push(recursive(a, ''));

                $('#user_tree').jstree({
                    "plugins": ["wholerow", "changed", "search", "grid", 'ui', 'checkbox'],
                    "search": {"show_only_matches": false, "show_only_matches_children": false},
                    'core': {
                        'data': object.tree,
                        'themes': {
                            'name': 'proton',
                            'responsive': true,
                            'variant': 'large'
                        }, "dnd": {
                            'copy_modifier': false,
                            'check_while_dragging': true
                        }, 'check_callback': true
                    },
                    "grid": {
                        columns: [
                            {'header': '&nbsp;', 'value': 'id', 'width': '40%'},
                            {'header': langDict.name, 'value': 'name', 'width': '30%'},
                            {'header': langDict.title, 'value': 'title', 'width': '30%'}
                        ],
                        resizable: true,
                        width: '100%',
                    }
                }).bind("loaded.jstree", function (event, data) {
                    try {
                        $(this).jstree('open_node', 'group_' + $('[name="_group"]').attr('content').split('_')[1]);
                        var _count = saveData.settings[site][content].length;

                        while (_count > 0) {
                            _count--;
                            if (!($(this).jstree('select_node', saveData.settings[site][content][_count]))) {
                                console.warn('remove not exists account: ' + saveData.settings[site][content][_count]);
                                saveData.settings[site][content].splice(_count, 1);
                            }
                        }
                        window.localStorage.vms = JSON.stringify(saveData);
                    } catch (e) {

                    }

                    _polling(function () {
                        loading(false);
                        dynamicPlayer();
                        _player_watchdog();
                    });
                });
            }
        });
    });

    $('button[id="users_apply"]').on('click', function (e) {
        var selected = [], temp = [], tree;

        if ($('#tree').is(':visible')) {
            selected = $('#user_tree').jstree('get_selected');
            tree = $('#user_tree');
            $('#hide_tree').jstree('deselect_all');
        } else if ($('#_tree').is(':visible')) {
            selected = $('#hide_tree').jstree('get_selected');
            tree = $('#hide_tree');
            $('#user_tree').jstree('deselect_all');
        }

        for (var i in selected) {
            var node = tree.jstree('get_node', selected[i]);
            if (node && es5_includes([icons.offline, icons.online], node.icon)) {

                var nid = md5('live_' + node.original.more.id), _nid = md5('_live_' + node.original.more.id);

                if ('taskId' in node.original.more) {
                    nid = md5('task_' + node.original.more.taskId + '_' + node.original.more.id);
                    _nid = md5('_task_' + node.original.more.taskId + '_' + node.original.more.id);
                }

                if ($('#tree').is(':visible'))
                    $('#hide_tree').jstree('select_node', _nid);
                else if ($('#_tree').is(':visible'))
                    $('#user_tree').jstree('select_node', nid);

                temp.push(nid);
            }
        }
        // try find in playing and drop
        for (var i in saveData.settings[site][content]) if (!es5_includes(temp, saveData.settings[site][content][i])) {
            var node = $('#user_tree').jstree('get_node', saveData.settings[site][content][i]);
            if (node) {
                var player = $('video[data-id="' + node.original.more.id + '"]');
                if (player.length) {
                    player.attr({'data-id': '', 'src': '', 'error': 'true', 'poster': '/img/default.jpg'});

                    player.trigger('pause');
                    if (object.player[node.original.more.id]) {
                        object.player[node.original.more.id].close();
                        delete object.player[node.original.more.id];
                    }
                }
            }
            player.closest('.d-flex').find('input[type=text]').val('');
            player.closest('.d-flex').find('span').attr('class', 'fas vms-unlock');
        }
        saveData.settings[site][content] = temp;
        window.localStorage.vms = JSON.stringify(saveData);
    });

    $(document).on('click', '.cell-input-title', function (e) {
        var icon = $(this).parent().find('span');
        if (icon.hasClass('vms-unlock')) {
            icon.removeClass('vms-unlock').addClass('vms-lock');
        } else {
            icon.removeClass('vms-lock').addClass('vms-unlock');
        }
        return false;
    });
    $('button[id=selection]').on('click', function (e) {
        $('#user_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });
    $('input[id="hideOffline"]').on('click', function (e) {
        var hide = $(this).prop('checked');

        if (hide) {
            $('#tree').addClass('d-none');
            $('#_tree').removeClass('d-none');
        } else {
            $('#tree').removeClass('d-none');
            $('#_tree').addClass('d-none');
        }
    });
    $('[id$=_search_btn]').on('click', function (e) {
        var btn = $(this), val = btn.closest('.input-group').find('input').val(),
            tree = $('#tree').hasClass('d-none') ? $('#hide_tree') : $('#user_tree');

        val && (btn.button('loading'), setTimeout(function () {
            try {
                tree.jstree(true).search(val);
                tree.find('.jstree-search:eq(0)')[0].scrollIntoView();
            } catch (e) {
                $.growl.warning({message: langDict.notFound});
            }
            btn.button('reset');
        }, 300));
    });

    $(window).resize(function (e) {
        isFullScreen || resizing();
    });

    $('#cells, #rows').on('change', function (e) {
        try {
            saveData.cells = parseInt($('#cells').val());
            saveData.rows = parseInt($('#rows').val());
            window.localStorage.vms = JSON.stringify(saveData);

            $('#nums').html(saveData.cells * saveData.rows);

        } catch (e) {
            // console.error(e);
        }
        dynamicPlayer();
    });
});
