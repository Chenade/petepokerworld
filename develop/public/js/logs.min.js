$(document).ready(function () {
    $('#user_tree').parent().height($(window).height() * 0.7);

    var object = {'users': [], 'selectpicker': null}, recursive = function (origin, onlyGroup, prefix) {
        var real_gid = prefix + '_group_' + origin.group.id, md5_gid = md5(real_gid);

        var group_node_id = md5(prefix + '_group_' + origin.group.id), data = {
            'text': origin.group.name,
            'icon': icons.users,
            'state': {'selected': false},
            'more': origin.group,
            'children': [],
            'id': md5_gid,
            'a_attr': {'class': 'text-primary'}
        };
        var users = [];
        if (!onlyGroup) {
            users = origin.userList;
            data.data = {
                'id': origin.group.name,
                'name': '',
                'title': ''
            };
        }
        if (users.length) {
            /*-------- user sorting --------*/
            users = users.sort(function (a, b) {
                return (a.id > b.id) ? 1 : ((b.id > a.id) ? -1 : 0);
            });
            /*-------- end sort --------*/
            for (var i in users) {
                var user = users[i], icon = icons.user, _class = 'text-secondary',
                    real_uid = prefix + '_user_' + user.id, md5_uid = md5(real_uid);

                user.name = user.info.name;
                user.gid = origin.group.id;
                user.group = origin.group.name;
                user.layer = origin.group.layer;

                var obj = {
                    'text': user.id,
                    'icon': icon,
                    'state': {'selected': false},
                    'more': user,
                    'id': md5_uid,
                    'a_attr': {'class': _class},
                    'data': {
                        'id': user.id,
                        'name': '<input type="text" class="form-control form-control-sm" value="' + user.name + '" readonly>',
                        'title': '<input type="text" class="form-control form-control-sm" value="' + user.video.title + '" readonly>'
                    }
                };
                data.children.push(obj);
            }
        }
        /*-------- group sorting --------*/
        var chld = origin['children'];
        chld && (chld = chld.sort(function (a, b) {
            return (a.group.name > b.group.name) ? 1 : ((b.group.name > a.group.name) ? -1 : 0);
        }));
        /*-------- end sort --------*/
        for (var i in chld) data['children'].push(recursive(chld[i], onlyGroup, prefix));
        return data;
    };

    ajax('PUT', '/agent/api', data_format('/api/user/tree', 0, 'GET', {}, null), function (a) {
        if (a.error) $.growl.error({message: a.error}); else {
            object.users = recursive(a, false, 'user');

            $('#user_tree').jstree({
                "plugins": ["wholerow", "changed", "grid", 'ui', 'checkbox', 'search'],
                'core': {
                    'data': object.users,
                    'themes': {'name': 'proton', 'responsive': true, 'variant': 'large'},
                    'check_callback': true
                },
                "grid": {
                    columns: [
                        {'header': '&nbsp;', 'value': 'id', 'width': '40%'},
                        {'header': langDict.name, 'value': 'name', 'width': '30%'},
                        {'header': langDict.title, 'value': 'title', 'width': '30%'}
                    ],
                    resizable: true,
                    width: '100%',
                }
            }).bind("loaded.jstree", function (event, data) {
                try {
                    $(this).jstree('open_node', md5('user_group_' + $('[name="_group"]').attr('content').split('_')[1]));
                } catch (e) {
                }
            });
        }
        loading(false);
    });

    var table1 = $('#access_log').DataTable({
        "dom": 'lfrtip',
        "lengthMenu": [10, 25, 50, 100],
        "order": [[0, 'desc']],
        "language": {"url": 'files/' + lang + '.json'},
        "iDisplayLength": 25,
        "columnDefs": [
            {"targets": [0], "visible": true, "searchable": true},  // level
            {"targets": [1], "visible": true, "searchable": true}, //user id
            {"targets": [2], "visible": false, "searchable": false},  //device id
            {"targets": [3], "visible": true, "searchable": true},  //target id
            {"targets": [4], "visible": true, "searchable": true},  //time
            {"targets": [5], "visible": true, "searchable": true},  //action
            {"targets": [6], "visible": true, "searchable": true},  //ip
            {"targets": [7], "visible": true, "searchable": true},  //content
        ]
    }), table2 = $('#resource_log').DataTable({
        "dom": 'lfrtip',
        "lengthMenu": [10, 25, 50, 100],
        "order": [[0, 'desc']],
        "language": {"url": 'files/' + lang + '.json'},
        "iDisplayLength": 25,
        "columnDefs": [
            {"targets": [0], "visible": true, "searchable": true},  // level
            {"targets": [1], "visible": true, "searchable": true}, //user id
            {"targets": [2], "visible": false, "searchable": false},  //device id
            {"targets": [3], "visible": true, "searchable": true},  //target id
            {"targets": [4], "visible": true, "searchable": true},  //start time
            {"targets": [5], "visible": true, "searchable": true},  //end time
            {"targets": [6], "visible": true, "searchable": true},  //action
            {"targets": [7], "visible": true, "searchable": true},  //ip
            {"targets": [8], "visible": true, "searchable": true},  //content
        ]
    });

    $('[id$=_search_btn]').on('click', function (e) {
        var btn = $(this), tree = $('#' + btn.attr('id').split('_')[0] + '_tree'),
            val = btn.closest('.input-group').find('input').val();
        val && (btn.button('loading'), setTimeout(function () {
            try {
                tree.jstree(true).search(val);
                tree.find('.jstree-search:eq(0)')[0].scrollIntoView();
            } catch (e) {
                $.growl.warning({message: langDict.notFound});
            }
            btn.button('reset');
        }, 300));
    });

    var start = moment().subtract(1, 'days'), end = moment(), reportrange = function (start, end) {
        $('.date-range-picker span').html(start.format('YYYY-MM-DD') + '&nbsp;~&nbsp;' + end.format('YYYY-MM-DD'));
    }, pickerLang = get_log_daterangepicker_lang(lang);
    reportrange(start, end);
    $('.date-range-picker').daterangepicker({
        startDate: start,
        endDate: end,
        ranges: pickerLang.ranges,
        timePicker: true,
        timePickerIncrement: 60,
        locale: pickerLang.locale,
    }, reportrange);

    $('#access_user,#access_target,#resource_user,#resource_target').on('show.bs.select', function (e, clickedIndex, isSelected, previousValue) {
        object.selectpicker = $(this);
        $('#user_tree').jstree(true).search('');
        $('#user_tree').jstree('deselect_all');

        var selected = object.selectpicker.val();

        for (var i in selected)
            $('#user_tree').jstree('select_node', md5('user_user_' + selected[i]));

        $('#select_user_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });

    $('#select_user_apply').on('click', function (e) {
        var selected = [], nodes = $('#user_tree').jstree('get_selected');

        object.selectpicker.empty();

        if (nodes) for (var i in nodes) {
            var node = $('#user_tree').jstree('get_node', nodes[i]).original;
            if (node && icons.user == node.icon) {
                selected.push(node.more.id);
            }
        }

        for (var i in selected) {
            object.selectpicker.append('<option selected="selected">' + selected[i] + '</option>');
        }

        object.selectpicker.selectpicker('refresh');
    });

    $('#access_btn, #resource_btn').on('click', function (e) {
        var api = (e.target.id).split('_')[0], btn = $(this);
        btn.button('loading');
        switch (api) {
            case 'access':
                var obj = {
                    'startTime': $('#access_time').data('daterangepicker').startDate.format('YYYY-MM-DDTHH:mm:ssZ'),
                    'stopTime': $('#access_time').data('daterangepicker').endDate.format('YYYY-MM-DDTHH:mm:ssZ')
                };
                $('#access_level').val().length && (obj['level'] = $('#access_level').val());
                $('#access_action').val().length && (obj['action'] = $('#access_action').val());
                $('#access_user').val().length && (obj['userId'] = $('#access_user').val());
                $('#access_target').val().length && (obj['targetId'] = $('#access_target').val());
                ajax('PUT', '/agent/logs', data_format('/api/group/log/search/access', 0, 'POST', obj, null), function (a) {
                    if (a.error) {
                        $.growl.error({message: a.error});
                    } else {
                        table1.clear();
                        table1.rows.add(a).draw(false);

                        table1.rows().every(function (rowindex) {
                            var start = this.cell({row: rowindex, column: 4}).data();

                            this.cell({
                                row: rowindex,
                                column: 4
                            }).data(moment(start).local().format('YYYY-MM-DD HH:mm:ss'));
                        });
                    }
                    btn.button('reset');
                });
                break;
            case 'resource':
                var obj = {
                    'startTime': $('#resource_time').data('daterangepicker').startDate.format('YYYY-MM-DDTHH:mm:ssZ'),
                    'stopTime': $('#resource_time').data('daterangepicker').endDate.format('YYYY-MM-DDTHH:mm:ssZ')
                };
                $('#resource_level').val().length && (obj['level'] = $('#resource_level').val());
                $('#resource_action').val().length && (obj['action'] = $('#resource_action').val());
                $('#resource_user').val().length && (obj['userId'] = $('#resource_user').val());
                $('#resource_target').val().length && (obj['targetId'] = $('#resource_target').val());
                ajax('PUT', '/agent/logs', data_format('/api/group/log/search/resource', 0, 'POST', obj, null), function (a) {
                    if (a.error) {
                        $.growl.error({message: a.error});
                    } else {
                        table2.clear();
                        table2.rows.add(a).draw(false);

                        table2.rows().every(function (rowindex) {
                            var start = this.cell({row: rowindex, column: 4}).data();
                            var end = this.cell({row: rowindex, column: 5}).data();

                            this.cell({
                                row: rowindex,
                                column: 4
                            }).data(moment(start).local().format('YYYY-MM-DD HH:mm:ss'));
                            this.cell({
                                row: rowindex,
                                column: 5
                            }).data(moment(end).local().format('YYYY-MM-DD HH:mm:ss'));
                        });
                    }
                    btn.button('reset');
                });
                break;
        }
    });
});