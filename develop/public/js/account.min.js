$(document).ready(function () {
    $('#user_tree').parent().height($(window).height() * 0.75);

    var object = {'user': [], 'group': [], 'roles': []};

    var gen_input = function (id, target, value, icon, disabled) {
        var placeholder = '';

        if (target == 'title') placeholder = langDict.title;
        else if (target == 'name') placeholder = langDict.name;

        return '<div class="input-group"><input type="text" placeholder="' + placeholder + '" class="form-control form-control-sm cell-input-' + target + '" data-id="' + id + '" value="' + value + '" ' + (disabled ? 'disabled' : '') + '><div class="input-group-append"> <button type="button" class="btn ' + (icon ? 'btn-outline-secondary' : 'btn-primary') + ' btn-sm cell-input-btn" data-loading-text="<span class=\'spinner-grow spinner-grow-sm\'></span>"><i class="' + (icon ? icon : 'fas fa-check') + '"></i></button></div></div>';
    }, gen_permission = function (permission) {
        var options = $('#edit_permission').find('option').clone(), _options = '';
        for (var j in options) if (options[j].value && permission[options[j].value]) {
            _options += options[j].text + ', ';
        }
        _options.length && (_options = _options.slice(0, -2));
        return _options;
    }, recursive = function (origin, onlyGroup, prefix) {
        var real_gid = prefix + '_group_' + origin.group.id, md5_gid = md5(real_gid);

        var group_node_id = md5(prefix + '_group_' + origin.group.id), data = {
            'text': origin.group.name,
            'icon': icons.users,
            'state': {'selected': false},
            'more': origin.group,
            'children': [],
            'id': md5_gid,
            'a_attr': {'class': 'text-primary'}
        };
        var users = [];
        if (!onlyGroup) {
            users = origin.userList;
            data.data = {
                'id': origin.group.name,
                'name': '',
                'title': '',
                'permission': '',
                'functional': '<div class="input-group d-flex justify-content-center"><button class="btn btn-sm btn-info cell-input-group" data-id="' + origin.group.id + '"><i class="fas fa-cog"></i></button></div>',
                'notification': '',
            };
        }
        if (users.length) {
            /*-------- user sorting --------*/
            users = users.sort(function (a, b) {
                return (a.id > b.id) ? 1 : ((b.id > a.id) ? -1 : 0);
            });
            // let manage and lock account to top
            var _users = [], _list = [];
            for (var i in users) if (is_manage(users[i].permission)) {
                _users.push(users[i]);
                _list.push(users[i].id);
            }
            for (var i in users) if (users[i].locked && !es5_includes(_list, users[i].id)) {
                _users.push(users[i]);
                _list.push(users[i].id);
            }
            for (var i in users) if (!es5_includes(_list, users[i].id)) _users.push(users[i]);
            users = _users;
            /*-------- end sort --------*/
            for (var i in users) {
                var user = users[i], icon = icons.user, _class = 'text-secondary',
                    real_uid = prefix + '_user_' + user.id, md5_uid = md5(real_uid);

                user.name = user.info.name;
                user.permission && is_manage(user.permission) && (icon = icons.manager, _class = '');
                user.locked && (icon = icons.lock, _class = 'text-danger');

                user.gid = origin.group.id;
                user.group = origin.group.name;
                user.layer = origin.group.layer;

                var _options = gen_permission(user.permission);

                var obj = {
                    'text': user.id,
                    'icon': icon,
                    'state': {'selected': false},
                    'more': user,
                    'id': md5_uid,
                    'a_attr': {'class': _class},
                    'data': {
                        'id': user.id,
                        'name': gen_input(user.id, 'name', user.name),
                        'title': gen_input(user.id, 'title', user.video.title),
                        'permission': gen_input(user.id, 'permission', _options, 'fas fa-list', true),
                        'functional': '<div class="input-group d-flex justify-content-center"><button class="btn btn-sm btn-info cell-input-user" data-id="' + user.id + '"><i class="fas fa-cog"></i></button></div>',
                        'notification': '<div class="btn-group d-flex">' +
                            '<button title="call" class="btn btn-sm btn-success call-btn" data-id="' + user.index + '" data-name="'+user.id+'"><i class="fas fa-phone"></i></button>' +
                            '<button title="streaming-up"   class="btn btn-sm btn-primary streaming-btn" data-id="' + user.index + '" data-action="streaming_up"><i class="fas fa-bell"></i></button>' +
                            '<button title="streaming-off" class="btn btn-sm btn-warning streaming-btn" data-id="' + user.index + '" data-action="streaming_off"><i class="fas fa-bell-slash"></i></button>' +
                            '</div>',
                    }
                };
                data.children.push(obj);
            }
        }
        /*-------- group sorting --------*/
        var chld = origin['children'];
        chld && (chld = chld.sort(function (a, b) {
            return (a.group.name > b.group.name) ? 1 : ((b.group.name > a.group.name) ? -1 : 0);
        }));
        /*-------- end sort --------*/
        for (var i in chld) data['children'].push(recursive(chld[i], onlyGroup, prefix));
        return data;
    }, edit_form = function (data) {
        $('#user_license_container').empty();

        if (data) {
            $('#user_modal').find('.modal-title').html(langDict.userInfo);
            $('#edit_enabled').prop('checked', data.enabled);
            $('#edit_enabled').prop('disabled',(data.id == $('#user-card-modal').data('id')));
            $('#edit_id').val(data.id).prop('disabled', 1);
            $('#edit_userReset').show();
            (data.id == $('#user-card-modal').data('id')) ? $('#edit_userDelete').hide() : $('#edit_userDelete').show();
            if(data['2faEnabled']) $('#2faDisable').css('display', 'block');
            else $('#2faDisable').css('display', 'none');

            $('#edit_group').val(data.group).attr('data-id', data.gid);
            $('#edit_name').val(data.name);
            $('#edit_videoTitle').val(data.video.title);
            $('#edit_role').selectpicker('val', data.roleId);

            var _permission = [];
            for (var i in data.permission) data.permission[i] && _permission.push(i);
            $('#edit_permission').val(_permission).selectpicker('refresh');
            if ($('[name="_custom"]').attr('content') != 'npa') {
                $('#edit_note').val(data.info.note);
                $('#edit_email').val(data.info.email);
                $('#edit_phone').val(data.info.phone);
                $('#edit_keep').val(data.video.keepDay).selectpicker('refresh');
            }
            $('#edit_gpsLock').prop('checked', data.gps.lock);
            $('#edit_gps').val(data.gps.latitude + ', ' + data.gps.longitude);

            for (var i in data.license) {
                var str = gen_license(moment(data.license[i].activation).format('YYYY-MM-DD'), moment(data.license[i].expiration).format('YYYY-MM-DD'), data.license[i].id, 'del-user-license');
                $('#user_license_container').append(str);
            }
            $('#user_license_row').show();
            $('#passwordCreate').css('display','none');
            $('#passwordRow').css('display','block');

        } else {
            $('#user_modal').find('.modal-title').html(langDict.addUser);

            $('#edit_id').val('').prop('disabled', 0);
            $('#edit_userReset').hide();
            $('#edit_userDelete').hide();

            $('#edit_name').val('');
            $('#edit_videoTitle').val('');
            $('#edit_role').selectpicker('val', 0);
            $('#edit_permission').val([]).selectpicker('refresh');
            if ($('[name="_custom"]').attr('content') != 'npa') {
                $('#edit_note').val('');
                $('#edit_email').val('');
                $('#edit_phone').val('');
                $('#edit_keep').val(0).selectpicker('refresh');
            }
            $('#edit_gpsLock').prop('checked', 0);
            $('#edit_gps').val('24.8076009, 121.0381234');
            $('#edit_group').val('').attr('data-id', '');

            $('#user_license_row').hide();
            $('#passwordCreate').css('display','block');
            $('#passwordRow').css('display','none');
        }
        //return data;
    }, tree_refresh = function (cb) {
        //loading(true);
        ajax('PUT', '/agent/api', data_format('/api/user-info/tree', 0, 'GET', {}, null), function (a) {
            if (a.error) $.growl.error({message: a.error}); else {
                loading(false);

                if (Object.keys(object.user).length) $('#user_tree').jstree(true).destroy();
                object.user = recursive(a, false, 'user');

                if (Object.keys(object.group).length) $('#group_tree').jstree(true).destroy();
                object.group = recursive(a, true, 'group');

                $('#user_tree').jstree({
                    "plugins": ["wholerow", "changed", "search", "grid", 'ui'],
                    "search": {"show_only_matches": false, "show_only_matches_children": false},
                    'core': {
                        'data': object.user,
                        'themes': {
                            'name': 'proton',
                            'responsive': true,
                            'variant': 'large'
                        }, "dnd": {
                            'copy_modifier': false,
                            'check_while_dragging': true
                        }, 'check_callback': true
                    },
                    "grid": {
                        columns: [
                            {'header': '&nbsp;', 'value': 'id', 'width': '30%'},
                            {'header': langDict.name, 'value': 'name', 'width': '20%'},
                            {'header': langDict.title, 'value': 'title', 'width': '20%'},
                            {'header': langDict.permission, 'value': 'permission', 'width': '20%'},
                            {'header': langDict.setting, 'value': 'functional', 'width': '5%'},
                            {'header': langDict.notification, 'value': 'notification', 'width': '10%'}
                        ],
                        resizable: true,
                        width: '100%',
                    }
                }).bind("loaded.jstree changed.jstree", function (event, data) {
                    try {
                        $(this).jstree('open_node', md5('user_group_' + $('[name="_group"]').attr('content').split('_')[1]));
                    } catch (e) {
                        //$(this).jstree('open_all');
                    }
                }).on('select_node.jstree', function (event, data) {
                    //$(this).jstree("deselect_all");
                    if (data.node.original.icon == icons.lock && $('.bootbox').length == 0) {
                        bootbox.confirm({
                            'title': langDict.aruYouSure,
                            'message': '<a href="#" onclick="return false;">' + data.node.original.more.id + '</a> ' + langDict.wasLock,
                            'buttons': {
                                'cancel': {'label': '<i class="fa fa-times"></i> ' + langDict.cancel},
                                'confirm': {'label': '<i class="fa fa-check"></i> ' + langDict.apply}
                            },
                            'callback': function (confirm) {
                                var node = data.node;

                                confirm && ajax('PUT', '/agent/api', data_format('/api/user/unlock', 0, 'POST', {'id': node.original.more.id}, null), function (a) {
                                    if (a.error)
                                        $.growl.error({message: a.error});
                                    else {
                                        var icon = icons.user, management = is_manage(node.original.more.permission);
                                        if (management) icon = icons.manager;
                                        node.icon = icon;
                                        node.original.icon = icon;

                                        if (management)
                                            node.a_attr.class = '';
                                        else
                                            node.a_attr.class = 'text-secondary';

                                        $('#user_tree').jstree('redraw_node', md5('user_user_' + node.original.more.id));

                                        $.growl.notice({message: node.original.more.id + langDict.wasUnlock});
                                    }
                                });
                            }
                        });
                    }
                });
                $('#group_tree').jstree({
                    "core": {
                        "check_callback": true,
                        'themes': {'name': 'proton', "variant": "large"},
                        "data": object.group
                    }, "plugins": ["wholerow", "changed", "search"],
                    "search": {"show_only_matches": false, "show_only_matches_children": false}
                }).bind("loaded.jstree changed.jstree", function (event, data) {
                    try {
                        $(this).jstree('open_node', md5('group_group_' + $('[name="_group"]').attr('content').split('_')[1]));
                    } catch (e) {
                        //$(this).jstree('open_all');
                    }
                }).on('select_node.jstree', function (event, data) {
                    if ($('#group_modal').hasClass('show')) {
                        $('#edit_groupParent').val(data.node.original.more.name).attr('data-id', data.node.original.more.id);
                        $('#select_group_modal').modal('hide');
                    } else if ($('#user_modal').hasClass('show')) {
                        $('#edit_group').val(data.node.original.more.name).attr('data-id', data.node.original.more.id);
                        $('#select_group_modal').modal('hide');
                    }
                });
            }
            cb();
        });
    }, gps_form = function () {
        var gps, lat, lon;
        try {
            gps = $('#edit_gps').val().split(',');
            lat = parseFloat(gps[0].trim());
            lon = parseFloat(gps[1].trim());
            if (!gpsValidation({'lat': lat, 'lng': lon})) {
                //$.growl.warning({message: 'Invaid value, using defalt.'});
                lat = 24.80879982;
                lon = 121.03037136;
            }
        } catch (e) {
            lat = 24.80879982;
            lon = 121.03037136;
        }
        return {'lat': lat, 'lon': lon};
    }, gen_license = function (start, end, id, target) {
        var duration = start + ' ~ ' + end,
            str = '<div class="form-group"> <div class="input-group"><span class="fas fa-calendar" style="position: absolute; z-index: 2;padding: 10px 10px;"></span><input type="text" class="form-control" style="border-bottom-left-radius: 4px;border-top-left-radius: 4px;background-color: transparent; padding-left: 2rem;" value="' + duration + '" disabled><div class="input-group-append"> <button type="button" class="btn btn-danger ' + target + '" data-id="' + id + '" data-loading-text="<span class=\'spinner-grow spinner-grow-sm\'></span>"><i class="fas fa-times"></i></button> </div></div></div>';

        return str;
    };

    ajax('PUT', '/agent/api', data_format('/api/roles', 0, 'GET', {}, null), function (a) {
        if (a.error)
            $.growl.error({message: a.error});
        else {
            object.roles = a;
            for (var i in object.roles)
                $('#edit_role').append(`<option value="${object.roles[i]['id']}">${object.roles[i]['name'] || '-'}</option>`);
            $('#edit_role').selectpicker('refresh');
        }
    });

    tree_refresh(function () {
    });

    $('#edit_role').on('change', function (e) {
        var index = parseInt($(this).selectpicker('val')) - 1, permission = [];
        if (index >= 0) {

            for (var i in object.roles[index]['permission']) if (object.roles[index]['permission'][i]) {
                permission.push(i);
            }
        } else {
            if ($('#edit_id').prop('disabled')) {
                var uid = $('#edit_id').val(),
                    data = $('#user_tree').jstree(true).get_node(md5('user_user_' + uid)).original.more;

                for (var i in data.permission) if (data.permission[i]) {
                    permission.push(i);
                }
            }
        }
        $('#edit_permission').selectpicker('val', permission);
    });

    // $('#edit_permission').on('changed.bs.select', function (e) {
    //     var permission = $(this).selectpicker('val'), role = 0;
    //
    //     for (var i in object.roles) {
    //
    //         var mapping = [];
    //
    //         for (var j in object.roles[i].permission) if (object.roles[i].permission[j]) {
    //             mapping.push(j);
    //         }
    //
    //         if (JSON.stringify(mapping.sort()) == JSON.stringify(permission.sort())) {
    //             role = i;
    //             break;
    //         }
    //     }
    //
    //     $('#edit_role').selectpicker('val', parseInt(role));
    // });

    $('[id$=_search_btn]').on('click', function (e) {
        var btn = $(this), tree = $('#' + btn.attr('id').split('_')[0] + '_tree'),
            val = btn.closest('.input-group').find('input').val();
        val && (btn.button('loading'), setTimeout(function () {
            try {
                tree.jstree(true).search(val);
                tree.find('.jstree-search:eq(0)')[0].scrollIntoView();
            } catch (e) {
                $.growl.warning({message: langDict.notFound});
            }
            btn.button('reset');
        }, 300));
    });

    $(document).on('click', '[class*=cell-input-]', function (e) {
        $(this).focus();
    });
    $(document).on('click', '.cell-input-btn', function (e) {
        var btn = $(this), input = btn.closest('.input-group').find('input'), id = input.attr('data-id');
        if (input.hasClass('cell-input-name')) {
            var _node = $('#user_tree').jstree(true).get_node(md5('user_user_' + id));
            if (input.val() == input.attr('value')) {
                $.growl.warning({message: langDict.notChanged});
            } else {
                var obj = data_format('/api/user', 0, 'PUT', {'id': id, 'name': input.val()}, null)
                ajax('PUT', '/agent/api', obj, function (a) {
                    if (a.error)
                        $.growl.error({message: a.error});
                    else {
                        input.attr('value', input.val());
                        _node.data.name = gen_input(id, 'name', input.val());
                        _node.original.more.name = input.val();
                        $.growl.notice({message: langDict['wasModified']});
                    }
                });
            }
        } else if (input.hasClass('cell-input-title')) {
            var _node = $('#user_tree').jstree(true).get_node(md5('user_user_' + id));
            if (input.val() == input.attr('value')) {
                $.growl.warning({message: langDict.notChanged});
            } else {
                var obj = data_format('/api/user', 0, 'PUT', {'id': id, 'videoTitle': input.val()}, null);
                ajax('PUT', '/agent/api', obj, function (a) {
                    if (a.error)
                        $.growl.error({message: a.error});
                    else {
                        input.attr('value', input.val());
                        _node.data.title = gen_input(id, 'title', input.val());
                        _node.original.more.video.title = input.val();
                        $.growl.notice({message: langDict['wasModified']});
                    }
                });
            }
        } else if (input.hasClass('cell-input-permission')) {
            var data = $('#user_tree').jstree(true).get_node(md5('user_user_' + id)).original.more;

            $('#permission_id').attr('data-id', data.id).val(data.id);
            $('#permission_modal').find('input[type=checkbox]').each(function (index) {
                var target = $(this).attr('id').split('_')[1];
                $(this).prop('checked', data.permission[target] ? 1 : 0);
            });
            $('#permission_modal').modal({
                backdrop: 'static',
                keyboard: true,
                show: true
            });
        }
    });

    var last_hidden_node = null, last_modal = null, group_input = function (target, modal) {
        var selected = $('#user_tree').jstree('get_selected');
        if (selected.length) {
            var _node = $('#user_tree').jstree('get_node', selected[0]);

            if (_node) {
                if (_node.icon != icons.users) {
                    _node = $('#user_tree').jstree('get_node', _node.parents[0]);
                }
                $(target).attr('data-id', _node.original.more.id).val(_node.original.more.name);
            }
        }

        last_modal = $(modal);

        $(modal).modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    };
    $('.dropdown-item[href="#add-user"]').on('click', function (e) {
        edit_form(0);
        group_input('#edit_group', '#user_modal');
    });
    $('.dropdown-item[href="#add-group"]').on('click', function (e) {
        $('#edit_groupName').attr('data-id', '').val('');
        $('#edit_groupParent').attr('data-id', '').val('').closest('.row').show();
        $('#group_license_row').hide();
        $('#edit_groupReset').hide();
        $('#edit_groupDelete').hide();

        group_input('#edit_groupParent', '#group_modal');
    });
    $(document).on('click', '.cell-input-user', function (e) {
        var btn = $(this), id = btn.attr('data-id');
        var data = $('#user_tree').jstree(true).get_node(md5('user_user_' + id)).original.more;
        edit_form(data);

        last_modal = $('#user_modal');

        $('#user_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });
    $(document).on('click', '.cell-input-group', function (e) {
        var btn = $(this), id = btn.attr('data-id');
        var data = $('#user_tree').jstree(true).get_node(md5('user_group_' + id)).original.more;
        $('#edit_groupName').attr('data-id', data.id).val(data.name);

        $('#group_license_container').empty();
        if ('license' in data) for (var i in data.license) {
            var str = gen_license(moment(data.license[i].activation).format('YYYY-MM-DD'), moment(data.license[i].expiration).format('YYYY-MM-DD'), data.license[i].id, 'del-group-license');
            $('#group_license_container').append(str);
        }

        $('#edit_groupReset').show();
        $('#edit_groupDelete').show();
        try {
            var parent_id = $('#user_tree').jstree(true).get_parent(md5('user_group_' + id)),
                parent = $('#user_tree').jstree(true).get_node(parent_id).original.more;
            $('#edit_groupParent').attr('data-id', parent.id).val(parent.name).closest('.row').show();
            $('#group_license_row').show();
        } catch (e) {
            $('#edit_groupParent').attr('data-id', '').val('').closest('.row').hide();
            $('#group_license_row').hide();
        }
        last_modal = $('#group_modal');

        $('#group_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });
    $('#select_group_modal').on('shown.bs.modal hidden.bs.modal', function (e) {
        switch (e.type) {
            case 'shown':

                break;
            case 'hidden':
                last_modal.show();
                last_hidden_node && ($(last_hidden_node).show(), last_hidden_node = null);
                break;
        }
    });
    $(document).on('click', '.select-group-modal', function (e) {
        if (last_modal) {
            last_modal.hide();
            if (last_modal.attr('id') == 'user_modal') {
                //todo: make sure move group
                //last_hidden_node = '#group_group_' + $('#edit_group').attr('data-id');
            } else if (last_modal.attr('id') == 'group_modal') {
                last_hidden_node = md5('group_group_' + $('#edit_groupName').attr('data-id'));
            }
            $(last_hidden_node).hide();
        }
        $('#select_group_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });

    var map = null, marker = null, set_marker = function (m, latlng) {
        marker && (m.removeLayer(marker), marker = null);
        marker = new L.marker(latlng, {
            'icon': L.ExtraMarkers.icon({
                icon: 'fa-cog',
                markerColor: 'black',
                shape: 'star',
                prefix: 'fa'
            })
        }).addTo(m).bindPopup('<label>' + latlng.lat + ', ' + latlng.lng + '</label>');
        m.setView(new L.LatLng(latlng.lat, latlng.lng));
    };

    $('#edit_map').on('click', function (e) {
        $('#map_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });

    $('.get-client-position').on('click', function (e) {
        if (map) {
            var btn = $(this), input = btn.closest('.input-group').find('input'), showPosition = function (position) {
                var lat = position.coords.latitude.toFixed(6), lon = position.coords.longitude.toFixed(6);
                input.val(lat + ', ' + lon);
                set_marker(map, {
                    'lat': lat, 'lng': lon
                });
                btn.button('reset');
            }
            if (navigator.geolocation) {
                btn.button('loading');
                navigator.geolocation.getCurrentPosition(showPosition);
            } else
                $.growl.warning({message: "Geolocation is not supported by this browser."});
        }
    });

    $('#map_modal').on('shown.bs.modal', function (e) {
        $('#map1').height(480);
        var gps = gps_form(), lat = gps.lat, lon = gps.lon;

        $('#map_modal').find('input[type=text]').val(lat + ', ' + lon);

        if (!map) {
            map = map_initial('map1');
            set_marker(map, {
                'lat': lat.toFixed(6),
                'lng': lon.toFixed(6)
            });
            map.on('click', function (e) {
                $('#map_modal').find('input[type=text]').val(e.latlng.lat.toFixed(6) + ', ' + e.latlng.lng.toFixed(6));
                set_marker(map, e.latlng);
            });
        } else
            set_marker(map, {
                'lat': lat.toFixed(6),
                'lng': lon.toFixed(6)
            });
    });
    $('#map_btn').on('click', function (e) {
        $('#edit_gps').val($('#map_modal').find('input[type=text]').val());
    });
    $('#edit_groupReset').on('click', function (e) {
        var id = $('#edit_groupName').attr('data-id'),
            data = $('#user_tree').jstree(true).get_node(md5('user_group_' + id)).original.more;
        $('#edit_groupName').val(data.name);
        try {
            var parent_id = $('#user_tree').jstree(true).get_parent(md5('user_group_' + id)),
                parent = $('#user_tree').jstree(true).get_node(parent_id).original.more;
            $('#edit_groupParent').attr('data-id', parent.id).val(parent.name).closest('.row').show();
            $('#group_license_row').show();
        } catch (e) {
            $('#edit_groupParent').attr('data-id', '').val('').closest('.row').hide();
            $('#group_license_row').hide();
        }
    });
    $('#edit_userReset').on('click', function (e) {
        var id = $('#edit_id').val(),
            data = $('#user_tree').jstree(true).get_node(md5('user_user_' + id)).original.more;
        edit_form(data);
    });
    $('.delete-node').on('click', function (e) {
        var jq = function (myid) {
            return "#" + myid.replace(/(:|\.|\[|\]|,|=|@)/g, "\\$1");
        }, btn = $(this), obj = {}, target = null, name = '', modal = false, id = null;

        if (btn.attr('id') == 'edit_groupDelete') {
            id = $('#edit_groupName').attr('data-id');
            target = 'group';
            name = $('#edit_groupName').val();
            modal = true;

        } else if (btn.attr('id') == 'edit_userDelete') {
            id = $('#edit_id').val();
            target = 'user';
            name = id;
            modal = true;

        } else {
            modal = false;
            var selected = $('#user_tree').jstree(true).get_selected(),
                data = $('#user_tree').jstree(true).get_node(selected).original;

            if (data) {
                id = data.more.id;
                if (data.icon == icons.users) {
                    target = 'group';
                    name = data.more.name;
                } else {
                    target = 'user';
                    name = id;
                }
            }
        }
        if (target) {
            modal && $('#' + target + '_modal').hide();
            bootbox.confirm({
                'title': langDict['aruYouSure'],
                'message': langDict['doYouWantDelete'] + ' ' + name + ' ?',
                'buttons': {
                    'cancel': {'label': '<i class="fa fa-times"></i> ' + langDict['cancel']},
                    'confirm': {'label': '<i class="fa fa-check"></i> ' + langDict['apply']}
                },
                'callback': function (confirm) {
                    modal && $('#' + target + '_modal').show();

                    if (confirm) {
                        //btn.button('loading');  //duplicate
                        $('#edit_' + target + 'Apply').button('loading');
                        $('#edit_' + target + 'Reset').button('loading');
                        $('#edit_' + target + 'Delete').button('loading');
                        $('#edit_' + target + 'Close').button('loading');

                        ajax('PUT', '/agent/api', data_format('/api/' + target, 0, 'DELETE', {'id': id}, null), function (a) {
                            if (a.error)
                                $.growl.error({message: a.error});
                            else {
                                $.growl.notice({message: langDict['wasDeleted']});
                                modal && $('#' + target + '_modal').modal('hide');

                                $('#user_tree').jstree().delete_node(md5('user_' + target + '_' + id), function () {
                                });
                                if (target == 'user') {
                                    edit_form(0);
                                } else {
                                    $('#group_tree').jstree().delete_node(md5('group_group_' + id), function () {
                                    });
                                }
                            }
                            //btn.button('reset');  //duplicate
                            $('#edit_' + target + 'Apply').button('reset');
                            $('#edit_' + target + 'Reset').button('reset');
                            $('#edit_' + target + 'Delete').button('reset');
                            $('#edit_' + target + 'Close').button('reset');
                            $('#user_tree').jstree("deselect_all");
                            $('#group_tree').jstree("deselect_all");
                        });
                    }
                }
            });
        }
    });
    $('#permission_btn').on('click', function (e) {
        var jq = function (myid) {
                return myid.replace(/(:|\.|\[|\]|,|=|@)/g, "\\$1");
            }, btn = $(this), obj = {'id': $('#permission_id').val()},
            permission = $('#user_tree').jstree(true).get_node(md5('user_user_' + obj.id)).original.more.permission;
        btn.button('loading');
        $.each($("input[name='permission[]']"), function (i, e) {
            obj[$(this).attr('id').split('_')[1]] = $(this).prop('checked') ? 1 : 0;
        })
        ajax('PUT', '/agent/api', data_format('/api/user', 0, 'PUT', obj, null), function (a) {
            if (a.error)
                $.growl.error({message: a.error});
            else {
                $.growl.notice({message: langDict.wasModified});
                var user = obj.id, input = $('input[data-id=' + jq(obj.id) + '].cell-input-permission');
                delete obj.id;
                for (var i in obj) permission[i] = obj[i];
                var _options = gen_permission(permission);
                input.val(_options);
                $('#user_tree').jstree(true).get_node(md5('user_user_' + user)).data.permission = gen_input(user, 'permission', _options, 'fas fa-list', true);
                $('#permission_modal').modal('hide');
            }
            btn.button('reset');
        });
    });
    $('#edit_groupApply').on('click', function (e) {
        var id = $('#edit_groupName').attr('data-id'), name = $('#edit_groupName').val(), obj = {};

        if (id.length) {
            obj.id = id;

            var node = $('#user_tree').jstree(true).get_node(md5('user_group_' + id));
            if (name.length && node.original.more.name != name) obj.name = name;

            if ($('#edit_groupParent').is(":visible")) {
                var new_parent_id = md5('user_group_' + $('#edit_groupParent').attr('data-id')),
                    parent_id = $('#user_tree').jstree(true).get_parent(md5('user_group_' + $('#edit_groupName').attr('data-id')));

                if (new_parent_id != parent_id) obj.parent = $('#edit_groupParent').attr('data-id');
            }
        } else {
            var parent = $('#edit_groupParent').attr('data-id');
            name.length && (obj.name = name);
            parent.length && (obj.parent = parent);
        }

        switch (Object.keys(obj).length) {
            case 0:
                $.growl.warning({message: langDict.noInputData});
                break;
            case 1:
                if ('id' in obj) {
                    $.growl.warning({message: langDict.notChanged});
                } else if (!('name' in obj)) {
                    $.growl.warning({message: langDict.noGroupName});
                } else if (!('parent' in obj)) {
                    $.growl.warning({message: langDict.noParent});
                }
                break;
            default:
                $('#edit_groupApply').button('loading');
                $('#edit_groupReset').button('loading');
                $('#edit_groupDelete').button('loading');
                $('#edit_groupClose').button('loading');

                ajax('PUT', '/agent/api', data_format('/api/group', 0, ('id' in obj ? 'PUT' : 'POST'), obj, null), function (a) {
                    if (a.error) {
                        $.growl.error({message: a.error});
                    } else {
                        if ('id' in obj) {
                            if ('parent' in obj) {
                                $('#user_tree').jstree(true).move_node(md5('user_group_' + obj.id), md5('user_group_' + obj.parent), 'first', function () {
                                });
                                $('#group_tree').jstree(true).move_node(md5('group_group_' + obj.id), md5('group_group_' + obj.parent), 'first', function () {
                                });
                            }
                            if ('name' in obj) {
                                var node1 = $('#user_tree').jstree('get_node', md5('user_group_' + obj.id)),
                                    node2 = $('#group_tree').jstree('get_node', md5('group_group_' + obj.id));

                                node1.text = obj.name;
                                node1.data.id = obj.name;
                                node1.original.text = obj.name;
                                node1.original.more.name = obj.name;

                                node2.text = obj.name;
                                node2.original.text = obj.name;
                                node2.original.more.name = obj.name;

                                $('#user_tree').jstree('redraw_node', md5('user_group_' + obj.id));
                                $('#group_tree').jstree('redraw_node', md5('group_group_' + obj.id));
                            }
                        } else {
                            $('#user_tree').jstree().create_node(md5('user_group_' + a.parent), {
                                'text': a.name,
                                'icon': icons.users,
                                'state': {'selected': false},
                                'more': a,
                                'children': [],
                                'id': md5('user_group_' + a.id),
                                'a_attr': {'class': 'text-primary'},
                                'data': {
                                    'id': a.name,
                                    'name': '',
                                    'title': '',
                                    'permission': '',
                                    'functional': '<div class="input-group d-flex justify-content-center"><button class="btn btn-sm btn-info cell-input-group" data-id="' + a.id + '"><i class="fas fa-cog"></i></button></div>',
                                    'notification': '',
                                }
                            }, "first", function () {
                                $('#user_tree').jstree('_open_to', md5('user_group_' + a.id));
                            });

                            $('#group_tree').jstree().create_node(md5('group_group_' + a.parent), {
                                'text': a.name,
                                'icon': icons.users,
                                'state': {'selected': false},
                                'more': a,
                                'children': [],
                                'id': md5('group_group_' + a.id),
                                'a_attr': {'class': 'text-primary'},
                                'data': {
                                    'id': a.name,
                                    'name': '',
                                    'title': '',
                                    'permission': '',
                                    'functional': '<div class="input-group d-flex justify-content-center"><button class="btn btn-sm btn-info cell-input-group" data-id="' + a.id + '"><i class="fas fa-cog"></i></button></div>',
                                    'notification': '',
                                }
                            }, "first", function () {
                                $('#user_tree').jstree('_open_to', md5('group_group_' + a.id));
                            });
                        }
                        $.growl.notice({message: ('id' in obj ? langDict.wasModified : langDict.wasCreated)});
                        $('#group_modal').modal('hide');
                    }

                    $('#edit_groupApply').button('reset');
                    $('#edit_groupReset').button('reset');
                    $('#edit_groupDelete').button('reset');
                    $('#edit_groupClose').button('reset');
                });
                break;
        }
    });
    $('#edit_id').keypress(function (e) {
        var asc = e.which;
        return (48 <= asc && asc <= 57 || 64 <= asc && asc <= 90 || 97 <= asc && asc <= 122 || asc == 45 || asc == 46 || asc == 95);
    });
    //avoid special chat and emojis
    $('#edit_id').on("paste", function (e) {
        var ranges = [
            '\ud83c[\udf00-\udfff]', // U+1F300 to U+1F3FF
            '\ud83d[\udc00-\ude4f]', // U+1F400 to U+1F64F
            '\ud83d[\ude80-\udeff]' // U+1F680 to U+1F6FF
        ];

        setTimeout(function () {
            var val = $('#edit_id').val().replace(new RegExp(ranges.join('|'), 'g'), ''), _text = '';
            for (var i in val) {
                var asc = val[i].charCodeAt(0);
                if ((48 <= asc && asc <= 57 || 64 <= asc && asc <= 90 || 97 <= asc && asc <= 122 || asc == 45 || asc == 46 || asc == 95)) {
                    _text += val[i];
                }
            }

            $('#edit_id').val(_text);
        }, 100);
    });
    $('#edit_userApply').on('click', function (e) {
        var jq = function (myid) {
                return myid.replace(/(:|\.|\[|\]|,|=|@)/g, "\\$1");
            }, _new = !$('#edit_id').prop('disabled'), obj = {'id': $('#edit_id').val()}, requeset = false,
            gps = gps_form(), has_permission = [], options = $('#edit_permission').find('option');

        for (var i = 0; i < options.length; i++) has_permission.push(options.eq(i).attr('value'));

        if (_new) {
            // account id length must be more than 4 word
            if (obj.id.length < 4) {
                $.growl.warning({message: langDict.iDLength});
                return false;
            } else if ($('#edit_group').attr('data-id').length == 0) {
                $.growl.warning({message: langDict.noParent});
                return false;
            } else if ($('#edit_password').val().length < 8) {
                $.growl.error({message: langDict.passwordLength});
                return false;
            } else if ($('#edit_password').val() != $('#edit_password2').val()) {
                $.growl.error({message: langDict.passwordconfirm});
                return false;
            } else {
                obj.enabled = +($('#edit_enabled').prop("checked"));

                obj.name = $('#edit_name').val();
                obj.videoTitle = $('#edit_videoTitle').val();
                obj.password = $('#edit_password').val();
                obj.groupId = $('#edit_group').attr('data-id');
                obj.roleId = parseInt($('#edit_role').selectpicker('val'));

                $.each($('#edit_permission').val(), function (index, val) {
                    obj[val] = 1;
                });

                if ($('[name="_custom"]').attr('content') != 'npa') {
                    if ($('#edit_email').val().length) obj.email = $('#edit_email').val();
                    if ($('#edit_phone').val().length) obj.phone = $('#edit_phone').val();
                    if ($('#edit_note').val().length) obj.note = $('#edit_note').val();
                    obj.keepDay = parseInt($('#edit_keep').val());
                }

                if ($('#edit_gpsLock').prop('checked')) obj.lock = 1;
                obj.latitude = gps.lat;
                obj.longitude = gps.lon;

                requeset = true;
            }
        } else {
            var node = $('#user_tree').jstree(true).get_node(md5('user_user_' + obj.id));

            if ($('[name="_custom"]').attr('content') != 'npa') $.each(['name', 'email', 'phone', 'note'], function (index, val) {
                if (node.original.more.info[val] != $('#edit_' + val).val()) obj[val] = $('#edit_' + val).val();
            });

            if (node.original.more.enabled != +($('#edit_enabled').prop('checked'))) obj["enabled"] = +($('#edit_enabled').prop('checked'));

            var tmp = $('#edit_permission').val();
            for (var i in node.original.more.permission) if (es5_includes(has_permission, i)) {
                var approve = node.original.more.permission[i] >= 1;
                if (es5_includes(tmp, i) && !approve)
                    obj[i] = 1;
                else if (!es5_includes(tmp, i) && approve)
                    obj[i] = 0;
            }

            if (node.original.more.roleId != parseInt($('#edit_role').selectpicker('val')))
                obj.roleId = parseInt($('#edit_role').selectpicker('val'));

            var gid = $('#edit_group').attr('data-id');
            if (node.original.more.gid != gid) obj.groupId = gid;

            var lock = $('#edit_gpsLock').prop('checked') ? 1 : 0;
            if (node.original.more.gps.lock != lock) obj.lock = lock;
            if (node.original.more.gps.latitude != gps.lat) obj.latitude = gps.lat;
            if (node.original.more.gps.longitude != gps.lon) obj.longitude = gps.lon;

            var title = $('#edit_videoTitle').val();
            if (node.original.more.video.title != title) obj.videoTitle = title;

            if ($('[name="_custom"]').attr('content') != 'npa') {
                var keepDay = parseInt($('#edit_keep').val());
                if (node.original.more.video.keepDay != keepDay) obj.keepDay = keepDay;
            }
        }

        // only id in obj
        requeset = Object.keys(obj).length > 1;

        if (requeset) {
            $('#edit_userApply').button('loading');
            $('#edit_userReset').button('loading');
            $('#edit_userDelete').button('loading');
            $('#edit_userClose').button('loading');

            ajax('PUT', '/agent/api', data_format('/api/user', 0, (_new ? 'POST' : 'PUT'), obj, null), function (a) {
                if (a.error) {
                    $.growl.error({message: a.error});
                } else {
                    $.growl.notice({message: (_new ? langDict.wasCreated : langDict.wasModified)});

                    if (_new) {

                        var group_info = $('#user_tree').jstree('get_node', md5('user_group_' + obj.groupId)).original.more;

                        a.gid = group_info.id;
                        a.group = group_info.name;
                        a.layer = group_info.layer;

                        var new_node = {
                            'text': a.id,
                            'icon': icons.user,
                            'state': {'selected': false},
                            'more': a,
                            'id': md5('user_user_' + a.id),
                            'a_attr': {'class': 'text-secondary'},
                            'data': {
                                'id': a.id,
                                'name': gen_input(a.id, 'name', a.info.name),
                                'title': gen_input(a.id, 'title', a.video.title),
                                'permission': gen_input(a.id, 'permission', gen_permission(a.permission), 'fas fa-list', true),
                                'functional': '<div class="input-group d-flex justify-content-center"><button class="btn btn-sm btn-info cell-input-user" data-id="' + a.id + '"><i class="fas fa-cog"></i></button></div>',
                                'notification': '<div class="btn-group d-flex">' +
                                    '<button title="call" class="btn btn-sm btn-success call-btn" data-id="' + a.index + '" data-name="'+a.id+'"><i class="fas fa-phone"></i></button>' +
                                    '<button title="streaming-up"   class="btn btn-sm btn-primary streaming-btn" data-id="' + a.index + '" data-action="streaming_up"><i class="fas fa-bell"></i></button>' +
                                    '<button title="streaming-off" class="btn btn-sm btn-warning streaming-btn" data-id="' + a.index + '" data-action="streaming_off"><i class="fas fa-bell-slash"></i></button>' +
                                    '</div>',
                            }
                        };

                        a.permission && is_manage(a.permission) && (new_node.icon = icons.manager, new_node.a_attr.class = '');

                        $('#user_tree').jstree().create_node(md5('user_group_' + group_info.id), new_node, (is_manage(a.permission) ? 'first' : 'last'), function () {
                            //$('#user_modal').modal('hide');
                        });
                    } else {

                        if ('enabled' in obj) node.original.more.enabled = obj.enabled;
                        if ('note' in obj) node.original.more.info.note = obj.note;
                        if ('email' in obj) node.original.more.info.email = obj.email;
                        if ('phone' in obj) node.original.more.info.phone = obj.phone;
                        if ('keepDay' in obj) node.original.more.video.keepDay = obj.keepDay;
                        if ('lock' in obj) node.original.more.gps.lock = obj.lock;
                        if ('latitude' in obj) node.original.more.gps.latitude = obj.latitude;
                        if ('longitude' in obj) node.original.more.gps.longitude = obj.longitude;
                        if ('roleId' in obj) node.original.more.roleId = obj.roleId;

                        if ('name' in obj) {
                            node.original.more.name = obj.name;
                            node.data.name = gen_input(obj.id, 'name', obj.name);
                        }
                        if ('videoTitle' in obj) {
                            node.original.more.video.title = obj.videoTitle;
                            node.data.title = gen_input(obj.id, 'title', obj.videoTitle);
                        }

                        for (var i in has_permission) if (has_permission[i] in obj)
                            node.original.more.permission[has_permission[i]] = obj[has_permission[i]];
                        var input = gen_permission(node.original.more.permission), icon = icons.user,
                            management = is_manage(node.original.more.permission);

                        node.data.permission = gen_input(obj.id, 'permission', input, 'fas fa-list', true);

                        if (node.original.icon != icons.lock) {
                            management ? (node.a_attr.class = '', icon = icons.manager) : node.a_attr.class = 'text-secondary';
                            node.icon = icon;
                            node.original.icon = icon;
                        }

                        if ('groupId' in obj) {
                            var group = $('#user_tree').jstree('get_node', md5('user_group_' + obj.groupId));
                            node.original.more.group = group.original.more.name;
                            node.original.more.gid = obj.groupId;

                            $('#user_tree').jstree(true).move_node(md5('user_user_' + obj.id), md5('user_group_' + obj.groupId), 'last', function () {
                                this.open_node(md5('user_group_' + obj.groupId));
                            });
                        } else
                            $('#user_tree').jstree('redraw_node', md5('user_user_' + obj.id));
                    }
                    //$('#user_modal').modal('hide');
                }
                $('#edit_userApply').button('reset');
                $('#edit_userReset').button('reset');
                $('#edit_userDelete').button('reset');
                $('#edit_userClose').button('reset');
            });
        } else $.growl.warning({message: langDict.notChanged});
    });

    $('#edit_userLicense').daterangepicker({
        bsVersion: '4.x',
        minDate: moment(),
        drops: 'up',
        showDropdowns: true,
        locale: get_log_daterangepicker_lang(lang).locale,
    }, function (start, end) {
        $('#edit_userLicense').button('loading');

        var uid = $('#edit_id').val();

        if ($('#edit_id').prop('disabled') && uid) {

            ajax('PUT', '/agent/api', data_format('/api/user/license', 0, 'POST', {
                'userId': uid,
                'activation': start.format('YYYY-MM-DDTHH:mm:ssZ'),
                'expiration': end.format('YYYY-MM-DDTHH:mm:ssZ'),
                'purchase': moment().format('YYYY-MM-DDTHH:mm:ssZ')
            }, null), function (a) {
                if (a.error) {
                    $.growl.error({message: a.error});
                } else {
                    $.growl.notice({message: langDict.wasCreated});
                    var _node = $('#user_tree').jstree('get_node', md5('user_user_' + uid));
                    _node.original.more.license.push(a);

                    var str = gen_license(start.format('YYYY-MM-DD'), end.format('YYYY-MM-DD'), a.id, 'del-user-license');
                    $('#user_license_container').prepend(str);
                }
                $('#edit_userLicense').button('reset');
            });
        }
    });

    $(document).on('click', '.del-user-license', function (e) {
        var id = $(this).attr('data-id'), row = $(this).closest('.form-group'), uid = $('#edit_id').val();
        $(this).button('loading');

        ajax('PUT', '/agent/api', data_format('/api/user/license', 0, 'DELETE', {
            'userId': uid,
            'id': id
        }, null), function (a) {
            if (a.error) {
                $.growl.error({message: a.error});
                $(this).button('reset');
            } else {
                $.growl.notice({message: langDict.wasDeleted});
                var _node = $('#user_tree').jstree('get_node', md5('user_user_' + uid)),
                    _len = _node.original.more.license.length;

                while (_len > 0) {
                    _len--;
                    if (_node.original.more.license[_len].id == id) {
                        _node.original.more.license.splice(_len, 1);
                        break;
                    }
                }
                row.remove();
            }
        });
    });

    $('#edit_groupLicense').daterangepicker({
        bsVersion: '4.x',
        minDate: moment(),
        drops: 'up',
        showDropdowns: true,
        locale: get_log_daterangepicker_lang(lang).locale,
    }, function (start, end) {
        $('#edit_groupLicense').button('loading');

        var gid = $('#edit_groupName').attr('data-id');

        if (gid) {

            ajax('PUT', '/agent/api', data_format('/api/group/license', 0, 'POST', {
                'groupId': gid,
                'activation': start.format('YYYY-MM-DDTHH:mm:ssZ'),
                'expiration': end.format('YYYY-MM-DDTHH:mm:ssZ'),
                'purchase': moment().format('YYYY-MM-DDTHH:mm:ssZ')
            }, null), function (a) {
                if (a.error) {
                    $.growl.error({message: a.error});
                } else {
                    $.growl.notice({message: langDict.wasCreated});
                    var _node = $('#user_tree').jstree('get_node', md5('user_group_' + gid));
                    _node.original.more.license.push(a);

                    var str = gen_license(start.format('YYYY-MM-DD'), end.format('YYYY-MM-DD'), a.id, 'del-group-license');
                    $('#group_license_container').prepend(str);
                }
                $('#edit_groupLicense').button('reset');
            });
        }
    });

    $(document).on('click', '.del-group-license', function (e) {
        var id = $(this).attr('data-id'), row = $(this).closest('.form-group'),
            gid = $('#edit_groupName').attr('data-id');

        $(this).button('loading');

        ajax('PUT', '/agent/api', data_format('/api/group/license', 0, 'DELETE', {
            'groupId': gid,
            'id': id
        }, null), function (a) {
            if (a.error) {
                $.growl.error({message: a.error});
                $(this).button('reset');
            } else {
                $.growl.notice({message: langDict.wasDeleted});
                var _node = $('#user_tree').jstree('get_node', md5('user_group_' + gid)),
                    _len = _node.original.more.license.length;

                while (_len > 0) {
                    _len--;
                    if (_node.original.more.license[_len].id == id) {
                        _node.original.more.license.splice(_len, 1);
                        break;
                    }
                }
                row.remove();
            }
        });
    });

    $('#changePwd').on('click', function () {
        var id = $('#edit_id').val();
        $('#password_modal').attr('data-id', id);
        $('#user_modal').modal('hide');
        $('#password_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });
    $('#password_apply').on('click', function () {
        var obj = {'id':  $('#password_modal').attr('data-id')};
        if ($('#password').val().length < 8 || $('#password2').val().length < 8) {
            $.growl.error({message: langDict.passwordLength});
            return false;
        } else if ($('#password').val() != $('#password2').val()) {
            $.growl.error({message: langDict.passwordconfirm});
            return false;
        } else {
            obj.password = $('#password').val();
        }

        ajax('PUT', '/agent/api', data_format('/api/user', 0, 'PUT', obj, null), function (a) {
            if (a.error)
                $.growl.error({message: a.error});
            else {
                $('#password').val("");
                $('#password2').val("");
                $.growl.notice({message: langDict['wasModified']});
                $('#password_modal').modal('hide');
            }
        });
    });
    $('#password_modal').on('hidden.bs.modal', function (e) {
        $('#user_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });
    $('#disable2fa').on('click', function () {
        var val = ($(this).prop('checked')) ? 1 : 0, id = $('#edit_id').val();
        var obj = {'id':  id, '2faEnabled': 0};

        ajax('PUT', '/agent/api', data_format('/api/user', 0, 'PUT', obj, null), function (a) {
            if (a.error)
                $.growl.error({message: a.error});
            else {
                var node = $('#user_tree').jstree(true).get_node(md5('user_user_' + obj.id));
                node.original.more['2faEnabled'] = obj['2faEnabled'];
                $('#2faDisable').css('display', 'none');
                $.growl.notice({message: langDict['wasDisable']});
            }
        });
    });

    $(document).on('click', '.streaming-btn', function (e) {
        const btn = $(this), id = parseInt(btn.attr('data-id')), action = btn.data('action');

        btn.button('loading');

        ajax('PUT', '/agent/api', data_format('/api/webrtc', 0, 'GET', {}, null), function (a) {
            if (a.error) {
                $.growl.error({message: a.error});
                btn.button('reset');
            } else {
                const room = a.key, address = a.address;

                ajax('PUT', '/agent/api', data_format('/api/notification', 0, 'POST', {
                    "targets": [id], "cmd": action, "content": {"key": room, "address": address}
                }, null), function (b) {
                    if (b.error) {
                        $.growl.error({message: b.error});
                        btn.button('reset');
                    } else {
                        $.growl.notice({message: 'success'});
                    }
                });
            }
        });
    });

});