const uid = $('[name="_uid"]').attr('content');
var session = null, timer = null, duration = 0;
var channel = null, channelInfo = {}, failed = 0;

function dialing(targets, room, address, call) {

    const _PeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection,
        _constraints = {"video": false, "audio": true},
        _localVideo = document.querySelector('#local-video'),
        _remoteVideo = document.querySelector('#remote-video'),
        iceConfig = {
            iceServers: [
                {
                    urls: `turn:${address}:3478?transport=tcp`,
                    username: 'test',
                    credential: 'test'
                }
            ]
        };

    //dirty code, will remove
    this.hangup = null;

    this.uid = parseInt($('[name="_uid"]').attr('content'));
    this.targets = targets;
    this.room = room;
    this.address = `wss://${address}/webrtc-mgr/${room}/ws`;
    this.listener = {};

    this.peer = new _PeerConnection(iceConfig);

    _this = this;

    this.media = {
        connect: function (cb) {
            //let media = navigator.webkitGetUserMedia || navigator.getUserMedia || navigator.mediaDevices.getUserMedia;

            navigator.mediaDevices.getUserMedia(_constraints).then(function (stream) {
                console.log('攝影機連接成功!');
                window.stream = stream;
                _localVideo.srcObject = stream;

                //console.log('播放本機畫面');
                //_localVideo.play();

                cb();
            }).catch(function (err) {
                console.log(err);
                $.growl.error({message: "攝影機連接失敗"});
            });
        },
        sdp: function (cb) {
            window.stream.getTracks().forEach(track => {
                _this.peer.addTrack(track, stream);
            });

            _this.peer.createOffer().then(offer => {
                console.log('SDP已建立');
                _this.peer.setLocalDescription(offer);

                ajax('PUT', '/agent/api', data_format('/webrtc-mgr/'+room+'/sdp/speak', 0, 'POST', {
                    "id": _this.uid, "key": _this.room, "offer": offer
                }, null), function (a) {
                    if(!a.error){
                        console.log('SDP/speak 已建立');
                        a.answer && _this.peer.setRemoteDescription(new RTCSessionDescription(a.answer));
                        if(call){
                            ajax('PUT', '/agent/api', data_format('/api/notification/user', 0, 'POST', {
                                "ids": targets, "content": {"event": 7, "payload":{"cmd": "call", "key": room, "address": address}}
                            }, null), function (b) {
                                if (b.error)
                                    $.growl.error({message: b.error});
                                else cb();
                            });
                        }else cb();
                    }else
                        $.growl.error({message:a.error});
                });
            });
        },
        remote: function (member) {
            _this.listener[member] = new _PeerConnection(iceConfig);

            window.stream.getTracks().forEach(track => {
                _this.listener[member].addTrack(track, stream);
            });

            _this.listener[member].createOffer().then(offer => {
                _this.listener[member].setLocalDescription(offer);

                ajax('PUT', '/agent/api', data_format('/webrtc-mgr/'+room+'/sdp/listen', 0, 'POST', {
                    "offer": offer, "target": member
                }, null), function (a) {
                    _this.listener[member].setRemoteDescription(new RTCSessionDescription(a.answer));

                    _this.listener[member].ontrack = e => {
                        if (e && e.streams) {
                            console.log('SDP/listen 已建立 => ' + member);
                            $('#connecting').css('display', 'none');
                            $('#webrtc-modal').modal('hide');
                            $('a[href="#webrtc"]').html('<i class="fas fa-phone-alt text-success"> 00:00 </i>');
                            $('.webrtcContent').attr('data-id',member);
                            $('.webrtcContent .name').html('<h4>'+ member +'</h4>');
                            $('.webrtcContent .time').text("00:00");
                            if($('.navbar-toggle').css('display') != 'none') $('#calling').css('display', 'block');
                            timer = setInterval(function () {
                                duration += 1;
                                var display = (duration > 3600) ? new Date(duration * 1000).toISOString().substr(11, 8) : new Date(duration * 1000).toISOString().substr(14, 5);
                                $('.webrtcContent .time').text(display);
                                $('a[href="#webrtc"]').html('<i class="fas fa-phone-alt text-success"> ' + display + ' </i>');
                            },1000);
                            _remoteVideo.srcObject = e.streams[0];
                            ajax('PUT', '/agent/api', data_format('/api/user?index=' + member, 0, 'GET', {}, null), function (user) {
                                if(!user.error) $('.webrtcContent .name').html('<h4>'+ user.id +'</h4>');
                            });
                        }
                    };
                });

            });
        },
        initialing: function (cb) {
            _this.media.connect(function () {
                _this.media.sdp(function () {
                    cb();
                });
            });
        }
    }

    this.ws = new WebSocket(_this.address);
    this.ws.onopen = function (event) {
        $('#calling').html('<a href="#webrtc" onclick="return false;"><i class="fas fa-phone-alt"> ' + langDict.webrtc + ' </i></a>');
    };

    _this.media.initialing(function () {
        if(!call){
            ajax('PUT', '/agent/api', data_format('/webrtc-mgr/'+room+'/members', 0, 'GET', {}, null), function (a) {
                if(!a.error){
                    if (a.members.length > 0) _this.media.remote(a.members[0].id);
                    else {
                        $.growl.warning({message:'對方已掛斷'});
                        _this.close();
                    }
                }else
                    $.growl.error({message:a.error});
            });
        }
        _this.ws.onmessage = function (event) {
            const data = JSON.parse(event.data);

            switch (data.cmd) {
                case "answer":
                    clearTimeout(_this.waiting);
                    pauseAudio("calling");
                    _this.media.remote(data.id);
                    break;
                case "hangup":
                    if (_this.listener[data.id]) {
                        _this.listener[data.id].close();
                        delete _this.listener[data.id];
                    }
                    if (Object.keys(_this.listener).length == 0) {
                        _this.close();
                    }
                    break;
            }
        };
    });

    this.waiting = setTimeout(function () {
        $.growl.warning({message: "對方未接聽"});
        pauseAudio("calling");
        _this.close();

        ajax('PUT', '/agent/api', data_format('/api/notification/user', 0, 'POST', {
            "ids": targets.map(String), "content": {"event": 7, "payload":{"cmd": "hangup"}}
        }, null), function (a) {});

    }, 15000);

    this.close = function () {

        ajax('PUT', '/agent/api', data_format('/webrtc-mgr/'+_this.room+'/leave', 0, 'POST', {
            // 'id': _this.uid, 'key': _this.room
        }), function (a) {
            for (const i in _this.targets)
                $('.call-btn[data-id="' + _this.targets[i] + '"]').button('reset');

            for (const i in _this.listener)
                _this.listener[i].close();


            window.stream.getTracks().forEach(track => {
                track.stop();
            });

            _this.ws && _this.ws.close();
            _this.peer && _this.peer.close();

            $('#hangup').button('reset');

            if ($('#webrtc-modal').is(':visible'))
                $('#webrtc-modal').modal('hide');

            clearInterval(timer);
            $('#calling').css('display', 'none');
            duration = 0;
            $('a[href="#webrtc"]').html('<i class="fas fa-phone-alt"> ' + langDict.webrtc + ' </i>');
            $('.webrtcContent').attr('data-id',"");
            $('.webrtcContent .name').html('<h4> unKnown </h4>');
            $('.webrtcContent .time').text("00:00");
            $('#connecting').css('display', 'block');
            if('id' in channelInfo){
                channel = new pushToTalk(_this.uid, channelInfo.id, channelInfo.address, true);
                $('#roomList').val(channelInfo.id).selectpicker('refresh');
            }
            session = null;
        });
    };
}

var pushToTalk = function (self, room, address, reconnect) {

    const _PeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection,
        _constraints = {"video": false, "audio": true},
        _localVideo = document.querySelector('#local-video'),
        _remoteVideo = document.querySelector('#remote-video'),
        iceConfig = {
            iceServers: [
                {
                    urls: `turn:${address}:3478?transport=tcp`,
                    username: 'test',
                    credential: 'test'
                }
            ]
        };

    this.room = room;
    this.address = `wss://${address}/webrtc-mgr/${room}/ws`;
    this.listener = {};

    this.peer = new _PeerConnection(iceConfig);

    _this = this;

    this.media = {
        connect: function (cb) {
            navigator.mediaDevices.getUserMedia(_constraints).then(function (stream) {
                console.log('麥克風連接成功!');
                window.stream = stream;
                _localVideo.srcObject = stream;

                cb();
            }).catch(function (err) {
                $.growl.error({message: "麥克風連接失敗"});
            });
        },
        sdp: function (cb) {
            window.stream.getTracks().forEach(track => {
                _this.peer.addTrack(track, stream);
            });

            _this.peer.createOffer().then(offer => {
                console.log('SDP已建立');
                _this.peer.setLocalDescription(offer);

                ajax('PUT', '/agent/api', data_format('/webrtc-mgr/'+room+'/sdp/speak', 0, 'POST', {
                    "id": self, "key": _this.room, "offer": offer
                }, null), function (a) {
                    if(!a.error){
                        console.log('SDP/speak 已建立');
                        if(!reconnect) $.growl.notice({message:'已加入 ' + channelInfo.name});
                        a.answer && _this.peer.setRemoteDescription(new RTCSessionDescription(a.answer));
                        $('#roomMember').append(gen_member(self, $('#user-card-modal').attr('data-id')));
                        cb();
                    }else
                        $.growl.error({message:a.error});
                });
            });
        },
        remote: function (member) {
            _this.listener[member] = new _PeerConnection(iceConfig);

            window.stream.getTracks().forEach(track => {
                _this.listener[member].addTrack(track, stream);
            });

            _this.listener[member].createOffer().then(offer => {
                _this.listener[member].setLocalDescription(offer);

                ajax('PUT', '/agent/api', data_format('/webrtc-mgr/'+room+'/sdp/listen', 0, 'POST', {
                    "offer": offer, "target": member
                }, null), function (a) {
                    _this.listener[member].setRemoteDescription(new RTCSessionDescription(a.answer));

                    _this.listener[member].ontrack = e => {
                        if (e && e.streams) {
                            console.log('SDP/listen 已建立 => ' + member);
                            var temp = document.createElement('video');
                            temp.id = 'pttChannel'+member;
                            temp.srcObject = e.streams[0];
                            temp.autoplay = true;
                            temp.style.display = 'none';
                            $('#roomMember').append(temp);
                        }
                    };
                });

            });
        },
        initialing: function (cb) {
            _this.media.connect(function () {
                _this.media.sdp(function () {
                    cb();
                });
            });
        }
    }
    this.ws = new WebSocket(_this.address);
    this.ws.onopen = function (event) {
        $('#RoomControl').css('visibility', 'visible');
        $('#roomMember').empty();
        $('#calling').css('display', 'block');
        $('#calling').html('<a href="#pushToTalk" onclick="return false;"></a>');
        $('a[href="#pushToTalk"]').html('<i class="fas fa-broadcast-tower text-success">&ensp;' + channelInfo.name + '</i>');
    };
    this.ws.onerror = function (event) {
        console.error('WebSocket失敗' + event);
    };
    _this.media.initialing(function () {
        ajax('PUT', '/agent/api', data_format('/webrtc-mgr/'+room+'/members', 0, 'GET', {}, null), function (a) {
            if(!a.error){
                $('#members').text(a.members.length+1);
                for(const member in a.members){
                    $('#roomMember').append(gen_member(a.members[member].id, a.members[member].name));
                    if(a.members[member].id != self) _this.media.remote(a.members[member].id);
                }
            }else
                $.growl.error({message:a.error});
        });
        if(!reconnect){
            speaking = false;
            $('#ptt_talk').html('<i class="fas fa-microphone-alt-slash"></i>&ensp;' + langDict.muted);
            $('#ptt_talk').removeClass('btn-success');
            $('#ptt_talk').addClass('btn-secondary');
        }
        window.stream.getTracks().forEach(track => {
            track.enabled = speaking;
        });
        _this.ws.onmessage = function (event) {
            const data = JSON.parse(event.data);
            switch (data.cmd) {
                case "answer":
                    _this.media.remote(data.id);
                    $('#roomMember').append(gen_member(data.id, data.name));
                    $('#members').text(parseInt($('#members').text())+1);
                    break;
                case "hangup":
                    if (_this.listener[data.id]) {
                        _this.listener[data.id].close();
                        delete _this.listener[data.id];
                        $('.room[data-id="'+data.id+'"]').remove();
                        $('#members').text(parseInt($('#members').text())-1);
                        $('#pttChannel'+data.id).remove();
                    }
                    break;
            }
        };
        _this.peer.onconnectionstatechange = function(event) {
            if(_this.peer.connectionState == "failed" && channelInfo.id){
                failed += 1;
                var wait = 1000;
                console.error('連線中斷，將自動重新連線');
                _this.close(true);
                if(failed > 3){
                    wait = 30000;
                    $.growl.error({message: '網路異常'});
                }
                var timeout = setTimeout(function () {channel = new pushToTalk(uid, channelInfo.id, channelInfo.address, true);}, wait);
            }else if(_this.peer.connectionState == "connected")
                failed = 0;
        }
    });
    this.close = function (keep) {
        const closeName = channelInfo.name;
        ajax('PUT', '/agent/api', data_format('/webrtc-mgr/'+_this.room+'/leave', 0, 'POST', {}), function (a) {

            for (const i in _this.listener)
                _this.listener[i].close();

            window.stream.getTracks().forEach(track => {
                track.stop();
            });

            _this.ws && _this.ws.close();
            _this.peer && _this.peer.close();

            $('#roomMember').empty();
            $('#members').text("0");
            $('#calling').css('display', 'none');
            $('a[href="#pushToTalk"]').html('<i class="fas fa-broadcast-tower"> ' + langDict.talkie + ' </i>');

            if(!keep){
                $('#RoomControl').css('visibility', 'hidden');
                $('#roomList').val([]).selectpicker('refresh');
                if ($('#ptt-modal').is(':visible')) $('#ptt-modal').modal('hide');
            }
            if(!reconnect) $.growl.notice({message: "已退出 " + closeName});
        });
    };
};
var playAudio = function(id){
    var audio_ = document.getElementById("audio-"+id);
    audio_.play();
}, pauseAudio = function(id){
    var audio_ = document.getElementById("audio-"+id);
    audio_.pause();
}, gen_member = function (id, name) {
    var result = '<div class="col-1"><a class="muted" data-id="'+ parseInt(id) +'"><i class="fas fa-volume-up"></i></a></div>';
    if(id == uid) result = '<div class="col-1"><a></a></div>';
    result += '<div class="col-9"><span>'+name+'</span></div>';
    result += '<div class="col-2 align-self-center"><a><i class="fas fa-signal"></i></a></div>';
    result = '<div class="d-flex room" data-id="'+ parseInt(id) +'" style="padding: 5px;box-shadow: 0px 0px 5px 2px #bbb inset;">'+result+'</div>';
    return result;
};

$(document).ready(function () {
    $('.overflow-auto').height($(window).height() * 0.4);
    let hangup = [], incomingCall = false, speaking = false;

    const wss = new WebSocket(`wss://${window.location.host}/api/web/notifications`);
    wss.onopen = function (event) {
        console.log('WebSocket已建立');
    };
    wss.onerror = function (event) {
        console.error('WebSocket建立失敗');
    };
    wss.onmessage = function (event) {
        const data = JSON.parse(event.data);

        if(data.event == 7) switch (data.payload.cmd) {
            case "call":
                playAudio("notification");
                // const myAudio = new Audio('/files/ring.mp3');
                // myAudio.loop = true;
                // myAudio.play();

                incomingCall = true;
                var caller = data.userId;
                ajax('PUT', '/agent/api', data_format('/api/user?index=' + data.userId, 0, 'GET', {}, null), function (user) {
                    if(!user.error) caller = user.info.name;
                    bootbox.confirm({
                        'title': '語音通話',
                        'message': '有來自' + caller + '新的來電，請問您要接嗎?',
                        'buttons': {
                            'confirm': {
                                'label': '<i class="fas fa-check"></i> 是',
                                'className': 'btn-success'
                            },
                            'cancel': {
                                'label': '<i class="fas fa-times"></i> 否',
                                'className': 'btn-danger'
                            }
                        }, 'callback': function (confirm) {
                            incomingCall = false;
                            if (confirm) {
                                hangup = [uid, data.userId];
                                var targets = [uid, data.userId];
                                if (channel) {
                                    channel.close();
                                    channel = null;
                                }
                                ajax('PUT', '/agent/api', data_format('/api/notification/user', 0, 'POST', {
                                    "ids": [data.userId], "content": {"event": 7, "payload":{"cmd": "answer", "key": data.payload.key, "address": data.payload.address}}
                                }, null), function (a) {
                                    session = new dialing(targets.map(String), data.payload.key, data.payload.address, false);
                                    session.hangup = hangup;
                                    clearTimeout(session.waiting);
                                });
                            } else {
                                ajax('PUT', '/agent/api', data_format('/api/notification/user', 0, 'POST', {
                                    "ids": [uid, data.userId].map(String), "content": {"event": 7, "payload":{"cmd": "hangup"}}
                                }, null), function (a) {
                                });
                            }
                            pauseAudio("notification");
                            // myAudio.pause();
                        }
                    });
                });
                break;
            case "answer":
                console.log(data.userId + ' 已應答');
                pauseAudio("calling");
                break;
            case "hangup":
                if(incomingCall){
                    incomingCall = false;
                    $('.bootbox.modal').modal('hide');
                    pauseAudio("notification");
                }
                pauseAudio("calling");
                if (data.userId != uid && session) {
                    clearTimeout(session.waiting);
                    session.close();
                    session = null;
                    $.growl.notice({message: "通話結束"});
                    $('#webrtc-modal').modal('hide');
                }
                break;
        }
    };

    ajax('PUT', '/agent/api', data_format('/api/ptt/channels', 0, 'GET', {}, null), function (a) {
        if(!a.error){
            for(const i in a)
                $('#roomList').append("<option value='"+ a[i].id +"'>"+ a[i].name +"</option>").selectpicker('refresh');
            $('#roomList').val([]).selectpicker('refresh');
        }else
            $.growl.error({message: a.error});
    });

    $('#hangup').on('click', function (e) {
        const btn = $(this);
        btn.button('loading');
        if (session) {

            ajax('PUT', '/agent/api', data_format('/api/notification/user', 0, 'POST', {
                "ids": _this.hangup.map(String), "content": {"event": 7, "payload":{"cmd": "hangup"}}
            }, null), function (a) {
                clearTimeout(session.waiting);
                session.close();
                session = null;
                hangup = [];
                $.growl.notice({message: "已掛斷"});
            });

        }
        btn.button('reset');
        $('#webrtc-modal').modal('hide');
    });

    $(document).on('click', '.call-btn', function (e) {
        const btn = $(this), id = btn.attr('data-id'), name = btn.data('name');

        if (id == uid) {
            $.growl.warning({message: "無法撥打給自己"});
            return false;
        }

        if (channel) {
            channel.close();
            channel = null;
        }

        btn.button('loading');
        playAudio("calling");
        ajax('PUT', '/agent/api', data_format('/api/webrtc', 0, 'GET', {}, null), function (a) {
            if (a.error) {
                $.growl.error({message: a.error});
                btn.button('reset');
            } else {
                const room = a.key, address = a.address;
                session = new dialing([id], room, address, true);
                hangup = [id, uid];
                session.hangup = hangup;
                $('.webrtcContent .name').html('<h4>'+ name +'</h4>');
                $('#webrtc-modal').modal({
                    backdrop: 'static',
                    keyboard: true,
                    show: true
                });
            }
        });
    });

    $(document).on('click', 'a[href="#webrtc"]', function (e) {
        if(session){
            $('#webrtc-modal').modal({
                backdrop: 'static',
                keyboard: true,
                show: true
            });
        }
    });

    $(document).on('click', 'a[href="#pushToTalk"]', function (e) {
        if(!session){
            $('#RoomControl').css('visibility',(channel) ? 'visible' : 'hidden');
            $('#ptt-modal').modal({
                backdrop: 'static',
                keyboard: true,
                show: true
            });
        }
    });

    $('#ptt_talk').on('click',function (e) {
        var btn = $(this);
        if(speaking){
            speaking = false;
            btn.html('<i class="fas fa-microphone-alt-slash"></i>&ensp;' + langDict.muted);
            btn.removeClass('btn-success');
            btn.addClass('btn-secondary');
        }else{
            speaking = true;
            btn.html('<i class="fas fa-phone-volume"></i>&ensp;' + langDict.speaking);
            btn.removeClass('btn-secondary');
            btn.addClass('btn-success');
        }
        window.stream.getTracks().forEach(track => {
            track.enabled = speaking;
        });
    });

    $('#ptt_exit').on('click', function (e) {
        const btn = $(this);
        btn.button('loading');
        if (channel) {
            channel.close();
            channel = null;
            channelInfo = {};
        }
        btn.button('reset');
    });

    $('#roomList').on('change', function () {
        var val = $(this).val(), times = 0;
        if (channel) {
            channel.close(true);
            channel = null;
            times = 500;
        }
        var timeout = setTimeout(function () {
            ajax('PUT', '/agent/api', data_format('/api/webrtc?channelId='+val, 0, 'GET', {}, null), function (a) {
                if(!a.error){
                    channelInfo = {'id': a.key, 'address': a.address,'name': $("#roomList option[value='"+val+"']").text()}
                    channel = new pushToTalk(uid, channelInfo.id, channelInfo.address, false);
                }
            });
        }, times);
    });

    $(document).on('click', '.muted', function (e) {
        const target = $(this).data('id'), vid = $('#pttChannel'+target)[0];
        if(vid.muted) {
            vid.muted = false;
            $(this).html('<i class="fas fa-volume-up"></i>')
        } else {
            vid.muted = true;
            $(this).html('<i class="fas fa-volume-mute"></i>');
        }
    });
});