/**
 * Created by Cloud on 2016/12/8.
 */
$(document).ready(function () {
    loading(true);
    $('#searchBtn').button('loading');
    $('.overflow-auto').height($(window).height() * 0.7);
    var downloaded = [], table_btn = function (action) {
        $('#searchBtn').button(action);
        $('.dt-buttons').find('button').each(function () {
            $(this).button(action);
        });
    }, gen_input = function (id, value) {
        return '<div class="input-group"><input type="text" class="form-control form-control-sm" data-id="' + id + '" value="' + value + '" disabled></div>';
    }, recursive = function (origin, onlyGroup, prefix) {
        var data = {
            'text': origin.group.name,
            'icon': icons.users,
            'state': {'selected': false},
            'more': origin.group,
            'children': [],
            'id': prefix + '_group_' + origin.group.id,
            'a_attr': {'class': 'text-primary'}
        };
        var users = [];
        if (!onlyGroup) {
            users = origin.userList;
            data.data = {
                'id': origin.group.name,
                'name': '',
                'title': ''
            };
        }
        if (users.length) {
            /*-------- user sorting --------*/
            users = users.sort(function (a, b) {
                return (a.id > b.id) ? 1 : ((b.id > a.id) ? -1 : 0);
            });
            /*-------- end sort --------*/
            for (var i in users) {
                var user = users[i];

                user.gid = origin.group.id;
                user.group = origin.group.name;

                var obj = {
                    'text': user.id,
                    'icon': icons.camera,
                    'state': {'selected': false},
                    'more': user,
                    'id': prefix + '_user_' + user.id,
                    'a_attr': {'class': 'text-secondary'},
                    'data': {
                        'id': user.id,
                        'name': gen_input(user.id, user.info.name),
                        'title': gen_input(user.id, user.video.title)
                    }
                };
                data.children.push(obj);
            }
        }
        /*-------- group sorting --------*/
        var chld = origin['children'];
        chld && (chld = chld.sort(function (a, b) {
            return (a.group.name > b.group.name) ? 1 : ((b.group.name > a.group.name) ? -1 : 0);
        }));
        /*-------- end sort --------*/
        for (var i in chld) data['children'].push(recursive(chld[i], onlyGroup, prefix));
        return data;
    };
    var object = {'user': [], 'group': []}, playbackList = [], gps = {}, foucs = {}, map1,
        start = moment().subtract(6, 'days'), end = moment();

    date_range_init(start, end);
    var initialed = false, init = data_format('/api/video/search', 0, 'POST', {
        'startTime': $('#search_time').data('daterangepicker').startDate.format('YYYY-MM-DDTHH:mm:ssZ'),
        'stopTime': $('#search_time').data('daterangepicker').endDate.format('YYYY-MM-DDTHH:mm:ssZ')
    }, 'video');

    var table_dom = 'lBprtip', table_selection = true;
    if (navigator.userAgent.indexOf('bovia_app_webview') !== -1 || parseInt($('[name="_video"]').attr('content')) == 0) {
        table_dom = 'prtip';
        table_selection = false;
        //$('.video-keep').hide();
    }

    var table = $('#videos').DataTable({
        "processing": true,
        "serverSide": true,
        "autoWidth": true,
        "dom": table_dom,
        "lengthMenu": [10, 25, 50, 100],
        "language": {"url": 'files/' + lang + '.json'},
        "iDisplayLength": 25,
        "buttons": [{
            "text": langDict['selectAll'],
            'className': 'btn btn-success',
            "action": function () {
                table.rows().eq(0).each(function (index) {
                    var row = table.row(index), id = row.data().DT_RowId;
                    $('.selection[data-id=' + id + ']').prop('disabled') || $('.selection[data-id=' + id + ']').prop('checked', 1);
                });
            }
        }, {
            "text": langDict['diselectAll'],
            'className': 'btn btn-warning',
            "action": function () {
                table.rows().eq(0).each(function (index) {
                    var row = table.row(index), id = row.data().DT_RowId;
                    $('.selection[data-id=' + id + ']').prop('checked', 0);
                });
            }
        }, {
            "text": langDict['delete'],
            'className': 'btn btn-danger',
            "action": function () {
                var videos = [];

                table.rows().eq(0).each(function (index) {
                    var row = table.row(index), id = row.data().DT_RowId;
                    $('.selection[data-id=' + id + ']').prop('checked') && videos.push(id);
                });

                if (videos.length) {
                    table_btn('loading');
                    var data = data_format("/api/video/delete", 0, "POST", {"id": videos}, null);

                    ajax('PUT', '/agent/api', data, function (a) {
                        if (a.error) {
                            $.growl.error({message: a.error});
                        } else {
                            $.growl.notice({message: langDict.wasDeleted});
                            for (var i in videos) {
                                $('tr[id=' + videos[i] + ']').remove();
                                //table.row(videos[i]).remove().draw();
                                table.row(videos[i]).remove();
                            }
                        }
                        table_btn('reset');
                    });
                } else
                    $.growl.warning({message: langDict.noneSelectedText});
            }
        }, {
            "text": langDict['batchDownload'],
            'className': 'btn btn-primary',
            "action": function () {
                var videos = [];

                table.rows().eq(0).each(function (index) {
                    var row = table.row(index), id = row.data().DT_RowId;
                    $('.selection[data-id=' + id + ']').prop('disabled') || ($('.selection[data-id=' + id + ']').prop('checked') && videos.push(id));
                });

                if (videos.length) {
                    for (var id in videos) for (var i in playbackList) if (playbackList[i].id == videos[id]) {
                        if (!es5_includes(downloaded, videos[id])) { // avoid re-deownload
                            downloaded.push(videos[id]);
                            $.fileDownload(playbackList[i].downloadUrl).done(function () {
                            }).fail(function () {
                            });
                        }
                        break;
                    }
                } else
                    $.growl.warning({message: langDict.noneSelectedText});
            }
        }],
        "columnDefs": [{"targets": [0]},
        ], "fnRowCallback": function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
            $('img', nRow).lazyLoadXT();
        }, "fnDrawCallback": function (oSettings, oData) {
            $('.video-utc-time').each(function () {
                var td = $(this), time = td.text().replace(' ', '');
                td.html('<i class="far fa-calendar-plus text-info">&ensp;</i>' + moment(time).local().format('YYYY-MM-DD HH:mm:ss'));
            });
        }, 'fnInitComplete': function (oSettings, json) {
            $('.dt-buttons').find('button').each(function () {
                $(this).removeClass('btn-secondary').attr('data-loading-text', '<span class=\'spinner-grow spinner-grow-sm\'></span>');
            });
            loading(false);
        }, "ajax": $.fn.dataTable.pipeline(init, function (a) {
            if (!a.error) {
                playbackList = a.origin;
                initialed || ($.growl.notice({message: langDict['result'] + ': ' + a.total + ' ' + langDict['videos']}), initialed = true);
            }
        })
    });

    ajax('PUT', '/agent/api', data_format('/api/user/tree', 0, 'GET', {}, null), function (a) {
        if (a.error) $.growl.error({message: a.error}); else {

            object.user = recursive(a, false, 'user');
            object.group = recursive(a, true, 'group');

            $('#user_tree').jstree({
                "plugins": ["wholerow", "changed", "search", "grid", 'ui', 'checkbox'],
                "search": {"show_only_matches": false, "show_only_matches_children": false},
                'core': {
                    'data': object.user,
                    'themes': {
                        'name': 'proton',
                        'responsive': true,
                        'variant': 'large'
                    }, "dnd": {
                        'copy_modifier': false,
                        'check_while_dragging': true
                    }, 'check_callback': true
                },
                "grid": {
                    columns: [
                        {'header': '&nbsp;', 'value': 'id', 'width': '50%'},
                        {'header': langDict.name, 'value': 'name', 'width': '30%'},
                        {'header': langDict.title, 'value': 'title', 'width': '30%'}
                    ],
                    resizable: true,
                    width: '100%',
                }
            }).bind("loaded.jstree changed.jstree", function (event, data) {
                try {
                    $(this).jstree('open_node', 'user_group_' + $('[name="_group"]').attr('content').split('_')[1]);
                } catch (e) {
                    //$(this).jstree('open_all');
                }
            });

            $('#group_tree').jstree({
                "core": {
                    "check_callback": true,
                    'themes': {'name': 'proton', "variant": "large"},
                    "data": object.group
                }, "plugins": ["wholerow", "changed", "search"],
                "search": {"show_only_matches": false, "show_only_matches_children": false}
            }).bind("loaded.jstree changed.jstree", function (event, data) {
                try {
                    $(this).jstree('open_node', 'group_group_' + $('[name="_group"]').attr('content').split('_')[1]);
                } catch (e) {
                    //$(this).jstree('open_all');
                }
            }).on('select_node.jstree', function (event, data) {
                var target = data.node.original;
                $('#select_group').empty().append('<option value="' + target.more.id + '">' + target.text + '</option>').selectpicker('refresh');
                $('#group_modal').modal('hide');
            });

            $('#searchBtn').button('reset');
        }
    });

    $(document).on('click', '#videos .play-icon', function (e) {
        switch (e.type) {
            case 'click':
                var id = $(this).attr('data-id');

                $('#video_download').attr('onclick', '');
                $('#video_info').empty();
                foucs = {};
                $('#video_title').val('');

                for (var i in playbackList) {
                    if (playbackList[i]['id'] == id) {

                        foucs = playbackList[i];

                        $('#player_modal').find('.modal-title').text(foucs.user.id);
                        $('#video_title').val(foucs.title);
                        $('#video_content').html(foucs.content);
                        var info = '<tr><th>' + langDict.startTime + '</th><td>' + moment(foucs.startTime).local().format('YYYY-MM-DD HH:mm:ss') + '</td></tr>';
                        info += '<tr><th>' + langDict.endTime + '</th><td>' + (foucs.stopTime ? moment(foucs.stopTime).local().format('YYYY-MM-DD HH:mm:ss') : '') + '</td></tr>';
                        info += '<tr><th>' + langDict.deviceModel + '</th><td>' + foucs.device.info.type + '</td></tr>';
                        info += '<tr><th>' + langDict.fileSize + '</th><td>' + formatBytes(foucs.size, 0, 1024) + '</td></tr>';
                        info += '<tr><th>' + langDict.fileType + '</th><td>' + foucs.type + '</td></tr>';
                        $('#video_info').append(info);
                        $('#video_download').attr('onclick', 'window.location.href=\'' + foucs.downloadUrl + '\'');
                        break;
                    }
                }

                $('#player_modal').modal({
                    backdrop: 'static',
                    keyboard: true,
                    show: true
                });
                break;
        }
    });
    $(document).on('click', '#video_btn', function (e) {
        var btn = $(this), obj = {'id': foucs.id};
        if ($('#video_title').val() != foucs.title) {
            obj.title = $('#video_title').val();
            btn.button('loading');
            ajax('PUT', '/agent/api', data_format('/api/video', 0, 'PUT', obj, null), function (a) {
                if (a.error) $.growl.error({message: a.error}); else {
                    $.growl.notice({message: langDict.wasModified});
                    foucs.title = obj.title;
                    $('.video-title[data-id=' + obj.id + ']').val(obj.title);
                }
                btn.button('reset');
            });
        } else
            $.growl.warning({message: langDict.notChanged});
    });
    $(document).on('click', '#table_btn', function (e) {
        var btn = $(this), title = btn.closest('.input-group').find('input'), vid = title.attr('id').split('_')[1],
            temp;
        for (var i in playbackList) if (playbackList[i]['id'] == vid) {
            temp = i;
            break;
        }
        if (title.val() != playbackList[temp]['title']) {
            btn.button('loading');
            ajax('PUT', '/agent/api', data_format('/api/video', 0, 'PUT', {
                'id': vid,
                'title': title.val()
            }, null), function (a) {
                a.error ? $.growl.error({message: a.error}) : ($.growl.notice({message: langDict['wasModified']}), playbackList[temp]['title'] = title.val());
                btn.button('reset');
            });
        }
    });
    var plyr = null, hls = null, controls = [
        'play-large', // The large play button in the center
        //'restart', // Restart playback
        'rewind', // Rewind by the seek time (default 10 seconds)
        'play', // Play/pause playback
        'fast-forward', // Fast forward by the seek time (default 10 seconds)
        'progress', // The progress bar and scrubber for playback and buffering
        'current-time', // The current time of playback
        'duration', // The full duration of the media
        'mute', // Toggle mute
        'volume', // Volume control
        'captions', // Toggle captions
        'settings', // Settings menu
        'airplay', // Airplay (currently Safari only)
        'fullscreen', // Toggle fullscreen
    ];

    if (parseInt($('[name="_video"]').attr('content')) != 0) {
        controls.push('download');
    }

    $('#player_modal').on('show.bs.modal shown.bs.modal hidden.bs.modal', function (e) {
        switch (e.type) {
            case 'show':
                plyr = new Plyr('#plyr', {
                    controls: controls,
                    speed: {selected: 1, options: [0.5, 1, 2, 4, 8, 16]}
                });

                if (foucs.type.toLowerCase() == 'hls') {

                    $('#video_download').hide();

                    if (Hls.isSupported()) {
                        hls = new Hls();
                        hls.loadSource(foucs.videoUrl);
                        hls.attachMedia(document.querySelector('#plyr'));
                        hls.on(Hls.Events.MANIFEST_PARSED, function () {
                            plyr.play();
                        });
                    } else if (navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i)) {
                        plyr.source = {
                            "type": 'video',
                            "poster": foucs['snapshotUrl'],
                            "sources": [{"src": foucs['videoUrl'], "type": 'video/mp4'}]
                        };
                    }
                } else {
                    parseInt($('[name="_video"]').attr('content')) == 0 ? $('#video_download').hide() : $('#video_download').show();
                    $('#plyr').attr({'poster': foucs.snapshotUrl, 'src': foucs.videoUrl});
                }

                gps = {};
                var gps_text = '';
                get_gps_data(foucs['id'], function (a) {
                    if (!a.error && a['gpsList']) {
                        for (var i in a['gpsList']) {
                            var local = moment(a['gpsList'][i]['timestamp']).format('YYYY-MM-DD HH:mm:ss');
                            gps_text += '<li class="list-group-item" id="gpsItem_' + moment(a['gpsList'][i]['timestamp']).unix() + '">' + local + ':&nbsp;&nbsp;' + a['gpsList'][i]['latitude'] + ',  ' + a['gpsList'][i]['longitude'] + '</li>';
                            gps[local] = a['gpsList'][i];
                        }
                    }
                    $('#gps_list').html(gps_text);
                });

                break;
            case 'shown':
                $('#map1').height($('video').height());
                $('#gps_list').width($('#gps_list').parent().width());
                if (!map1) map1 = map_initial('map1');

                if (markers['_lastOne']) {
                    map1.removeLayer(markers['map1'][markers['_lastOne']]['point']);
                    for (var i in map1._layers) if (map1._layers[i]._path != undefined) {
                        try {
                            map1.removeLayer(map1._layers[i]);
                        } catch (e) {
                            console.warn("problem with " + e + map1._layers[i]);
                        }
                    }
                    markers['_lastOne'] = null;
                }

                var video = $('video').get(0), temp = null, last_li = null;

                if (Object.keys(gps).length == 1) {
                    for (var i in gps) {
                        handlerMarker(map1, {
                            'id': foucs.id,
                            'gps': gps[i]
                        }, false, true, null, gps);
                    }
                } else if (Object.keys(gps).length >= 1) {
                    video.ontimeupdate = function (e) {
                        var tsmp = moment(foucs['startTime']).add(Math.floor(video.currentTime), 'second').format('YYYY-MM-DD HH:mm:ss'),
                            unix = moment(tsmp).unix();

                        if (temp != tsmp && gps[tsmp]) {
                            last_li && last_li.removeClass('active');
                            $('#gpsItem_' + unix).addClass('active');
                            var list = $('#gps_list')[0].children, scroll_height = 0;
                            for (var i in list) {
                                if ($('#' + list[i]['id']).hasClass('active')) break;
                                (i >= 1) && (scroll_height += ($('#' + list[i]['id']).outerHeight() + 3));
                            }
                            last_li && $('#autoScroll').prop('checked') && $('#gps_list').animate({scrollTop: scroll_height});
                            handlerMarker(map1, {
                                'id': foucs.id,
                                'gps': gps[tsmp]
                            }, true, true, tsmp, gps);
                            temp = tsmp;
                            last_li = $('#gpsItem_' + unix);
                        }
                    };
                }
                video.onended = function (e) {
                    //todo: play next video
                    //console.log(video)
                };

                $('#gps_list').height($('#video_info').height() - 32);
                break;
            case 'hidden':
                hls && (hls.stopLoad(), hls.destroy(), hls = null);

                // pending issue from chrome.
                const _video = $('#player').find("video").get(0);
                _video.pause();
                _video.src = "";
                _video.load();
                _video.remove();

                plyr && (plyr.stop(), plyr.destroy(), plyr = null);
                $('#player').html('<video preload="none" id="plyr" autoplay controls crossorigin></video>');
                break;
        }
    });
    $(document).on('click mouseenter mouseleave', '[id^=gpsItem_]*', function (e) {
        if ($(this).attr('id').split('_').length == 2) switch (e.type) {
            case 'click':
                var tsmp = $(this).attr('id').split('_')[1], instance = $('video')[0];
                tsmp && instance && foucs['startTime'] && (instance.currentTime = (tsmp - Date.parse(foucs['startTime'])) / 1000);
                break;
            case 'mouseenter':
                $(this).css('cursor', 'pointer');
                $(this).css('border', "solid 2px #666");
                break;
            case 'mouseleave':
                $(this).css('border', "");
                break;
        }
    });
    $('[id^=condition_]*').on('click', function () {
        var checked = $(this).prop('checked'), target = $(this).attr('id').split('_')[1];
        (checked) ? $('#' + target + '_row').show() : $('#' + target + '_row').hide();
        $('#searchBtn').prop('disabled', !($('#condition_group').prop('checked') || $('#condition_users').prop('checked') || $('#condition_time').prop('checked') || $('#condition_npa').prop('checked')));
    });
    $('[id$=_search_btn]').on('click', function (e) {
        var btn = $(this), tree = $('#' + btn.attr('id').split('_')[0] + '_tree'),
            val = btn.closest('.input-group').find('input').val();
        val && (btn.button('loading'), setTimeout(function () {
            try {
                tree.jstree(true).search(val);
                tree.find('.jstree-search:eq(0)')[0].scrollIntoView();
            } catch (e) {
                $.growl.warning({message: langDict.notFound});
            }
            btn.button('reset');
        }, 300));
    });

    $('#select_group').on('show.bs.select', function (e, clickedIndex, isSelected, previousValue) {
        $('#group_search').val('');
        $('#group_tree').jstree(true).search('');
        $('#group_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });

    $('#select_users').on('show.bs.select', function (e, clickedIndex, isSelected, previousValue) {
        $('#user_search').val('');
        $('#user_tree').jstree(true).search('');
        $('#user_modal').modal({
            backdrop: 'static',
            keyboard: true,
            show: true
        });
    });

    $(document).on('click', '.video-keep', function (e) {
        ajax('PUT', '/agent/api', data_format("/api/video/update", 0, "POST", {
            "id": [$(this).attr('data-id')],
            "keep": $(this).prop('checked') ? 1 : 0
        }, null), function (a) {
            if (a.error) {
                $.growl.error({message: a.error});
            } else {
                $.growl.notice({message: langDict.wasModified});
            }
        });
    });
    $('#users_apply').on('click', function () {
        var tree = $('#user_tree'), selected = tree.jstree('get_selected'), selection = $('#select_users');
        selection.empty();
        for (var i in selected) {
            var node = tree.jstree().get_node(selected[i]).original;
            (node.icon != icons.users) && selection.append('<option selected>' + node.more.id + '</option>');
        }
        selection.selectpicker('refresh');
    });
    $('#searchBtn').on('click', function () {
        var btn = $(this), data = {}, condition = false;
        $('#condition_group').prop('checked') && $('#select_group').val().length && (data['group'] = [$('#select_group').val()], condition = true);
        $('#condition_users').prop('checked') && $('#select_users').val().length && (data['postID'] = $('#select_users').val(), condition = true);
        $('#condition_npa').prop('checked') && $('#select_npa').val().length && (data['npa'] = [$('#select_npa').val()], condition = true);
        if ($('#condition_time').prop('checked')) {
            data['startTime'] = $('#search_time').data('daterangepicker').startDate.format('YYYY-MM-DDTHH:mm:ssZ');
            data['stopTime'] = $('#search_time').data('daterangepicker').endDate.format('YYYY-MM-DDTHH:mm:ssZ');
            condition = true;
        }
        if (condition) {
            btn.button('loading');
            initialed = false;
            var conditions = data_format('/api/video/search', 0, 'POST', data, null);
            video_search(table, conditions, function (a) {
                if (!a.error) {
                    playbackList = a.origin;
                    initialed || ($.growl.notice({message: langDict['result'] + ': ' + a.total + ' ' + langDict['videos']}), initialed = true);
                }
                btn.button('reset');
            });
        }
    });
});