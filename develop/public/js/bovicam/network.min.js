function network_group(obj, tables, sn) {
    // GPS Panel
    for (var i in obj.gps)
        if (typeof (obj.gps[i]) === "boolean")
            $('#camSet_network_gps_' + i).prop('checked', obj.gps[i]);
        else
            $('#camSet_network_gps_' + i).val(obj.gps[i]).selectpicker('refresh');


    //SmartLink Panel
    var priority = '';
    $('#camSet_network_smartlink_enabled').prop('checked', obj.smartlink.enabled);
    $('#camSet_network_smartlink_target').val(obj.smartlink.target).selectpicker('refresh');
    $('#camSet_network_smartlink_interval').val(obj.smartlink.interval);

    host_logic_ui(obj.smartlink.target, obj.smartlink.ips);

    if (obj.smartlink.mode == 'latency')
        $('#camSet_network_smartlink_priority').val('latency').selectpicker('refresh');
    else
        $('#camSet_network_smartlink_priority').val(JSON.stringify(obj.smartlink.priority)).selectpicker('refresh');


    //Wired Panel
    $('#camSet_netConn_wired_dhcp').val(obj.ips.wired.dhcp ? 'Auto' : 'Manual').selectpicker('refresh');
    conn_visible('wired', !obj.ips.wired.dhcp);
    for (var i in obj.ips.wired)
        i == 'dhcp' || $('#camSet_netConn_wired_' + i).val(obj.ips.wired[i]);
    $('#camSet_netConn_wired_static').find('input').each(function () {
        ip_feild_validate($(this));
    });

    //Wi-Fi Panel
    var ap_ssid = obj.ap.ssid.useDefault ? obj.ap.ssid.default : obj.ap.ssid.custom;
    if (obj.wifi && !obj.wifi.error) {
        var current_cfg = ObjValue(obj.wifi, 'current', true);
        $('#camSet_netConn_wifi_ssid').empty();
        $('#camSet_netConn_wifi_cfgs').empty();

        for (var i in obj.wifi) {
            $('#camSet_netConn_wifi_cfgs').append('<option>' + obj.wifi[i].ssid + '</option>');
            if (obj.wifi[i].encryption == "NONE")
                $('#camSet_netConn_wifi_ssid').append('<option value="' + obj.wifi[i].ssid + '" data-icon="fas fa-lock-open">' + obj.wifi[i].ssid + '</option>');
            else
                $('#camSet_netConn_wifi_ssid').append('<option value="' + obj.wifi[i].ssid + '" data-icon="fas fa-lock">' + obj.wifi[i].ssid + '</option>');
        }
        $('#camSet_netConn_wifi_ssid').selectpicker('refresh');
        $('#camSet_netConn_wifi_cfgs').selectpicker('refresh');
        if (current_cfg.length) {
            $('#camSet_netConn_wifi_ssid').val(current_cfg[0]['ssid']).selectpicker('refresh');
            $('#camSet_netConn_wifi_encryption').val(current_cfg[0]['encryption']).selectpicker('refresh');
            switch (current_cfg[0]['encryption']) {
                case 'WPA-PSK':
                    encryption_ui_logi('WPA-PSK');
                    $('#camSet_netConn_wifi_passwd').attr('placeholder', '(unchanged)');
                    break;
                case 'NONE':
                    encryption_ui_logi('NONE');
                    break;
            }
        } else {
            $('#camSet_netConn_wifi_encryption').val('NONE').selectpicker('refresh');
            encryption_ui_logi('NONE');
        }
    }
    $('#camSet_netConn_wifi_dhcp').val(obj.ips.wifi.dhcp ? 'Auto' : 'Manual').selectpicker('refresh');
    conn_visible('wifi', !obj.ips.wifi.dhcp);
    for (var i in obj.ips.wifi) i == 'dhcp' || $('#camSet_netConn_wifi_' + i).val(obj.ips.wifi[i]);
    $('#camSet_netConn_wifi_static').find('input').each(function () {
        ip_feild_validate($(this));
    });
    wifi_validate(ap_ssid);


    //AP Panel
    //todo: integrate platform check
    $('#camSet_netConn_ap_enabled').prop('checked', obj.ap.enabled);
    var sw = sn.length > 8;
    if (sw) {
        $('a[href$=camSet_netConn_sw]').removeClass('disabled');

        if (obj.ap.enabled) {
            $('#camSet_netConn_sw_mode').val('AP').selectpicker('refresh');
            $('a[href$=camSet_netConn_ap]').tab('show');
        } else {
            $('#camSet_netConn_sw_mode').val('Client').selectpicker('refresh');
            $('a[href$=camSet_netConn_client]').tab('show');
        }
    } else {
        $('a[href$=camSet_netConn_sw]').addClass('disabled');
        $('a[href$=camSet_netConn_client]').tab('show');
    }
    $('#camSet_netConn_ap_hidden').prop('checked', obj.ap.hidden);
    if (obj.ap.ssid.useDefault) {
        $('#camSet_netConn_ap_ssid').val(obj.ap.ssid.default);
    } else {
        $('#camSet_netConn_ap_ssid').val(obj.ap.ssid.custom);
    }
    ap_validate();


    //LTE Panel
    $('#camSet_netConn_lte_apn').val(obj.lte.apn);
    $('#camSet_netConn_lte_username').val(obj.lte.username);


    // Firewall Panel
    var tmp = [];
    for (var port in obj.firewall.rules) {
        var edit, del;
        obj.firewall.rules[port].define == 'system' ? (edit = '<i class="fas fa-ban text-danger"></i>', del = '<i class="fas fa-ban text-danger"></i>') : (edit = '<i class="fas fa-edit text-primary custom-edit" style="cursor: pointer"></i>', del = '<i class="fas fa-times text-danger custom-del" style="cursor: pointer"></i>');
        port == 'icmp' && (edit = null);
        tmp.push([obj.firewall.rules[port].define, obj.firewall.rules[port].name, obj.firewall.rules[port].protocol.toUpperCase(), port, edit, del]);
    }
    $('#camSet_network_fw_enabled').prop('checked', obj.firewall.enabled);
    tables.rows.add(tmp).order([[0, "desc"], [3, "desc"], [2, "desc"]]).draw(false);
}

function host_logic_ui(val, ips) {
    $.each(['ip', 'port'], function (index, value) {
        $('#camSet_network_smartlink_' + value).prop('disabled', es5_includes(['vpn', 'publishing'], val));
        $('#camSet_network_smartlink_' + value).val(ips[val][value]);
    });
}

function clear_editor() {
    $.each([$("#camSet_network_fw_edit_name"), $("#camSet_network_fw_edit_port")], function (index, elm) {
        elm.val('');
    });
    $("#camSet_network_fw_edit_protocol").val('all').selectpicker('refresh');
    $('#camSet_network_fw_edit_port_row').show();
}

function fw_validate() {
    var name = $("#camSet_network_fw_edit_name").val(),
        portocol = $("#camSet_network_fw_edit_protocol").val(),
        port = $("#camSet_network_fw_edit_port").val(),
        range = port.split(':');
    switch (range.length) {
        case 1:
            port = (parseInt(range[0]) <= 65535 && parseInt(range[0]) != 0);
            break;
        case 2:
            var start = parseInt(range[0]), end = parseInt(range[1]);
            port = (end >= start && end <= 65535 && end != 0 && start <= 65535 && start != 0);
            break;
        default:
            port = false;
            break;
    }
    portocol == 'icmp' && (port = true);
    $('#camSet_network_fw_edit_apply').prop('disabled', !(name && portocol && port));
}

function ip_address_validate(ipaddr) {
    var ipReg = /^(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})(\.(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[0-9]{1,2})){3}$/;
    return ipReg.test(ipaddr);
}

function ip_feild_validate(e) {
    const validation = ip_address_validate(e.val());

    if (validation && e.hasClass('is-invalid')) {
        e.removeClass('is-invalid').addClass('is-valid');
    } else if (!validation && e.hasClass('is-valid')) {
        e.removeClass('is-valid').addClass('is-invalid');
    }
    return validation;
}

function get_ethernet_ip(iface) {
    var obj = {}, field = ['ip', 'mask', 'gateway', 'dns'];
    $('#camSet_netConn_' + iface + '_dhcp').val() == 'Auto' ? obj.dhcp = true : obj.dhcp = false;
    if (!obj.dhcp) for (var i in field)
        obj[field[i]] = $('#camSet_netConn_' + iface + '_' + field[i]).val();
    return obj;
}

function passwd_validate(e) {
    var id = e.attr('id'), fine = false;
    if (id == 'camSet_netConn_wifi_passwd') {
        if (e.attr('placeholder') == '(unchanged)')
            (e.val().length == 0 || e.val().length >= 8) && (fine = true);
        else if (e.attr('placeholder') == 'Password')
            e.val().length >= 8 && (fine = true);
    } else {
        if (e.attr('placeholder') == '(unchanged)')
            (e.val().length == 0 || e.val().length >= 4) && (fine = true);
        else if (e.attr('placeholder') == 'Password')
            e.val().length >= 4 && (fine = true);
    }
    return fine;
}

function ap_validate() {
    var passwd = false, ssid = $('#camSet_netConn_ap_ssid').val().replace(' ', '').length;
    $("#camSet_netConn_ap_password").val().length >= 8 || 0 == $("#camSet_netConn_ap_password").val().length ? (passwd = !0, $("#camSet_netConn_ap_password_hint").hide()) : (passwd = !1, $("#camSet_netConn_ap_password_hint").show());
    $('#camSet_netConn_ap_apply').prop('disabled', !(ssid && passwd));
}

function wifi_validate(ap_ssid) {
    var btn = $('#camSet_netConn_wifi_apply'), cfg = false, dhcp = false, passwd = false,
        ssid = $('#camSet_netConn_wifi_hidden').prop('checked') ? $('#camSet_netConn_wifi_ssid_hidden').val() : $('#camSet_netConn_wifi_ssid').val(),
        ethernet = !$('#camSet_netConn_wifi_static').find('.is-invalid').length;
    ssid && ssid.length && ssid != ap_ssid ? cfg = true : cfg = false;
    $('#camSet_netConn_wifi_dhcp').val() == 'Auto' ? dhcp = true : dhcp = false;
    switch ($('#camSet_netConn_wifi_encryption').val()) {
        case 'WPA-PSK':
            passwd = passwd_validate($('#camSet_netConn_wifi_passwd'));
            if (dhcp)
                cfg && passwd ? btn.prop('disabled', 0) : btn.prop('disabled', 1);
            else
                cfg && passwd && ethernet ? btn.prop('disabled', 0) : btn.prop('disabled', 1);
            break;
        case 'NONE':
            if (dhcp)
                cfg ? btn.prop('disabled', 0) : btn.prop('disabled', 1);
            else
                cfg && ethernet ? btn.prop('disabled', 0) : btn.prop('disabled', 1);
            break;
    }
}

function wired_validate() {
    var dhcp = $('#camSet_netConn_wired_dhcp').val() == 'Auto', btn = $('#camSet_netConn_wired_apply');
    dhcp ? btn.prop('disabled', 0) : btn.prop('disabled', $('#camSet_netConn_wired_static').find('.is-invalid').length);
}

function conn_visible(field, view) {
    view ? $('#camSet_netConn_' + field + '_static').show() : $('#camSet_netConn_' + field + '_static').hide();
}

function encryption_ui_logi(val) {
    switch (val) {
        case 'WPA-PSK':
            $('#camSet_netConn_wifi_passwd').closest('.form-group').show();
            break;
        case 'NONE':
            $('#camSet_netConn_wifi_passwd').closest('.form-group').hide();
            break;
    }
    $('#camSet_netConn_wifi_passwd').attr('placeholder', 'Password').val('');
}