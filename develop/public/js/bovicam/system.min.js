function encryption_group(enalbed) {
    enalbed ? $('#camSet_system_encrypt_group').show() : $('#camSet_system_encrypt_group').hide();
}

function time_from(timefrom) {
    timefrom == 'NTP' ? ($('#camSet_system_time_ntp').show(), $('#camSet_system_time_manual').hide()) : ($('#camSet_system_time_ntp').hide(), $('#camSet_system_time_manual').show());
}

function toLocalTime(time, zone) {
    var format = 'YYYY-MM-DD HH:mm:ss';
    return moment(time).tz(zone).format(format);
}

function toTimeZone(time, zone) {
    var format = 'YYYY-MM-DD[T]HH:mm:ss[Z]';
    return moment(time, format).tz(zone).utc().format(format);
}

function time_form_validate() {
    switch ($('#camSet_system_time_time_from').val()) {
        case "NTP":
            $("#camSet_system_time_time_zone").val() ? $("#camSet_system_time_apply").prop("disabled", 0) : $("#camSet_system_time_apply").prop("disabled", 1);
            break;
        case "Manual":
            $('#camSet_system_time_ymdhms').val(moment().format("YYYY-MM-DD HH:mm:ss"));
            $("#camSet_system_time_sync").prop("checked") ? $("#camSet_system_time_apply").prop("disabled", !1) : moment($("#camSet_system_time_ymdhms").val(), "YYYY-MM-DD HH:mm:ss", !0).isValid() ? $("#camSet_system_time_apply").prop("disabled", !1) : $("#camSet_system_time_apply").prop("disabled", !0);
            break;
    }
}

function module_translate(obj) {
    var tmp = {};
    for (var i in obj) inArray(['python-wheels', 'debian-packages'], obj[i]['name']) ? tmp[obj[i]['name']] = obj[i]['files'] : tmp[obj[i]['name']] = obj[i]['version'];
    var translate = [], keys = Object.keys(tmp).sort();
    for (var i in keys) inArray(['python-wheels', 'debian-packages'], keys[i]) ? translate.push({
        'name': keys[i], 'files': tmp[keys[i]] ? tmp[keys[i]].sort() : []
    }) : translate.push({'name': keys[i], 'version': tmp[keys[i]]});
    return translate;
}

function system_group(obj) {
    time_panel(obj.time);
    firmware_panel(obj.firmware);
    changelog_panel(obj.changelog);
    disk_panel(obj.disk);
    encryption_panel(obj.encryption);
}

function time_panel(data) {
    $('#camSet_system_time_time_from').val(data.enabled ? 'NTP' : 'Manual').selectpicker('refresh');
    $('#camSet_system_time_time_zone').val(data.timezone).selectpicker('refresh');
    $('#camSet_system_time_interval').val(data.interval).selectpicker('refresh');
    $('#camSet_system_time_bovilive').prop('checked', data.boviLive.enabled);
    $('#camSet_system_time_ntp_host').val(data.boviLive.enabled ? data.boviLive.server : data.server);
    $('#camSet_system_time_ntp_host').prop('disabled', data.boviLive.enabled);
    time_from($('#camSet_system_time_time_from').val());
    $('#camSet_system_time_ymdhms').val(moment().format("YYYY-MM-DD HH:mm:ss"));
}

function firmware_panel(data) {
    for (var i in data) switch (i) {
        case 'date':
            $('#camSet_firmware_' + i).val(moment(data[i]).format('YYYY-MM-DD'));
            break;
        case 'modules':
            var translate = module_translate(data[i]);
            var html = '', files = '';
            for (var j in translate) switch (translate[j]['name']) {
                case 'python-wheels':
                case 'debian-packages':
                    var tmp = '';
                    for (var k in translate[j]['files']) tmp += translate[j]['files'][k] + '\n';
                    files += '<div class="form-group"><label class="control-label col-md-4">' + translate[j]['name'] + ':</label><div class="col-md-8"> <textarea class="form-control" rows="' + translate[j]['files'].length + '" class="form-control" style="font-family: monospace;height: 100%;width: 100%" readonly>' + tmp + '</textarea></div></div>';
                    break;
                default:
                    html += '<div class="form-group"><label class="control-label col-md-4">' + translate[j]['name'] + ':</label><div class="col-md-8"> <input type="text" class="form-control w-220" value="' + translate[j]['version'] + '" readonly/></div></div>';
                    break;
            }
            $('#camSet_firmware_modules1').find('.form-horizontal').html(html + files);
            break;
        default:
            $('#camSet_firmware_' + i).val(data[i]);
            break;
    }
}

function changelog_panel(data) {
    $('#camSet_firmware_changelog').find('textarea').empty().append(data.information);
}

function firmware_upgrade_panel(data, running) {
    if (data.error)
        $.growl.warning({'message': data.error});
    else {
        var elm = $('#camSet_firmware_install1'), btn = elm.find('.btn-danger'), bar = elm.find('.progress-bar');
        if (running) {
            switch (data.status) {
                case 'running':
                    var progress = (Math.round((data.installed / data.total) * 100)).toString();
                    bar.html(progress + '%');
                    bar.css('width', progress + '%');
                    bar.attr('aria-valuenow', progress);
                    elm.find('.progress').parent('.pd-best').show();
                    elm.find('p').hide();
                    btn.button('loading');
                    break;
                case 'success':
                    elm.find('.progress').parent('.pd-best').hide();
                    elm.find('p').show();
                    elm.find('p').html('Successfully');
                    btn.button('reset');
                    break;
                case 'error':
                    elm.find('.progress').parent('.pd-best').hide();
                    elm.find('p').show();
                    elm.find('p').html('Failed');
                    btn.button('reset');
                    break;
            }
        } else {
            elm.find('.progress').parent('.pd-best').hide();
            elm.find('p').show();
            elm.find('p').html('Inactive');
            btn.button('reset');
        }
    }
}

function encryption_panel(data) {
    if (typeof data === 'object')
        'enabled' in data && $('#camSet_system_encrypt_enabled').prop('checked', data.enabled);
}

function disk_panel(data) {
    if (typeof data === 'object') {
        'storage' in data && $('#camSet_system_format_disk').val(data.storage).selectpicker('refresh') && $('#camSet_system_record_disk').val(data.storage).selectpicker('refresh');
        'time' in data && $('#camSet_system_record_time').val(data.time);
        'space' in data && $('#camSet_system_record_space').val(data.space);
    }
}