function bovicam_worker(data, cb) {
    var timeout = 15;
    'timeout' in data && (timeout = data.timeout);
    ajax('PUT', '/agent/api', data_format('/api/device/ctrl', 0, 'POST', data, timeout), function (a) {
        cb(a);
    });
}

$(document).ready(function () {
    $('.overflow-auto').height($(window).height() * 0.73);

    var ap_ssid = null, scanned = [], custom_flag = {};

    var object = {'online': {}, 'selected': null, 'requester': null, 'ready': true, 'settings': {}},
        jq = function (myid) {
            return "#" + myid.replace(/(:|\.|\[|\]|,|=|@)/g, "\\$1");
        };

    var iptable = $('#camSet_network_fw_iptable').DataTable({
        "dom": 'Bfrtip',
        "buttons": [{
            "text": langDict['insert'],
            "action": function () {
                clear_editor();
                $('#camSet_network_fw_modal').modal({
                    backdrop: 'static',
                    keyboard: true,
                    show: true
                });
                fw_validate();
            }
        }], "iDisplayLength": 20,
        "columnDefs": [
            {"targets": [0], "visible": false, "searchable": false},
            {"targets": [1], "visible": true, "searchable": true},
            {"targets": [2], "visible": true, "searchable": true},
            {"targets": [3], "visible": true, "searchable": true},
            {"targets": [4], "visible": true, "searchable": true},
            {"targets": [5], "visible": true, "searchable": true}
        ], "language": {"url": 'files/' + lang + '.json'}
    });

    $('#device_tree').jstree({
        'plugins': ["wholerow", "changed", "search"],
        'core': {
            "check_callback": true,
            'data': [{
                'text': 'BoviCam',
                'icon': 'fas fa-list',
                'id': 'device_bovicam',
                'a_attr': {'class': 'text-primary'},
                'children': []
            }, {
                'text': 'APP',
                'icon': 'fas fa-list',
                'id': 'device_app',
                'a_attr': {'class': 'text-primary'},
                'children': []
            }],
            'themes': {
                'name': 'proton',
                'responsive': true,
                'variant': 'large'
            }
        }
    }).bind("changed.jstree", function (event, data) {
        var type = '', node = data.node, id = null, tree_control = function (state, current_id) {
            var cam = $('#device_tree').jstree('get_node', '#'), todoItem = [],
                action = state ? 'enable_node' : 'disable_node';

            for (var i in cam.children_d) if (cam.children_d[i] != current_id) todoItem.push(cam.children_d[i]);
            for (var i in todoItem) $('#device_tree').jstree(action, todoItem[i]);

            object.ready = state;
        };

        if (data.action == 'select_node' && node) {
            //console.log(node)

            if (node.icon == icons.phone) {
                id = node.id;
            } else if (node.icon == icons.user) {
                id = node.id.slice(0, -4);
            } else if (es5_includes(['device_app', 'device_bovicam'], node.id)) {
                id = object.selected;  // skip
            } else
                id = node.id;

            node = $('#device_tree').jstree('get_node', id);

            if (es5_includes([icons.offline, icons.online], node.icon)) {
                type = 'bovicam';
            } else if (es5_includes([icons.phone], node.icon)) {
                type = 'app'
            }

            if (object.selected != id) {

                // flush all status and setting
                // firewall editor flush
                // firewall table flush
                object.requester && window.clearTimeout(object.requester);
                $('.device-status-field').html('<i class="fas fa-circle-notch fa-spin"></i>');
                clear_editor();
                iptable.clear().draw();
                object.settings = {};

                $('#appSet_bovicast_username').attr('data-id', '').val('');
                $('#appSet_bovicast_flip').prop('checked', 0);
                $('#appSet_bovicast_mirror').prop('checked', 0);
                $('#appSet_bovicast_mute').prop('checked', 0);
                $('#appSet_bovicast_publish_enable').prop('checked', 0);
                $('#appSet_bovicast_record_enable').prop('checked', 0);

                if (object.ready) {

                    object.selected = id;
                    tree_control(false, id);

                    switch (type) {
                        case 'bovicam':
                            ['device_tab', 'system_tab', 'network_tab', 'firmware_tab'].forEach(function (e) {
                                $('a[href$=' + e + ']').removeClass('active disabled');
                                $('#' + e).removeClass('active');
                            });
                            $('a[href$=device_tab]').tab('show');
                            $('#app_group').hide();
                            $('#bovicam_group').show();

                            var _count = 0;

                            bovicam_status(id, function (a) {
                                a.error && clearTimeout(object.requester);
                                _count += 1;
                                _count == 2 && (tree_control(true, id));
                            });

                            bovicam_settings(id, function (obj) {
                                if (!obj.error) {
                                    var org = {'profile': {}, 'qos': [], 'api': {}};

                                    //profile = callback function;
                                    //qos = object.settings.qos;
                                    //video_source = object.settings.api.stream.source;

                                    org.api.system = {
                                        'time': obj['/api/system-mgr/time/settings'],
                                        'firmware': obj['/api/system-mgr/firmware'],
                                        'changelog': obj['/api/system-mgr/firmware/changelog'],
                                        'encryption': obj['/api/disk-mgr/encrypt/settings'],
                                        'disk': obj['/api/disk-mgr/setting'],
                                    };

                                    org.api.network = {
                                        'ips': obj['/api/network-mgr/ip-settings'],
                                        'wifi': obj['/api/network-mgr/wifi-networks/configured'],
                                        'ap': obj['/api/network-mgr/wifi-ap-settings'],
                                        'lte': obj['/api/network-mgr/modem-settings'],
                                        'firewall': obj['/api/network-mgr/firewall/settings'],
                                        'smartlink': obj['/api/network-mgr/smartlink-settings'],
                                        'gps': obj['/api/network-mgr/gps/settings']
                                    };

                                    org.api.stream = {
                                        'publishing': obj['/api/streaming-mgr/settings/publishing'],
                                        'channels': obj['/api/streaming-mgr/settings/channels'],
                                        'source': obj['/api/streaming-mgr/video-sources'],
                                        'videoProfile': obj['/api/streaming-mgr/profiles/video'],
                                        'osdProfile': obj['/api/streaming-mgr/profiles/osd'],
                                        'audioCodec': obj['/api/streaming-mgr/audio-codecs']
                                    };

                                    system_group(org.api.system);
                                    network_group(org.api.network, iptable, id);
                                    streaming_group(org.api.stream, id);

                                    channel_config({
                                        'source': org.api.stream.source,
                                        'profile': {},
                                        'qos': [],
                                        'channels': org.api.stream.channels
                                    }, id, function (profile, qos) {
                                        org.qos = qos;
                                        org.profile = profile;

                                        object.settings = org;
                                        //console.log(object);

                                        _count += 1;
                                        _count == 2 && (tree_control(true, id));

                                    });
                                }
                            });
                            break;
                        case 'app':
                            // todo: only support 'android-bovicast-offline'
                            var data = node.original.more, cfg = data.configs['android-bovicast-offline'];

                            ['device_tab', 'system_tab', 'network_tab', 'firmware_tab'].forEach(function (e) {
                                $('a[href$=' + e + ']').removeClass('active').addClass('disabled');
                                $('#' + e).removeClass('active');
                            });

                            $('a[href$=streaming_tab]').tab('show');
                            $('#app_group').show();
                            $('#bovicam_group').hide();

                            $('#appSet_bovicast_username').attr('data-id', data.id).val(cfg.username);
                            $('#appSet_bovicast_camera').val(cfg.cameraIndex).selectpicker('refresh');
                            $('#appSet_bovicast_flip').prop('checked', cfg.upsideDown);
                            $('#appSet_bovicast_mirror').prop('checked', cfg.mirror);
                            $('#appSet_bovicast_mute').prop('checked', cfg.mute);
                            $('#appSet_bovicast_publish_enable').prop('checked', cfg.doStreaming);
                            $('#appSet_bovicast_record_enable').prop('checked', cfg.doRecording);

                            tree_control(true, id);
                            break;

                        default:
                            tree_control(true, id);
                            break;

                    }
                } else
                    $.growl.warning({message: langDict.busyPtz});
            }
        }
    });

    $('[id$=_search_btn]').on('click', function (e) {
        var btn = $(this), tree = $('#' + btn.attr('id').split('_')[0] + '_tree'),
            val = btn.closest('.input-group').find('input').val();
        val && (btn.button('loading'), setTimeout(function () {
            try {
                tree.jstree(true).search(val);
                tree.find('.jstree-search:eq(0)')[0].scrollIntoView();
            } catch (e) {
                $.growl.warning({message: langDict.notFound});
            }
            btn.button('reset');
        }, 300));
    });

    var _polling = function (cb) {
        var count = 0;
        ajax('PUT', '/agent/api', data_format('/api/device/list', 0, 'GET', {}, null), function (phone) {
            if (phone.error)
                $.growl.error({message: phone.error});
            else {
                for (var i in phone) if (phone[i].info.description && es5_includes(['android', 'ios'], phone[i].info.description.toLowerCase())) {
                    var dev = phone[i], node = $('#device_tree').jstree('get_node', dev.id);
                    // todo: currently only supoort android-bovicast-offline configuration
                    if (node) {
                        node.original.more = dev;
                        var _child = $('#device_tree').jstree('get_node', dev.id + '_ch1');

                        // has changed app of account
                        if (dev.configs['android-bovicast-offline'].username != _child.text) {
                            _child.text = dev.configs['android-bovicast-offline'].username;
                            _child.original.text = dev.configs['android-bovicast-offline'].username;
                            $('#device_tree').jstree('redraw_node', _child.id);
                        }

                    } else {
                        //Object.keys(dev.configs).length && console.log(dev);
                        if ('android-bovicast-offline' in dev.configs) {

                            var channels = [];
                            channels.push({
                                "text": dev.configs['android-bovicast-offline'].username,
                                "icon": icons.user,
                                'id': dev.id + '_ch1',
                                "state": {"selected": false},
                                'a_attr': {'class': 'text-secondary'}
                            });

                            $('#device_tree').jstree().create_node('#device_app', {
                                "text": dev.id,
                                'id': dev.id,
                                "icon": icons.phone,
                                "state": {"selected": false},
                                "more": dev,
                                "children": channels
                            }, "first", function () {
                                $('#device_tree').jstree('_open_to', dev.id);
                            });
                        }
                    }
                }
            }
            count += 1;
            count == 2 && (setTimeout(_polling, 5000), (cb && cb()));
        });

        ajax('PUT', '/agent/api', data_format('/api/device/ctrl/list', 0, 'GET', {}, null), function (device) {
            var _online = {};

            if (device.error)
                $.growl.error({message: device.error})
            else {
                for (var i in device) {
                    var dev = device[i], node = $('#device_tree').jstree('get_node', i);

                    _online[i] = dev;
                    object.online[i] = dev;

                    if (node) {
                        //console.log(node);

                        var icon = es5_includes(dev.live, 'running') ? icons.online : icons.offline;
                        if (icon != node.icon) {
                            node.icon = icon;
                            node.original.icon = icon;
                            $('#device_tree').jstree('redraw_node', i);
                        }

                        for (var cid = 0; cid < dev.channels.length; cid++) {
                            var _child = i + '_ch' + (cid + 1), _node = $('#device_tree').jstree('get_node', _child);
                            try {
                                if (_node && _node.text != dev.channels[cid]) {
                                    _node.text = dev.channels[cid];  // update channel of username
                                    _node.original.text = dev.channels[cid];
                                    $('#device_tree').jstree('redraw_node', _child);
                                }
                            } catch (e) {
                                console.error(i + ' channle formate error');
                            }
                        }
                        // update original node data
                        node.original.more = dev;

                    } else {
                        var channels = [];

                        for (var cid = 0; cid < dev.channels.length; cid++) channels.push({
                            "text": dev.channels[cid],
                            "icon": icons.user,
                            'id': i + '_ch' + (cid + 1),
                            "state": {"selected": false},
                            'a_attr': {'class': 'text-secondary'}
                        });

                        $('#device_tree').jstree().create_node('#device_bovicam', {
                            "text": i,
                            'id': i,
                            "icon": es5_includes(dev.live, 'running') ? icons.online : icons.offline,
                            "state": {"selected": false},
                            "more": dev,
                            "children": channels
                        }, "first", function () {
                            $('#device_tree').jstree('_open_to', i);
                        });
                    }
                }
            }

            // remove not online device
            for (var i in object.online) if (!(i in _online)) {
                delete object.online[i];

                if (object.selected == i) {
                    object.selected = null;
                }

                $('#device_tree').jstree().delete_node(i, function () {
                    console.warn(i + ' was offline');
                });
            }
            count += 1;
            count == 2 && (setTimeout(_polling, 5000), (cb && cb()));
        });
    }, bovicam_status = function (key, cb) {
        ajax('PUT', '/agent/api', data_format('/api/device/ctrl', 0, 'POST', {
            'payload': {},
            'target': 'get',
            'url': '/api/status-mgr/all',
            'sn': key
        }, null), function (a) {
            if (a.error)
                $.growl.error({message: a.error});
            else {
                object.requester && window.clearTimeout(object.requester);
                if (key == object.selected) {

                    bovicam(a);

                    object.requester = setTimeout(function () {
                        bovicam_status(key);
                    }, 5000);
                }
            }
            cb && cb(a);
        });
    }, bovicam_settings = function (key, cb) {
        ajax('PUT', '/agent/api', data_format('/api/device/ctrl', 0, 'POST', {
            'payload': {},
            'target': 'all',
            'url': null,
            'sn': key
        }, null), function (a) {
            a.error && $.growl.error({message: a.error});
            cb(a);
        });
    };

    _polling(function () {
        loading(false);
    });

    var running = false;

    $('[id$=_video_dev]select').on('change', function (e) {
        var ch = $(this).attr('id').split("_video_dev")[0],
            dev = $(this).val(),
            cfg = ObjValue(object.settings.api.stream.source, 'name', dev)[0],
            dualstream = cfg['capabilities']['dualStreams'],
            flip = cfg['capabilities']['image']['flip'],
            mirror = cfg['capabilities']['image']['mirror'];

        dual_stream_ui_logic(ch, dualstream, flip, mirror);
        if (!object.settings.profile[dev]) {
            get_profile_info(dev, dualstream, object.settings.profile, ch, object.selected, function (ch, dualstream, new_profiles) {
                object.settings.profile = new_profiles;
                updateSubtext(ch, dualstream, object.settings.profile);
            });
        } else updateSubtext(ch, dualstream, object.settings.profile);
        customBtn(ch, dualstream);
    });
    $('[id$=_profile]select,[id$=_osd]select').on('change', function (e) {
        var chs = $(this).attr('id').split("_"), ch = chs[0] + '_' + chs[1] + '_' + chs[2],
            cfg = ObjValue(object.settings.api.stream.source, 'name', $('#' + ch + '_video_dev').val())[0],
            dualstream = cfg['capabilities']['dualStreams'];
        dualstream || $("#" + ch + "_record_" + chs[4]).val($("#" + ch + "_live_" + chs[4]).val()).selectpicker('refresh');
        customBtn(ch, dualstream);
        if (!dualstream && chs[4] == 'profile') {
            $('#' + ch + '_record_profile').find('option:selected').attr('data-subtext', $('#' + ch + '_live_profile').find('option:selected').attr('data-subtext')).selectpicker('refresh');
        }
    });
    $('[id^=camSet_stream_osd_text_]*,#camSet_stream_osd_ch_name_enb,#camSet_stream_osd_bitrate_enb').on('change', function (e) {
        osd_text_preview(object.settings.api.stream.source, videoSource);
    });
    $('#camSet_stream_osd_ch_name').on('keyup', function (e) {
        osd_text_preview(object.settings.api.stream.source, videoSource);
    });
    $('#camSet_stream_video_resolution').on('change', function (e) {
        video_profile_capabilities(object.settings.api.stream.source, videoSource, activity, $('#camSet_stream_video_resolution').val(), null);
    });
    $('#camSet_stream_retryUnlim').on('click', function (e) {
        ($(this).prop('checked')) ? ($('#camSet_stream_retryTimes').prop('disabled', 0), $('#camSet_stream_retryTimes').attr('placeholder', '')) : ($('#camSet_stream_retryTimes').prop('disabled', 1), $('#camSet_stream_retryTimes').attr('placeholder', 'Unlimited'));
    });
    $('[id$=_customBtn]').on('click', function (e) {
        var chs = $(this).attr('id').split("_"), ch = chs[0] + '_' + chs[1] + '_' + chs[2],
            modal = {backdrop: 'static', keyboard: true, show: true};
        activity = chs[3].toLowerCase();
        videoSource = $('#' + ch + '_video_dev').val();
        var cfg = ObjValue(object.settings.api.stream.source, 'name', videoSource)[0], module = chs[4].toLowerCase();

        switch (module) {
            case 'video':
                $('#camSet_stream_video_resolution').empty();
                var video = cfg['capabilities']['video'][activity];
                for (var i in video) {
                    $('#camSet_stream_video_resolution').append('<option data-subtext="' + video[i]['description'] + '">' + video[i]['value'] + '</option>');
                }
                $('#camSet_stream_video_resolution').selectpicker('refresh');
                var custom = ObjValue(object.settings.profile[videoSource][activity]['video'], 'name', 'Custom')[0];
                $('#camSet_stream_video_resolution').val(custom['resolution']).selectpicker('refresh');
                video_profile_capabilities(object.settings.api.stream.source, videoSource, activity, $('#camSet_stream_video_resolution').val(), custom);
                $('#camSet_stream_video_modal').modal(modal);
                break;
            case 'osd':
                var custom = ObjValue(object.settings.profile[videoSource][activity]['osd'], 'name', 'Custom')[0];
                $.each($('[id^=camSet_stream_osd_text_]select'), function () {
                    $(this).empty();
                });
                var fontSizes = cfg['capabilities']['osd']['fontSizes'];
                for (var i in fontSizes)
                    $('#camSet_stream_osd_text_size').append('<option>' + fontSizes[i] + '</option>');
                var fontColors = cfg['capabilities']['osd']['fontColors'];
                for (var i in fontColors)
                    $('#camSet_stream_osd_text_color').append('<option data-content="<span><i class=\'fa fa-square\' style=\'color:' + fontColors[i] + '\'></i> ' + fontColors[i] + '</span>">' + fontColors[i] + '</option>');
                var outlineColors = cfg['capabilities']['osd']['outlineColors'];
                if (outlineColors) {
                    $('#camSet_stream_osd_text_bg_row').show();
                    for (var i in outlineColors)
                        $('#camSet_stream_osd_text_bg').append('<option data-content="<span><i class=\'fa fa-square\' style=\'color:' + outlineColors[i] + '\'></i> ' + outlineColors[i] + '</span>">' + outlineColors[i] + '</option>');
                } else
                    $('#camSet_stream_osd_text_bg_row').hide();
                $.each($('[id^=camSet_stream_osd_text_]select'), function () {
                    $(this).selectpicker('refresh');
                });
                $('#camSet_stream_osd_ch_name').val(custom['text'].substring(0, 8));
                $('#camSet_stream_osd_ch_name_enb').prop('checked', custom['showName']);
                $('#camSet_stream_osd_bitrate_enb').prop('checked', custom['showBitrate']);
                $('#camSet_stream_osd_text_size').val(custom['fontSize']).selectpicker('refresh');
                $('#camSet_stream_osd_text_color').val(custom['fontColor']).selectpicker('refresh');
                $('#camSet_stream_osd_text_bg').val(custom['outlineColor']).selectpicker('refresh');
                osd_text_preview(object.settings.api.stream.source, videoSource);
                $('#camSet_stream_osd_modal').modal(modal);
                break;
        }
    });
    $('a[data-target="#camSet_stream_qos_modal"]').on('click', function (e) {
        try {
            var ch = $(this).parent('.input-group').find('input[type="checkbox"]').attr('id').match(/\d/g)[0],
                index = parseInt(ch) - 1;
            $('#camSet_stream_qos_modal').find('.modal-title').text('QoS Parameter of Channel ' + ch);
            for (var i in object.settings.qos[index]) $('#camSet_stream_' + i).val(object.settings.qos[index][i]);
            $('#camSet_stream_dropFrameMode').selectpicker('refresh');
        } catch (e) {
            $.growl.warning({message: 'No selected device'});
            return false;
        }
    });
    $('#camSet_netConn_ap_default').on('click', function (e) {
        try {
            $('#camSet_netConn_ap_ssid').val(object.settings.api.network.ap.ssid.default);
        } catch (e) {
        }
    });
    $('[id$=_apply]').on('click', function (e) {
        var url, obj = {}, btn = $(this), id = $(this).attr('id').split('_');
        if (id[0] == 'appSet') {
            switch (id[1]) {
                case 'bovicast':
                    btn.button('loading');
                    obj = {
                        'udid': $('#appSet_bovicast_username').attr('data-id'),
                        'type': 'android-bovicast-offline',
                        'config': {
                            'username': $('#appSet_bovicast_username').val(),
                            'doStreaming': $('#appSet_bovicast_publish_enable').prop('checked'),
                            'doRecording': $('#appSet_bovicast_record_enable').prop('checked'),
                            'mirror': $('#appSet_bovicast_mirror').prop('checked'),
                            'mute': $('#appSet_bovicast_mute').prop('checked'),
                            'upsideDown': $('#appSet_bovicast_flip').prop('checked'),
                            'cameraIndex': parseInt($('#appSet_bovicast_camera').val())
                        }
                    };
                    var data = data_format('/api/device/config', 0, 'PUT', obj, null);
                    ajax('PUT', '/agent/api', data, function (a) {
                        if (a.error)
                            $.growl.error({message: a.error});
                        else {
                            var _id = $('#appSet_bovicast_username').attr('data-id') + '_ch1',
                                node = $('#device_tree').jstree('get_node', _id);

                            if (node && node.text != obj.config.username) {
                                node.text = obj.config.username;
                                node.original.text = obj.config.username;
                                $('#device_tree').jstree('redraw_node', _id);
                            }
                            $.growl.notice({message: langDict.wasModified});
                        }
                        btn.button('reset');
                    });
                    break;
            }
        } else if (id[0] == 'camSet') {
            switch (id[1]) {
                case 'stream':
                    btn.button('loading');
                    if (btn.attr('id').endsWith('_adv_apply')) {
                        var isQoS = false, QoS_id, obj_tmp = {}, cid = null;
                        if (id[2] == 'publish') {
                            url = '/api/streaming-mgr/settings/publishing';
                            obj = {
                                'keepAliveInterval': parseInt($('#camSet_stream_keepAliveInterval').val()),
                                'statusReportInterval': parseInt($('#camSet_stream_statusReportInterval').val())
                            };
                            if ($('#camSet_stream_retryTimes').val() == '0') {
                                obj.autoRetry = false;
                            } else if ($('#camSet_stream_retryTimes').val() == '-1') {
                                obj.autoRetry = true;
                                obj.maxRetries = -1;
                            } else {
                                obj.autoRetry = true;
                                obj.maxRetries = parseInt($('#camSet_stream_retryTimes').val());
                            }
                        } else if (id[2] == 'qos') {
                            cid = $('#camSet_stream_qos_modal').find('.modal-title').text().match(/\d/g)[0];
                            url = '/api/streaming-mgr/settings/channels/' + cid;
                            for (var i in object.settings.qos[0]) {
                                obj[i] = parseInt($('#camSet_stream_' + i).val());
                            }
                            isQoS = true;
                            obj_tmp = obj;
                            obj = {'qos': obj};
                            QoS_id = parseInt(cid) - 1;
                        }
                        if (object.selected && Object.keys(obj).length) {
                            bovicam_worker({
                                'payload': obj,
                                'target': 'put',
                                'url': url,
                                'sn': object.selected
                            }, function (a) {
                                if (a.error)
                                    $.growl.error({message: a.error});
                                else {
                                    $.growl.notice({message: langDict.wasModified});
                                    if (isQoS) object.settings.qos[QoS_id] = obj_tmp
                                }
                                btn.button('reset');
                            });
                        } else
                            btn.button('reset');

                    } else if (btn.attr('id').endsWith('_check_apply')) {
                        var ch = id[2], vdev = $('#camSet_stream_' + ch + '_video_dev').val();
                        if (object.selected && vdev) {
                            bovicam_worker({
                                'payload': {},
                                'target': 'get',
                                'url': '/api/streaming-mgr/video-sources/' + vdev + '/status',
                                'sn': object.selected
                            }, function (a) {
                                a.error ? $.growl.warning({message: a.error}) : (a.connected ? $.growl.notice({message: vdev + ' is available.'}) : $.growl.warning({message: vdev + ' is unavailable.'}));
                                btn.button('reset');
                            });
                        } else
                            btn.button('reset');

                    } else if (btn.attr('id').endsWith('_preview_apply')) {
                        var module = id[2];
                        url = '/api/streaming-mgr/profiles/' + module + '/' + videoSource + '/' + activity + '/custom';
                        if (id[2] == 'video') {
                            var range = $('#camSet_stream_video_bitrate')[0].noUiSlider.get().map(Number);
                            obj = {
                                'resolution': $('#camSet_stream_video_resolution').val(),
                                'fps': fps[parseInt($('#camSet_stream_video_fps')[0].noUiSlider.get())],
                                'initBitrate': bitrate[range[0]],
                                'maxBitrate': bitrate[range[1]]
                            }
                        } else if (id[2] == 'osd') {
                            obj = {
                                'showName': $('#camSet_stream_osd_ch_name_enb').prop('checked'),
                                'showBitrate': $('#camSet_stream_osd_bitrate_enb').prop('checked'),
                                'fontSize': $('#camSet_stream_osd_text_size').val(),
                                'fontColor': $('#camSet_stream_osd_text_color').val(),
                                'text': $('#camSet_stream_osd_ch_name').val()
                            }
                            var outlineColor = ObjValue(object.settings.api.stream.source, 'name', videoSource)[0]['capabilities']['osd']['outlineColors'];
                            outlineColor && (obj.outlineColor = $('#camSet_stream_osd_text_bg').val());
                        }
                        if (object.selected && Object.keys(obj).length) {
                            bovicam_worker({
                                'payload': obj,
                                'target': 'put',
                                'url': url,
                                'sn': object.selected
                            }, function (a) {
                                if (a.error)
                                    $.growl.error({message: a.error});
                                else {
                                    custom_flag[videoSource] || (custom_flag[videoSource] = {});
                                    custom_flag[videoSource][activity] || (custom_flag[videoSource][activity] = {});
                                    custom_flag[videoSource][activity][module] = true;
                                    for (var i in object.settings.profile[videoSource][activity][module]) {
                                        if (object.settings.profile[videoSource][activity][module][i]['name'] == 'Custom') {
                                            for (var j in obj) object.settings.profile[videoSource][activity][module][i][j] = obj[j];
                                            break;
                                        }
                                    }
                                    module == 'video' && $('[id$=_video_dev]select').each(function (e) {
                                        if ($(this).val() == videoSource) {
                                            var ch = 'camSet_stream_ch' + (e + 1),
                                                dualstream = ObjValue(object.settings.api.stream.source, 'name', videoSource)[0]['capabilities']['dualStreams'];
                                            updateSubtext(ch, dualstream, object.settings.profile);
                                        }
                                    });
                                    $.growl.notice({message: langDict.wasModified});
                                }
                                btn.button('reset');
                            });
                        } else
                            btn.button('reset');
                    } else if (id[2] == 'publish') {
                        obj.version = $("#camSet_stream_publishingVersion").val();
                        obj.host = $("#camSet_stream_host").val();
                        obj.port = parseInt($("#camSet_stream_port").val());
                        obj.publishingDuration = parseInt($("#camSet_stream_publishingDuration").val());
                        object.selected ? bovicam_worker({
                            'payload': obj,
                            'target': 'put',
                            'url': '/api/streaming-mgr/settings/publishing',
                            'sn': object.selected
                        }, function (a) {
                            if (a.error)
                                $.growl.error({message: a.error});
                            else {
                                $.growl.notice({message: langDict.wasModified});
                                for (var i in obj) object.settings.api.stream.publishing[i] = obj[i];
                            }
                            btn.button('reset');
                        }) : btn.button('reset');
                    } else if (/^(ch)+\d/.test(id[2])) {
                        //console.log(object);

                        var getObj = function (target_obj, target, val) {
                            target_obj in obj || (obj[target_obj] = {});
                            obj[target_obj][target] = val;
                        };
                        var ch = 'camSet_stream_' + id[2], sw = $('#' + ch + '_enabled'),
                            cid = id[2].match(/\d/g)[0], idx, vdev = $('#' + ch + '_video_dev').val(),
                            dualstream = ObjValue(object.settings.api.stream.source, 'name', vdev)[0]['capabilities']['dualStreams'];

                        for (var i in object.settings.api.stream.channels) object.settings.api.stream.channels[i]['id'] == parseInt(cid) && (idx = i);
                        object.settings.api.stream.channels[idx]['video']['source'] != vdev && getObj('video', 'source', vdev);
                        object.settings.api.stream.channels[idx]['video']['flip'] != $('#' + ch + '_video_flip').prop('checked') && getObj('video', 'flip', $('#' + ch + '_video_flip').prop('checked'));
                        object.settings.api.stream.channels[idx]['video']['mirror'] != $('#' + ch + '_video_mirror').prop('checked') && getObj('video', 'mirror', $('#' + ch + '_video_mirror').prop('checked'));
                        if ((object.settings.api.stream.channels[idx]['live']['videoProfile'] != $('#' + ch + '_live_profile').val()) || ($('#' + ch + '_live_profile').val() == 'Custom' && custom_flag[vdev] && custom_flag[vdev]['live'] && custom_flag[vdev]['live']['video']))
                            getObj('live', 'videoProfile', $('#' + ch + '_live_profile').val());
                        if ((object.settings.api.stream.channels[idx]['live']['osdProfile'] != $('#' + ch + '_live_osd').val()) || ($('#' + ch + '_live_osd').val() == 'Custom' && custom_flag[vdev] && custom_flag[vdev]['live'] && custom_flag[vdev]['live']['osd']))
                            getObj('live', 'osdProfile', $('#' + ch + '_live_osd').val());
                        object.settings.api.stream.channels[idx]['live']['audioCodec'] != $('#' + ch + '_live_audio').val() && getObj('live', 'audioCodec', $('#' + ch + '_live_audio').val());
                        object.settings.api.stream.channels[idx]['live']['rtspPort'] != parseInt($('#' + ch + '_live_rtsp').val()) && getObj('live', 'rtspPort', parseInt($('#' + ch + '_live_rtsp').val()));
                        if (object.settings.api.stream.channels[idx]['live']['rtpPorts']['min'] != parseInt($('#' + ch + '_live_rtp1').val()) || object.settings.api.stream.channels[idx]['live']['rtpPorts']['max'] != parseInt($('#' + ch + '_live_rtp2').val()))
                            getObj('live', 'rtpPorts', {
                                'min': parseInt($('#' + ch + '_live_rtp1').val()),
                                'max': parseInt($('#' + ch + '_live_rtp2').val())
                            });
                        object.settings.api.stream.channels[idx]['live']['maxConnections'] != parseInt($('#' + ch + '_live_conn').val()) && getObj('live', 'maxConnections', parseInt($('#' + ch + '_live_conn').val()));
                        object.settings.api.stream.channels[idx]['recording']['audio'] != !$('#' + ch + '_record_audio').prop('checked') && getObj('recording', 'audio', !$('#' + ch + '_record_audio').prop('checked'));
                        object.settings.api.stream.channels[idx]['recording']['fileDuration'] != parseInt($('#' + ch + '_record_dur').val()) && getObj('recording', 'fileDuration', parseInt($('#' + ch + '_record_dur').val()));
                        object.settings.api.stream.channels[idx]['recording']['enableOnStart'] != $('#' + ch + '_record_enable').prop('checked') && getObj('recording', 'enableOnStart', $('#' + ch + '_record_enable').prop('checked'));
                        if (dualstream) {
                            if ((object.settings.api.stream.channels[idx]['recording']['videoProfile'] != $('#' + ch + '_record_profile').val()) || ($('#' + ch + '_record_profile').val() == 'Custom' && custom_flag[vdev] && custom_flag[vdev]['recording'] && custom_flag[vdev]['recording']['video']))
                                getObj('recording', 'videoProfile', $('#' + ch + '_record_profile').val());
                            if ((object.settings.api.stream.channels[idx]['recording']['osdProfile'] != $('#' + ch + '_record_osd').val()) || ($('#' + ch + '_record_osd').val() == 'Custom' && custom_flag[vdev] && custom_flag[vdev]['recording'] && custom_flag[vdev]['recording']['osd']))
                                getObj('recording', 'osdProfile', $('#' + ch + '_record_osd').val());
                        }
                        object.settings.api.stream.channels[idx]['publishing']['username'] != $('#' + ch + '_publish_user').val() && getObj('publishing', 'username', $('#' + ch + '_publish_user').val());
                        object.settings.api.stream.channels[idx]['publishing']['audio'] != !$('#' + ch + '_publish_audio').prop('checked') && getObj('publishing', 'audio', !$('#' + ch + '_publish_audio').prop('checked'));
                        object.settings.api.stream.channels[idx]['publishing']['enableOnStart'] != $('#' + ch + '_publish_enable').prop('checked') && getObj('publishing', 'enableOnStart', $('#' + ch + '_publish_enable').prop('checked'));
                        $('#' + ch + '_publish_passwd').val() && getObj('publishing', 'password', $('#' + ch + '_publish_passwd').val());

                        object.settings.api.stream.channels[idx]['enabled'] != sw.prop('checked') && (obj['enabled'] = sw.prop('checked'));

                        if (object.selected && Object.keys(obj).length) {
                            bovicam_worker({
                                'payload': obj,
                                'target': 'put',
                                'url': '/api/streaming-mgr/settings/channels/' + cid,
                                'sn': object.selected
                            }, function (a) {
                                if (a.error)
                                    $.growl.error({message: a.error});
                                else {
                                    $.growl.notice({message: langDict.wasModified});
                                    for (var i in obj) object.settings.api.stream.channels[idx][i] = obj[i];
                                }
                                sw.prop('disabled', false);
                                btn.button('reset');
                            });
                        } else
                            btn.button('reset');
                    }
                    break;
                case 'system':
                    if (id[2] == 'time') {
                        if (object.selected) {
                            btn.button('loading');
                            obj.enabled = $('#camSet_system_time_time_from').val() == 'NTP';
                            obj.timezone = $("#camSet_system_time_time_zone").val();

                            if (obj.enabled) {
                                obj.interval = parseInt($("#camSet_system_time_interval").val());
                                obj.server = $("#camSet_system_time_ntp_host").val();
                                obj.boviLive = {'enabled': $('#camSet_system_time_bovilive').prop('checked')};
                            } else {

                                if ($('#camSet_system_time_sync').prop("checked")) {
                                    obj.time = moment.utc().format("YYYY-MM-DD[T]HH:mm:ss[Z]")
                                } else {
                                    obj.time = toTimeZone($("#camSet_system_time_ymdhms").val(), obj.timezone);
                                }
                            }
                            bovicam_worker({
                                'payload': obj,
                                'target': 'put',
                                'url': '/api/system-mgr/time/settings',
                                'sn': object.selected
                            }, function (a) {
                                if (a.error)
                                    $.growl.error({message: a.error});
                                else {
                                    $.growl.notice({message: 'Successfully'});
                                    object.settings.api.system.time.timezone = obj.timezone;
                                }
                                btn.button('reset');
                            });
                        }
                    } else if (id[2] == 'format') {
                        // bootbox.confirm({
                        //     'title': langDict['aruYouSure'],
                        //     'message': 'If you format, all data on the disk will be deleted. This data cannot be restored. Are you sure you want to continue?',
                        //     'buttons': {
                        //         'cancel': {'label': '<i class="fa fa-times"></i> ' + langDict['cancel']},
                        //         'confirm': {'label': '<i class="fa fa-check"></i> ' + langDict['apply']}
                        //     },
                        //     'callback': function (confirm) {
                        //         if (confirm) {
                        //             btn.button('loading');
                        //             lasted ? bovicam_worker({
                        //                 'payload': {
                        //                     'storage': $('#camSet_system_format_disk').val(),
                        //                     'type': $('#camSet_system_format_type').val()
                        //                 },
                        //                 'target': 'put',
                        //                 'url': '/api/disk-mgr/format',
                        //                 'sn': lasted.id,
                        //                 'timeout': 60
                        //             }, function (a) {
                        //                 a.error ? $.growl.error({message: a.error}) : $.growl.notice({message: 'Successfully'});
                        //                 btn.button('reset');
                        //             }) : btn.button('reset');
                        //         }
                        //     }
                        // });
                    } else if (id[2] == 'record') {

                        if (object.selected) {

                            btn.button('loading');
                            obj.storage = $('#camSet_system_record_disk').val();
                            obj.space = parseInt($('#camSet_system_record_space').val());
                            obj.time = parseInt($('#camSet_system_record_time').val());

                            bovicam_worker({
                                'payload': obj,
                                'target': 'put',
                                'url': '/api/disk-mgr/setting',
                                'sn': object.selected
                            }, function (a) {
                                if (a.error)
                                    $.growl.error({message: a.error});
                                else {
                                    for (var item in obj) object.settings.api.system.disk[item] = obj[item];
                                    $.growl.notice({message: 'Successfully'});
                                }
                                btn.button('reset');
                            });
                        }

                    } else if (id[2] == 'encrypt') {

                        if (object.selected) {
                            btn.button('loading');

                            obj.enabled = $('#camSet_system_encrypt_enabled').prop('checked');
                            $('#camSet_system_encrypt_key').val() && (obj.password = $('#camSet_system_encrypt_key').val());

                            bovicam_worker({
                                'payload': obj,
                                'target': 'put',
                                'url': '/api/disk-mgr/encrypt/settings',
                                'sn': object.selected
                            }, function (a) {
                                if (a.error)
                                    $.growl.error({message: a.error});
                                else {
                                    object.settings.api.system.encryption.enabled = obj.enabled;
                                    $.growl.notice({message: 'Successfully'});
                                }
                                btn.button('reset');
                            });
                        }
                    }
                    break;
                case 'network':
                    if (id[2] == 'gps') {
                        btn.button('loading');

                        obj.enabled = $('#camSet_network_gps_enabled').prop('checked');
                        obj.interval = parseInt($('#camSet_network_gps_interval').val());
                        obj.baudRate = parseInt($('#camSet_network_gps_baudRate').val());
                        obj.reporting = $('#camSet_network_gps_reporting').prop('checked');
                        obj.mock = $('#camSet_network_gps_mock').prop('checked');
                        obj.preserveDay = parseInt($('#camSet_network_gps_preserveDay').val());

                        if (object.selected) {
                            bovicam_worker({
                                'payload': obj,
                                'target': 'put',
                                'url': '/api/network-mgr/gps/settings',
                                'sn': object.selected
                            }, function (a) {
                                a.error ? $.growl.error({message: a.error}) : $.growl.notice({message: langDict.wasModified});
                                btn.button('reset');
                            });
                        } else
                            btn.button('reset');

                    } else if (id[2] == 'smartlink') {
                        obj.enabled = $('#camSet_network_smartlink_enabled').prop('checked');
                        obj.mode = 'latency';
                        btn.button('loading');
                        if ($('#camSet_network_smartlink_priority').val() != 'latency') {
                            obj.mode = 'manual';
                            obj.priority = JSON.parse($('#camSet_network_smartlink_priority').val());
                        }
                        obj.interval = parseInt($('#camSet_network_smartlink_interval').val());
                        obj.target = $('#camSet_network_smartlink_target').val();
                        if ($('#camSet_network_smartlink_target').val() == 'custom') {
                            obj.ips = {'custom': {}};
                            obj.ips.custom.ip = $('#camSet_network_smartlink_ip').val();
                            obj.ips.custom.port = parseInt($('#camSet_network_smartlink_port').val());
                        }

                        if (object.selected) {
                            bovicam_worker({
                                'payload': obj,
                                'target': 'put',
                                'url': '/api/network-mgr/smartlink-settings',
                                'sn': object.selected
                            }, function (a) {
                                a.error ? $.growl.error({message: a.error}) : $.growl.notice({message: langDict.wasModified});
                                btn.button('reset');
                            });
                        } else
                            btn.button('reset');

                    } else if (id[2] == 'fw') {
                        btn.button('loading');
                        obj = {'rules': {}};
                        var port = $('#camSet_network_fw_edit_protocol').val() == 'icmp' ? 'icmp' : $('#camSet_network_fw_edit_port').val();
                        obj.rules[port] = {
                            'name': $('#camSet_network_fw_edit_name').val(),
                            'protocol': $('#camSet_network_fw_edit_protocol').val()
                        };
                        object.selected ? bovicam_worker({
                            'payload': obj,
                            'target': 'put',
                            'url': '/api/network-mgr/firewall/settings',
                            'sn': object.selected
                        }, function (a) {
                            if (a.error)
                                $.growl.error({message: a.error});
                            else {
                                $.growl.notice({message: langDict.wasModified});
                                var newly = true,
                                    edit = '<i class="fas fa-edit text-primary custom-edit" style="cursor: pointer"></i>',
                                    del = '<i class="fas fa-times text-danger custom-del" style="cursor: pointer"></i>';
                                port == 'icmp' && (edit = null);
                                iptable.rows(function (idx, data, node) {
                                    data[3] == port && (iptable.row(node).data(['custom', obj.rules[port].name, obj.rules[port].protocol.toUpperCase(), port, edit, del]).draw(false), newly = false);
                                }).data();
                                newly && iptable.row.add(['custom', obj.rules[port].name, obj.rules[port].protocol.toUpperCase(), port, edit, del]).draw(false);
                            }
                            btn.button('reset');
                            $('#camSet_network_fw_modal').modal('toggle');
                        }) : (btn.button('reset'), $('#camSet_network_fw_modal').modal('toggle'));
                    }
                    break;
                case 'netConn':
                    switch (id[2]) {
                        case 'wired':
                            btn.button('loading');
                            obj = {'wired': get_ethernet_ip('wired')};
                            object.selected ? bovicam_worker({
                                'payload': obj,
                                'target': 'put',
                                'url': '/api/network-mgr/ip-settings',
                                'sn': object.selected
                            }, function (a) {
                                if (a.error)
                                    $.growl.error({message: a.error});
                                else {
                                    $.growl.notice({message: langDict.wasModified});
                                    object.settings.api.network.ips.wired = obj.wired;
                                }
                                btn.button('reset');
                            }) : btn.button('reset');
                            break;
                        case 'wifi':
                            $('#camSet_netConn_wifi_scan').button('loading');
                            btn.button('loading');
                            obj = {
                                'ssid': $('#camSet_netConn_wifi_hidden').prop('checked') ? $('#camSet_netConn_wifi_ssid_hidden').val() : $('#camSet_netConn_wifi_ssid').val(),
                                'encryption': $('#camSet_netConn_wifi_encryption').val(),
                                'ipSettings': get_ethernet_ip('wifi')
                            };
                            switch ($('#camSet_netConn_wifi_encryption').val()) {
                                case 'WPA-PSK':
                                    $('#camSet_netConn_wifi_passwd').val() && (obj.credentials = {'password': $('#camSet_netConn_wifi_passwd').val()});
                                    break;
                            }
                            object.selected ? bovicam_worker({
                                'payload': obj,
                                'target': 'put',
                                'url': '/api/network-mgr/wifi-networks',
                                'sn': object.selected
                            }, function (a) {
                                if (a.error)
                                    $.growl.error({message: a.error});
                                else {
                                    $.growl.notice({message: langDict.wasModified});
                                    obj.priority = 5;
                                    obj.saved = true;
                                    obj.current = true;
                                    obj.encryption == 'WPA-PSK' && obj.credentials && (obj.credentials.password = true);
                                    var configs = [];
                                    for (var i in object.settings.api.network.wifi) {
                                        var config = object.settings.api.network.wifi[i];
                                        config.current && delete config.current;
                                        config.ssid == obj.ssid || configs.push(config);
                                    }
                                    configs.push(obj);
                                    object.settings.api.network.wifi = configs;
                                }
                                btn.button('reset');
                                $('#camSet_netConn_wifi_scan').button('reset');
                            }) : (btn.button('reset'), $('#camSet_netConn_wifi_scan').button('reset'));
                            break;
                        case 'ap':
                            btn.button('loading');
                            obj = {
                                'enabled': $('#camSet_netConn_ap_enabled').prop('checked'),
                                'ssid': {'useDefault': $('#camSet_netConn_ap_ssid').val() == object.settings.api.network.ap.ssid.default},
                                'hidden': $('#camSet_netConn_ap_hidden').prop('checked')
                            };
                            obj.ssid.useDefault || (obj.ssid.custom = $('#camSet_netConn_ap_ssid').val());
                            $('#camSet_netConn_ap_password').val().length >= 8 && (obj.password = $('#amSet_netConn_ap_password').val());
                            object.selected ? bovicam_worker({
                                'payload': obj,
                                'target': 'put',
                                'url': '/api/network-mgr/wifi-ap-settings',
                                'sn': object.selected
                            }, function (a) {
                                if (a.error)
                                    $.growl.error({message: a.error});
                                else {
                                    $.growl.notice({message: langDict.wasModified});
                                    object.settings.api.network.ap.hidden = obj.hidden;
                                    object.settings.api.network.ap.useDefault = obj.ssid.useDefault;
                                    'custom' in obj.ssid && (object.settings.api.network.ap.custom = obj.ssid.custom);
                                    obj.ssid.useDefault || (ap_ssid = obj.ssid.custom);

                                    $('#camSet_netConn_sw_mode').val(obj.enabled ? 'AP' : 'Client').selectpicker('refresh');
                                }
                                btn.button('reset');
                            }) : btn.button('reset');
                            break;
                        case 'sw':
                            var state = $('#camSet_netConn_sw_mode').val() == 'AP';
                            if (object.selected) {
                                btn.button('loading');
                                $('a[href$=camSet_netConn_ap]').addClass('disabled');
                                $('a[href$=camSet_netConn_client]').addClass('disabled');
                                bovicam_worker({
                                    'payload': {'enabled': state},
                                    'target': 'put',
                                    'url': '/api/network-mgr/wifi-ap-settings',
                                    'sn': object.selected
                                }, function (a) {
                                    if (a.error)
                                        $.growl.error({message: a.error});
                                    else {
                                        $('#camSet_netConn_ap_enabled').prop('checked', state);
                                        $.growl.notice({message: 'Successfully'});
                                    }

                                    $('a[href$=camSet_netConn_ap]').removeClass('disabled');
                                    $('a[href$=camSet_netConn_client]').removeClass('disabled');

                                    btn.button('reset');
                                });
                            }
                            break;
                        case 'lte':
                            btn.button('loading');
                            obj = {
                                'apn': $('#camSet_netConn_lte_apn').val(),
                                'username': $('#camSet_netConn_lte_username').val()
                            };
                            $('#camSet_netConn_lte_password').val() && (obj.password = $('#camSet_netConn_lte_password').val());
                            object.selected ? bovicam_worker({
                                'payload': obj,
                                'target': 'put',
                                'url': '/api/network-mgr/modem-settings',
                                'sn': object.selected
                            }, function (a) {
                                if (a.error)
                                    $.growl.error({message: a.error});
                                else {
                                    $.growl.notice({message: langDict.wasModified});
                                    object.settings.api.network.lte.apn = obj.apn;
                                    object.settings.api.network.lte.username = obj.username;
                                }
                                btn.button('reset');
                            }) : btn.button('reset');
                            break;
                    }
                    break;
                case 'firmware':
                    // bootbox.confirm({
                    //     'title': langDict['aruYouSure'],
                    //     'message': 'Will automatic check for the latest version and installation.',
                    //     'buttons': {
                    //         'cancel': {'label': '<i class="fa fa-times"></i> ' + langDict['cancel']},
                    //         'confirm': {'label': '<i class="fa fa-check"></i> ' + langDict['apply']}
                    //     },
                    //     'callback': function (confirm) {
                    //         if (confirm) {
                    //             $('#camSet_firmware_install1').find('p').html('Initializing...');
                    //             btn.button('loading');
                    //             lasted ? bovicam_worker({
                    //                 'payload': {},
                    //                 'target': 'post',
                    //                 'url': '/api/system-mgr/firmware/automatic',
                    //                 'sn': lasted.id,
                    //                 'timeout': 240
                    //             }, function (a) {
                    //                 a.error && ($.growl.error({message: a.error}), btn.button('reset'));
                    //             }) : btn.button('reset');
                    //         }
                    //     }
                    // });
                    break;
                default:
                    break;
            }
        }
    });

    const ShowLocalDate = function () {
        $('#camSet_system_time_ymdhms').val(moment().format("YYYY-MM-DD HH:mm:ss"));
        $('#camSet_system_time_sync').prop('checked') && setTimeout(function () {
            ShowLocalDate();
        }, 1000);
    };
    $('#camSet_system_time_ymdhms').daterangepicker({
        singleDatePicker: true,
        bsVersion: '4.x',
        timePicker: true,
        opens: 'right',
        drops: 'up',
        showDropdowns: true,
        minYear: 2019,
        maxYear: 2030,
        timePicker24Hour: true,
        timePickerSeconds: true,
        autoUpdateInput: false,
        locale: {
            format: "YYYY-MM-DD HH:mm:ss"
        }
    }).on('apply.daterangepicker', function (ev, picker) {
        $(this).val(picker.startDate.format('YYYY-MM-DD HH:mm:ss'));
    });
    $('#camSet_system_time_time_from').change(function () {
        time_from($(this).val());
    });
    $('#camSet_system_time_sync').click(function () {
        if ($(this).prop("checked")) {
            $('#camSet_system_time_ymdhms').prop('disabled', true);
            ShowLocalDate();
        } else {
            $('#camSet_system_time_ymdhms').prop('disabled', false);
        }
    });
    $('#camSet_system_time_bovilive').click(function () {
        $('#camSet_system_time_ntp_host').prop('disabled', $(this).prop('checked'));
        $('#camSet_system_time_ntp_host').val($(this).prop('checked') ? object.settings.api.system.time.boviLive.server : object.settings.api.system.time.server);
    });
    $('#camSet_system_time_ntp_host').on('keyup', function () {
        settings.system.time.server = $(this).val();
    });
    $('#camSet_network_smartlink_target').on('change', function (e) {
        host_logic_ui($(this).val(), settings.network.smartlink.ips);
    });
    $('#camSet_network_smartlink_mode').click(function () {
        priority_logic_ui($(this).prop('checked'));
    });
    $('[id^=camSet_network_fw_edit_]*').on('keypress keyup blur change', function (e) {
        fw_validate();
    });
    $('#camSet_network_fw_edit_protocol').on('change', function (e) {
        $(this).val() == 'icmp' ? $('#camSet_network_fw_edit_port_row').hide() : $('#camSet_network_fw_edit_port_row').show();
    });
    $(document).on('click', '.custom-edit,.custom-del', function (e) {
        var dt = $('#camSet_network_fw_iptable').dataTable();
        if ($(this).hasClass('custom-edit')) {
            var row = dt.fnGetData($(this).closest('tr'));
            clear_editor();
            $("#camSet_network_fw_edit_name").val(row[1]);
            $("#camSet_network_fw_edit_protocol").val(row[2].toLowerCase()).selectpicker('refresh');
            $("#camSet_network_fw_edit_port").val(row[3]);
            $('#camSet_network_fw_modal').modal({
                backdrop: 'static',
                keyboard: true,
                show: true
            });
            fw_validate();
        } else if ($(this).hasClass('custom-del')) {
            var row = $(this).closest('tr'), data = dt.fnGetData(row), port = null;
            data[1].toUpperCase() == 'ICMP' ? port = 'icmp' : port = data[3];
            object.selected && bovicam_worker({
                'payload': {},
                'target': 'delete',
                'url': '/api/network-mgr/firewall/settings/' + port,
                'sn': object.selected
            }, function (a) {
                a.error ? $.growl.error({message: a.error}) : (iptable.row(row).remove().draw(false), $.growl.notice({message: langDict.wasDeleted}));
            });
        }
    });
    $('[id*=_dhcp]:input').change(function () {
        var group = $(this).attr('id').split("_")[2];
        $(this).val() == "Auto" ? conn_visible(group, 0) : conn_visible(group, 1);
    });
    $('#camSet_netConn_wifi_hidden').click(function () {
        if ($(this).prop('checked')) {
            $('#camSet_netConn_wifi_ssid').closest('.input-group').hide();
            $('#camSet_netConn_wifi_ssid_hidden').show();
            $('#camSet_netConn_wifi_encryption').val('NONE').selectpicker('refresh');
            $('#camSet_netConn_wifi_encryption').closest('.form-group').show();
            encryption_ui_logi('NONE');
        } else {
            $('#camSet_netConn_wifi_encryption').closest('.form-group').hide();
            $('#camSet_netConn_wifi_ssid').closest('.input-group').show();
            $('#camSet_netConn_wifi_ssid_hidden').hide();
            //wifi_panel(settings.network.ips.wifi, settings.network.wifi);
        }
    });
    $('#camSet_netConn_wifi_cfgs').change(function () {
        $('#camSet_netConn_delete_apply').prop('disabled', !$(this).val().length);
    });
    $('#camSet_netConn_wifi_scan').on('click', function () {
        var btn = $(this), data;
        btn.button('loading');
        if (object.selected) {
            $('#camSet_netConn_wifi_hidden').prop('disabled', 1);
            $('#camSet_netConn_wifi_ssid').prop('disabled', 1).selectpicker('refresh');
            bovicam_worker({
                'payload': {},
                'target': 'get',
                'url': '/api/network-mgr/wifi-networks/scanned',
                'sn': object.selected
            }, function (a) {
                if (a.error) {
                    $.growl.error({message: a.error});
                    //wifi_panel(object.settings.api.network.ips.wifi, object.settings.api.network.wifi);
                } else {
                    $('#camSet_netConn_wifi_ssid').empty();
                    scanned = a;
                    var i = scanned.length;
                    while (i > 0) {
                        i--;
                        if (scanned[i].encryption != 'WPA-EAP') {
                            // var signal = 0, content = '';
                            // scanned[i].signal >= -65 ? signal = 3 : scanned[i].signal < -65 && scanned[i].signal > -80 ? signal = 2 : signal = 1;

                            var ap = object.settings.api.network.ap.useDefault ? object.settings.api.network.ap.ssid.default : object.settings.api.network.ap.ssid.custom;

                            if (scanned[i].encryption == 'NONE') {
                                $('#camSet_netConn_wifi_ssid').append('<option value="' + scanned[i].ssid + '" data-icon="fas fa-lock-open" ' + (ap == scanned[i].ssid ? 'disabled' : '') + '>' + scanned[i].ssid + '</option>');
                            } else {
                                $('#camSet_netConn_wifi_ssid').append('<option value="' + scanned[i].ssid + '" data-icon="fas fa-lock" ' + (ap == scanned[i].ssid ? 'disabled' : '') + '>' + scanned[i].ssid + '</option>');
                            }
                        } else scanned.splice(i, 1);
                    }
                }
                $('#camSet_netConn_wifi_hidden').prop('disabled', 0);
                $('#camSet_netConn_wifi_ssid').prop('disabled', 0).selectpicker('refresh');
                btn.button('reset');
                wifi_validate();
            });
        } else btn.button('reset');
    });
    $('#camSet_netConn_wifi_ssid').change(function () {
        var newcfg = false;
        var current = ObjValue(object.settings.api.network.wifi, 'ssid', $('#camSet_netConn_wifi_ssid').val());
        if (!current.length) {
            newcfg = true;
            current = ObjValue(scanned, 'ssid', $('#camSet_netConn_wifi_ssid').val());
        }
        $('#camSet_netConn_wifi_encryption').val(current[0]['encryption']).selectpicker('refresh');
        encryption_ui_logi($('#camSet_netConn_wifi_encryption').val());
        switch ($('#camSet_netConn_wifi_encryption').val()) {
            case 'WPA-PSK':
                newcfg || $('#camSet_netConn_wifi_passwd').attr('placeholder', '(unchanged)');
                break;
        }
    });
    $('#camSet_netConn_wifi_encryption').change(function () {
        encryption_ui_logi($(this).val());
    });
    $('[id^=camSet_netConn_wired_]*').on('keyup change', function (event) {
        ip_feild_validate($(this));
        wired_validate();
    });
    $('[id^=camSet_netConn_wifi_]*').on('keyup change', function () {
        wifi_validate(ap_ssid);
    });
    $('#camSet_netConn_lte_hasPin').click(function () {
        var checked = $(this).prop('checked');
        $('#camSet_netConn_lte_pin').prop('disabled', !checked);
        checked ? $('#camSet_netConn_lte_pin').attr('placeholder', '(unchanged)') : $('#camSet_netConn_lte_pin').attr('placeholder', '(disabled)');
    });
    $('#camSet_netConn_ap_custom').click(function () {
        var checked = $(this).prop('checked');
        $('#camSet_netConn_ap_ssid').prop('disabled', !checked);
        if (checked) {
            $('#camSet_netConn_custom_hint').text('(Customization)');
            $('#camSet_netConn_ap_ssid').val(settings.network.ap.ssid.custom);
        } else {
            ap_custom_ssid = $('#camSet_netConn_ap_ssid').val();
            $('#camSet_netConn_custom_hint').text('(Default)');
            $('#camSet_netConn_ap_ssid').val(settings.network.ap.ssid.default);
        }
        ap_validate();
    });
    $('[id^=camSet_netConn_ap_]:input').on('keyup', function () {
        ap_validate();
    });
    $(document).on('click', '.free-space-btn', function (e) {
        $.growl.warning({message: langDict.freeSpace + ' ' + $(this).attr('data-free')});
    });
});