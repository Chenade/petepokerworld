function streaming_group(obj, key) {
    publishing_panel(obj.publishing);
    video_device_option(obj.source);
    video_profile_option(obj.videoProfile);
    osd_profile_option(obj.osdProfile);
    audio_codec_option(obj.audioCodec);
}

function ObjValue(a, b, c) {
    var d = a.filter(function (a) {
        return a[b] == c
    });
    return d
}

function get_profile_info(device, dualStreams, updated, ch, key, cb) {
    var datas = {'live': {}, 'recording': {}}, finished = 0, count = 2;
    dualStreams && (count = 4);
    for (var data in datas) {
        ['video', 'osd'].forEach(function (module) {
            var temp = data;
            ajax('PUT', '/agent/api', data_format('/api/device/ctrl', 0, 'POST', {
                'payload': {},
                'target': 'get',
                'url': "/api/streaming-mgr/profiles/" + module + "/" + device + "/" + temp,
                'sn': key
            }, null), function (a) {
                a.error ? $.growl.error({message: a.error}) : (datas[temp][module] = a);
                finished += 1;
                finished == count && (updated[device] = datas, cb(ch, dualStreams, updated));
            });
        });
        if (!dualStreams) break;
    }
}

function format_bps(bps) {
    if (bps == 0) return '0 bps';
    if (bps < 1024) return bps.toString() + 'Kbps';
    return (parseFloat(Math.round(bps / 1024 * 10)) / 10).toString() + 'Mbps';
}

function osd_text_preview(video_sources, videoSource) {
    var cfg = ObjValue(video_sources, 'name', videoSource)[0];
    var osd = '', fontColor = $('#camSet_stream_osd_text_color').val(),
        OutlineColor = $('#camSet_stream_osd_text_bg').val();
    $('#camSet_stream_osd_text_preview').css('color', fontColor);
    (cfg['capabilities']['osd']['outlineColors']) ? $('#camSet_stream_osd_text_preview').css('textShadow', '-1px 0 ' + OutlineColor + ', 0 1px ' + OutlineColor + ', 1px 0 ' + OutlineColor + ', 0 -1px ' + OutlineColor) : $('#camSet_stream_osd_text_preview').css('textShadow', '');
    //$('#camSet_stream_osd_ch_name').prop('disabled', !($('#camSet_stream_osd_ch_name_enb').prop('checked')));
    $('#camSet_stream_osd_ch_name').val().length && (osd = $('#camSet_stream_osd_ch_name').val() + ' ');
    $('#camSet_stream_osd_bitrate_enb').prop('checked') && (osd += '4096K');
    $('#camSet_stream_osd_text_preview').empty().append(osd);
}

function video_profile_capabilities(video_sources, videoSource, tab, resoultion, data) {
    var cfg = ObjValue(video_sources, 'name', videoSource)[0],
        video = ObjValue(cfg['capabilities']['video'][tab], 'value', resoultion)[0];
    if (video) {
        bitrate = video['bitrate'];
        fps = video['fps'];
        $('#camSet_stream_video_fps_row').empty().append('<div id="camSet_stream_video_fps"></div><small class="text-secondary">FPS:&nbsp;<span id="camSet_stream_video_fps_val"></span></small>');
        $('#camSet_stream_video_bitrate_row').empty().append('<div id="camSet_stream_video_bitrate"></div><small class="text-secondary">Initial:&nbsp;<span id="camSet_stream_video_init_bitrate_val"></span><br>Maximum:&nbsp;<span id="camSet_stream_video_max_bitrate_val"></span></small>');
        var video_fps = $('#camSet_stream_video_fps')[0],
            video_bps = $('#camSet_stream_video_bitrate')[0],
            fps_start = 0, bps_start = [0, (bitrate.length - 1)];
        data && (fps_start = fps.indexOf(data.fps), bps_start = [bitrate.indexOf(data.initBitrate), bitrate.indexOf(data.maxBitrate)]);
        noUiSlider.create(video_fps, {
            start: fps_start,
            step: 1,
            range: {
                'min': 0,
                'max': (fps.length - 1)
            }
        });
        noUiSlider.create(video_bps, {
            start: bps_start,
            step: 1,
            behaviour: 'drag',
            connect: true,
            range: {
                'min': 0,
                'max': (bitrate.length - 1)
            }
        });
        video_fps.noUiSlider.on('update', function () {
            var value = fps[parseInt(video_fps.noUiSlider.get())];
            value && $('#camSet_stream_video_fps_val').text(value);
        });
        video_bps.noUiSlider.on('update', function () {
            var value = video_bps.noUiSlider.get().map(Number);
            value && ($("#camSet_stream_video_init_bitrate_val").html(bitrate[value[0]] + "&nbsp;Kbps"), $("#camSet_stream_video_max_bitrate_val").html(bitrate[value[1]] + "&nbsp;Kbps"));
        });
    }
}

function updateSubtext(ch, dualstream, updated) {
    var resolution = {'1080p': '1920x1080', '720p': '1280x720', '4CIF': '704×480', 'CIF': '352×240'},
        live_video = updated[$('#' + ch + '_video_dev').val()]['live']['video'];

    $('#' + ch + '_live_profile > option:not([value])').each(function () {
        var option = $(this), data = ObjValue(live_video, 'name', option.val())[0];
        option.attr('data-subtext', resolution[data['resolution']] + ', ' + format_bps(data['maxBitrate']));
    });

    if (dualstream) {
        var record_video = updated[$('#' + ch + '_video_dev').val()]['recording']['video'];
        $('#' + ch + '_record_profile > option:not([value])').each(function (e) {
            var option = $(this), data = ObjValue(record_video, 'name', option.val())[0];
            option.attr('data-subtext', resolution[data['resolution']] + ', ' + format_bps(data['maxBitrate']));
        });
    } else {
        $('#' + ch + '_record_profile').find('option:selected').attr('data-subtext', $('#' + ch + '_live_profile').find('option:selected').attr('data-subtext'));
    }
    $('#' + ch + '_live_profile').selectpicker('refresh');
    $('#' + ch + '_record_profile').selectpicker('refresh');
}

function customBtn(ch, dualstream) {
    ($('#' + ch + '_live_profile').val() == 'Custom') ? $('#' + ch + '_live_video_customBtn').show() : $('#' + ch + '_live_video_customBtn').hide();
    ($('#' + ch + '_live_osd').val() == 'Custom') ? $('#' + ch + '_live_osd_customBtn').show() : $('#' + ch + '_live_osd_customBtn').hide();
    if (dualstream) {
        ($('#' + ch + '_record_profile').val() == 'Custom') ? $('#' + ch + '_recording_video_customBtn').show() : $('#' + ch + '_recording_video_customBtn').hide();
        ($('#' + ch + '_record_osd').val() == 'Custom') ? $('#' + ch + '_recording_osd_customBtn').show() : $('#' + ch + '_recording_osd_customBtn').hide();
    } else {
        $('#' + ch + '_recording_video_customBtn').hide();
        $('#' + ch + '_recording_osd_customBtn').hide();
    }
}

function dual_stream_ui_logic(ch, dualstream, flip, mirror) {
    $('#' + ch + '_record_profile').prop('disabled', !(dualstream)).selectpicker('refresh');
    $('#' + ch + '_record_osd').prop('disabled', !(dualstream)).selectpicker('refresh');
    $('#' + ch + '_video_flip').prop('disabled', !(flip));
    flip || $("#" + ch + "_video_flip").prop("checked", false);
    $('#' + ch + '_video_mirror').prop('disabled', !(mirror));
    mirror || $('#' + ch + '_video_mirror').prop('checked', false);
    dualstream || ($("#" + ch + "_record_profile").val($("#" + ch + "_live_profile").val()).selectpicker('refresh'),
        $("#" + ch + "_record_osd").val($("#" + ch + "_live_osd").val()).selectpicker('refresh'));
}

function publishing_panel(data) {
    ['host', 'port'].forEach(function (i) {
        $('#camSet_stream_' + i).val(data[i]);
    });
    $('#camSet_stream_publishingVersion').val(data.version).selectpicker('refresh');
    $('#camSet_stream_publishingDuration').val(data.publishingDuration).selectpicker('refresh');

    if (data.autoRetry)
        $('#camSet_stream_retryTimes').val(data.maxRetries);
    else
        $('#camSet_stream_retryTimes').val('0');

    $('#camSet_stream_retryTimes').selectpicker('refresh');
    $('keepAliveInterval').val(data.keepAliveInterval).selectpicker('refresh')
    $('camSet_stream_statusReportInterval').val(data.statusReportInterval).selectpicker('refresh');
}

function video_device_option(data) {
    for (var i in data) $.each($('[id$=_video_dev]select'), function () {
        $(this).empty();
    });
    for (var i in data) $.each($('[id$=_video_dev]select'), function () {
        $(this).append('<option>' + data[i]['name'] + '</option>');
    });
    $('[id$=_video_dev]select').selectpicker('refresh');
}

function video_profile_option(data) {
    for (var i in data) $.each($('[id$=_profile]select'), function () {
        $(this).empty();
    });
    for (var i in data) $.each($('[id$=_profile]select'), function () {
        $(this).append('<option>' + data[i] + '</option>');
    });
    $('[id$=_profile]select').selectpicker('refresh');
}

function osd_profile_option(data) {
    for (var i in data) $.each($('[id$=_osd]select'), function () {
        $(this).empty();
    });
    for (var i in data) $.each($('[id$=_osd]select'), function () {
        $(this).append('<option>' + data[i] + '</option>');
    });
    $('[id$=_osd]select').selectpicker('refresh');
}

function audio_codec_option(data) {
    for (var i in data) $.each($('[id$=_audio]select'), function () {
        $(this).empty();
    });
    for (var i in data) $.each($('[id$=_audio]select'), function () {
        $(this).append('<option>' + data[i] + '</option>');
    });
    $('[id$=_audio]select').selectpicker('refresh');
}

function channel_config(group, key, cb) {
    // console.log(group);
    // console.log(key);

    var count = 0, data = group.channels, profile = group.profile, source = group.source, qos = group.qos;
    for (var i in data) {
        var ch = 'camSet_stream_ch' + (parseInt(i) + 1).toString(),
            cfg = ObjValue(source, 'name', data[i]['video']['source'])[0],
            dualstream = cfg['capabilities']['dualStreams'], flip = cfg['capabilities']['image']['flip'],
            mirror = cfg['capabilities']['image']['mirror'];

        $('#' + ch + '_enabled').prop('checked', data[i].enabled);

        $('#' + ch + '_video_dev').val(data[i]['video']['source']).selectpicker('refresh');
        $('#' + ch + '_video_flip').prop('checked', data[i]['video']['flip']);
        $('#' + ch + '_video_mirror').prop('checked', data[i]['video']['mirror']);
        $('#' + ch + '_live_profile').val(data[i]['live']['videoProfile']).selectpicker('refresh');
        $('#' + ch + '_live_audio').val(data[i]['live']['audioCodec']).selectpicker('refresh');
        $('#' + ch + '_live_osd').val(data[i]['live']['osdProfile']).selectpicker('refresh');
        $('#' + ch + '_live_rtsp').val(data[i]['live']['rtspPort']);
        $('#' + ch + '_live_rtp1').val(data[i]['live']['rtpPorts']['min']);
        $('#' + ch + '_live_rtp2').val(data[i]['live']['rtpPorts']['max']);
        $('#' + ch + '_live_conn').val(data[i]['live']['maxConnections']);
        dual_stream_ui_logic(ch, dualstream, flip, mirror);
        if (dualstream) {
            $('#' + ch + '_record_profile').val(data[i]['recording']['videoProfile']).selectpicker('refresh');
            $('#' + ch + '_record_osd').val(data[i]['recording']['osdProfile']).selectpicker('refresh');
        }
        $('#' + ch + '_record_audio').prop('checked', !data[i]['recording']['audio']);
        $('#' + ch + '_record_enable').prop('checked', data[i]['recording']['enableOnStart']);
        $('#' + ch + '_record_dur').val(data[i]['recording']['fileDuration']);
        $('#' + ch + '_publish_user').val(data[i]['publishing']['username']);
        $('#' + ch + '_publish_audio').prop('checked', !data[i]['publishing']['audio']);
        $('#' + ch + '_publish_enable').prop('checked', data[i]['publishing']['enableOnStart']);
        qos.push(data[i]['qos']);
        customBtn(ch, dualstream);

        get_profile_info(data[i]['video']['source'], cfg['capabilities']['dualStreams'], profile, ch, key, function (ch, dualstream, new_profile) {
            profile = new_profile;
            updateSubtext(ch, dualstream, profile);
            count += 1;
            // number of 2 channel
            count == 2 && cb(profile, qos);
        });
    }
}