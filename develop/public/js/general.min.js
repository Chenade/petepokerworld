function escapeHtml(text) {
    var map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };

    return text.replace(/[&<>"']/g, function (m) {
        return map[m];
    });
}

function es5_includes(arr, target) {
    var found = false;
    for (var i in arr) if (arr[i] == target) {
        found = true;
        break;
    }
    return found;
}

function es5_endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
}

function ajax(method, url, data, callback) {
    data['_token'] = $('[name="_token"]').attr('content');
    $.ajax({
        type: method,
        url: url,
        contentType: "application/json; charset=utf-8",
        data: JSON.stringify(data),
        success: function (res) {
            callback(res);
        }, error: function (err) {
            if (err.status == 401 && url != '/agent/login')
                window.location = '/logout?r=relogin';
            if ((err.responseJSON).constructor == Object)
                Object.keys(err.responseJSON).length || (err.responseJSON = {'error': err.statusText});
            else if ((err.responseJSON).constructor == Array)
                err.responseJSON.length || (err.responseJSON = {'error': err.statusText});
            callback(err.responseJSON);
        },
        statusCode: {
            403: function(xhr) {
                document.cookie = "Authorization=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
                $.growl.error({message: '連線逾時，請重新登入'});
                if (!url.includes("login")){
                    setTimeout(() => {
                        window.location.href = '/admin/login';
                    }, 1500);
                }
            }
        }
    });
}

function get_users(more, cb) {
    var url = '/api/user/tree';
    more && (url = '/api/user-info/tree');
    ajax('PUT', '/agent/api', data_format(url, 0, 'GET', {}, null), function (a) {
        if (!a.error) {
            var users = get_user_tree(a, 'userList', null, more), groups = get_group_tree(a, more);
            a = {'users': users, 'groups': groups};
        }
        cb(a);
    });
}

function get_user_tree(origin, target, type, detail, self) {
    target || (target = 'userList');
    var data = {
        'text': origin.group.name,
        'icon': 'fas fa-users',
        'state': {'selected': false},
        'more': origin.group,
        'children': [],
        'id': 'groupid_' + origin.group.id
    };
    /*-------- user sorting --------*/
    var users = origin[target];
    users && (users = users.sort(function (a, b) {
        return (a.id > b.id) ? 1 : ((b.id > a.id) ? -1 : 0);
    }));
    /*-------- end sort --------*/
    for (var i in users) {
        var user = users[i], icon = 'fas fa-child';
        switch (target) {
            case 'userList':
                user.name = user.info.name;
                user.permission && is_manage(user.permission) && (icon = 'fas fa-user');
                user.locked && (icon = 'fas vms-lock');
                break;
            case 'liveList':
                icon = 'fas online';
                break;
        }
        user.gid = origin.group.id;
        user.group = origin.group.name;
        user.layer = origin.group.layer;
        var obj = {
            'text': user.id + ', ' + user.name,
            'icon': icon,
            'state': {'selected': false},
            'more': user,
            'id': 'userid_' + user.id
        };
        data.children.push(obj);
    }
    /*-------- group sorting --------*/
    var chld = origin['children'];
    chld && (chld = chld.sort(function (a, b) {
        return (a.group.name > b.group.name) ? 1 : ((b.group.name > a.group.name) ? -1 : 0);
    }));
    /*-------- end sort --------*/
    for (var i in chld) data['children'].push(get_user_tree(chld[i], target, type, detail, self));
    return data;
}

function get_group_cell(origin, first) {
    origin.group.maxIn || (origin.group.maxIn = 0);
    origin.group.maxOut || (origin.group.maxOut = 0);
    var data = {}, textboxt = function (group, val, target) {
        var input = '<div class="input-group"> <span class="input-group-btn"> <button class="btn btn-default spinner" type="button" ' + (first ? 'disabled' : '') + '><i class="fas fa-minus"></i></button> </span> <input type="text" class="form-control text-center" id="' + group.id + '_' + target + '" value="' + val[target] + ' / ' + group[target] + '" style="background-color: white;" disabled> <span class="input-group-btn"> <button class="btn btn-default spinner" type="button" ' + (first ? 'disabled' : '') + '><i class="fas fa-plus"></i></button> </span> </div>';
        return input;
    };
    var count = {'maxIn': 0, 'maxOut': 0}, _chld = origin['children'];
    if (_chld) for (var i in count) for (var j in _chld)
        count[i] += (_chld[j].group[i] ? _chld[j].group[i] : 0);
    else
        count = {'maxIn': origin.group.maxIn, 'maxOut': origin.group.maxOut};

    for (var i in count) data[i] = textboxt(origin.group, count, i);
    data.line = '<input type="text" class="form-control" id="' + origin.group.id + '_line" placeholder="TBA">';
    data.license = (parseInt($('[name="_group"]').attr('content').split('_')[0]) < 2 && origin.group.layer == 2 ? '<button class="btn btn-default btn-info" id="' + origin.group.id + '_group_license" style="cursor: context-menu"><i class="fas fa-info-circle"></i></button>' : '')
    return data;
}

function get_group_tree(users, more) {
    var first = true, worker = function (origin) {
        var data = {
            'text': origin.group.name,
            'icon': 'fas fa-users',
            'state': {'selected': false},
            'more': {'id': origin.group.id, 'name': origin.group.name},
            'children': [],
            'id': '_groupid' + origin.group.id
        };
        more && (data.data = get_group_cell(origin, first), data.more.maxIn = origin.group.maxIn, data.more.maxOut = origin.group.maxOut, data.more.license = origin.group.license, data.more.layer = origin.group.layer);
        first = false;
        /*-------- sorting --------*/
        var chld = origin['children'];
        chld && (chld = chld.sort(function (a, b) {
            return (a.group.name > b.group.name) ? 1 : ((b.group.name > a.group.name) ? -1 : 0);
        }));
        /*-------- end sort --------*/
        for (var i in chld) data['children'].push(worker(chld[i], more));
        return data;
    };

    return worker(users);
}

function strip_group(groups) {
    var worker = function (child) {
        var i = child.children.length - 1;
        while (i >= 0) {
            if ('children' in child.children[i])
                child.children[i].children.length == 0 ? child.children.splice(i, 1) : worker(child.children[i]);
            i--;
        }
        return child;
    };
    return worker(groups);
}

function isEmail(email) {
    var regex = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
    return regex.test(email);
}

function is_manage(permission) {
    var manage = false;
    for (var i in permission)
        if (inArray(['account', 'device', 'group', 'import', 'license', 'remote', 'server', 'tool', 'video', 'fr', 'analyze'], i) && permission[i]) {
            manage = true;
            break;
        }
    return manage;
}

function fetch_user(user, users) {
    var found, data, worker = function (child) {
        for (var i in child) {
            if (found) break;
            if (child[i]['more']['id'] == user) {
                found = true;
                data = child[i];
                break;
            }
            'children' in child[i] && worker(child[i]['children']);
        }
    }
    worker(users['children']);
    return data;
}

function patch_user(user, users, group_changed, new_user) {
    if (group_changed) {
        new_user || (users = remove_user(user['more']['id'], users));
        var data = [], added = false, worker = function (child) {
            if (child['more']['id'] == user['more']['gid']) {
                added = true;
                child.children.push(user);
            } else {
                var i = child.children.length;
                while (i > 0 && !added) {
                    i--;
                    'children' in child.children[i] && worker(child.children[i]);
                }
            }
        };
        worker(users);
    } else {
        var updated = false, data = [], worker = function (child) {
            var i = child.length;
            while (i > 0 && !updated) {
                i--;
                if (child[i]['more']['id'] == user['more']['id']) {
                    updated = true;
                    child[i] = user;
                    break;
                }
                'children' in child[i] && worker(child[i]['children']);
            }
            data = child;
        };
        worker(users['children']);
        users.children = data;
    }
    return users;
}

function remove_user(user, users) {
    var found = false, data = [], worker = function (child) {
        var i = child.length;
        while (i > 0 && !found) {
            i--;
            if (child[i]['more']['id'] == user) {
                child.splice(i, 1);
                found = true;
                break;
            }
            'children' in child[i] && worker(child[i]['children']);
        }
        data = child;
    };
    worker(users['children']);
    users.children = data;
    return users;
}

function get_gps_data(vid, cb) {
    vid && ajax('PUT', '/agent/api', data_format('/api/video/gps?vid=' + vid, 0, 'GET', {}, null), function (a) {
        cb(a);
    });
}

function removeValue(arr) {
    var what, a = arguments, L = a.length, ax;
    while (L > 1 && arr.length) {
        what = a[--L];
        while ((ax = arr.indexOf(what)) !== -1) {
            arr.splice(ax, 1);
        }
    }
    return arr;
}

function formatBytes(bytes, decimals, k) {
    decimals || (decimals = 0);
    k || (k = 1000);
    if (bytes == 0) return '0 Byte';
    var dm = decimals + 1 || 3;
    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    var i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

function formatSceond(second) { // dd:hh:mm
    second || (second = 0);
    var dd = Math.floor(second / 3600 / 24);
    var hh = Math.floor((second - (dd * 3600 * 24)) / 3600);
    var mm = Math.floor((second - (dd * 3600 * 24) - (hh * 3600)) / 60);
    if (dd < 10) dd = "0" + dd;
    if (hh < 10) hh = "0" + hh;
    if (mm < 10) mm = "0" + mm;
    return dd + langDict['days'] + hh + langDict['hours'] + mm + langDict['minutes'];
}

function gpsValidation(latlng) {
    var validated = true;
    for (var i in latlng) {
        var val = parseFloat(latlng[i]);
        (!isNaN(val)) || (validated = false);
    }
    return validated;
}

function ipv4Validation(ipv4) {
    return /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(ipv4);
}

function update_jstree(tree, new_data) {
    var selected = tree.jstree('get_selected'), selection = [];
    for (var i in selected) {
        var node = tree.jstree().get_node(selected[i]).original;
        (typeof node.more.id == 'string') && selection.push(node.more.id);
    }
    selection.length && (new_data = rec(new_data));

    function rec(data) {
        for (var i in data['children']) {
            inArray(selection, data['children'][i]['more']['id']) && (data['children'][i]['state'] = {'selected': true});
            'children' in data['children'][i] && rec(data['children'][i]);
        }
        return data;
    }

    tree.jstree(true).settings.core.data = new_data;
    //tree.jstree(true).refresh('forget_state', true);
    tree.jstree('refresh', -1);
}

function tree_node_create(ref) {
    var sel = ref.get_selected();
    if (!sel.length) return false;
    sel = sel[0];
    sel = ref.create_node(sel, {"type": "file"});
    (sel) && ref.edit(sel);
}

function tree_node_rename(ref) {
    var sel = ref.get_selected();
    if (!sel.length) return false;
    sel = sel[0];
    ref.edit(sel);
}

function tree_node_delete(ref) {
    var sel = ref.get_selected();
    if (!sel.length) return false;
    ref.delete_node(sel);
}

function data_format(url, port, method, body, timeout, argv) {
    port || (port = 0);
    method || (method = 'GET');
    body || (body = {});
    timeout || (timeout = 15);
    argv || (argv = null);
    var data = {
        'url': url,
        'port': port,
        'method': method,
        'payload': {},
        'timeout': timeout,
        'argv': argv
    };
    for (var i in body) data['payload'][i] = body[i];
    return data;
}

function map_initial(id) {
    id == 'map2' && ($('#map2').height($(window).height() * 0.7));
    var map = new L.Map(id);
    L.control.scale({metric: true, imperial: false}).addTo(map);
    var osmUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
        osmAttrib = '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors',
        osm = new L.tileLayer(osmUrl, {'attribution': osmAttrib, minZoom: 3, maxZoom: 19}).addTo(map);
    map.setView(new L.LatLng(24.807969, 121.033765), 15);
    map.addLayer(osm);
    return map;
}

function date_format(string) {
    return moment(new Date(string)).format('YYYY.MM.DD');
}

function date_range_init(start, end) {
    reportrange(start, end);
    var pickerLang = get_daterangepicker_lang(lang);
    $('.date-range-picker').daterangepicker({
        bsVersion: '4.x',
        startDate: start,
        endDate: end,
        ranges: pickerLang.ranges,
        timePicker: true,
        timePickerIncrement: 1,
        locale: pickerLang.locale,
    }, reportrange);

    function reportrange(start, end) {
        $('.date-range-picker span').html(start.format('YYYY-MM-DD') + '&nbsp;~&nbsp;' + end.format('YYYY-MM-DD'));
    }
}

function get_mini_daterangepicker_lang(lang) {
    switch (lang) {
        case 'zh':
            return {
                format: 'YYYY.MM.DD',
                applyLabel: '確認',
                cancelLabel: '取消',
                daysOfWeek: ["日", "一", "二", "三", "四", "五", "六"],
                monthNames: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"]
            };
            break;
        default:
            return {format: 'YYYY-MM-DD h:mm A'};
            break;
    }
}

function get_log_daterangepicker_lang(lang) {
    switch (lang) {
        case 'zh':
            return {
                'ranges': {
                    '今天': [moment().set({
                        hour: 0,
                        minute: 0
                    }), moment()],
                    '昨天': [moment().subtract(1, 'days').set({
                        hour: 0,
                        minute: 0
                    }), moment().subtract(1, 'days').set({hour: 24, minute: 0})],
                    '過去七天': [moment().subtract(6, 'days').set({
                        hour: 0,
                        minute: 0
                    }), moment()]
                }, 'locale': {
                    format: 'YYYY-MM-DD h:mm A',
                    applyLabel: '確認',
                    cancelLabel: '取消',
                    daysOfWeek: ["日", "一", "二", "三", "四", "五", "六"],
                    monthNames: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
                    customRangeLabel: '客製化時間',
                }
            };
        default:
            return {
                'ranges': {
                    'Today': [moment().set({
                        hour: 0,
                        minute: 0
                    }), moment()],
                    'Yesterday': [moment().subtract(1, 'days').set({
                        hour: 0,
                        minute: 0
                    }), moment().subtract(1, 'days').set({hour: 24, minute: 0})],
                    'Last 7 Days': [moment().subtract(6, 'days').set({
                        hour: 0,
                        minute: 0
                    }), moment()]
                }, 'locale': {
                    format: 'YYYY-MM-DD h:mm A'
                }
            };
            break;
    }
}

function get_daterangepicker_lang(lang) {
    switch (lang) {
        case 'zh':
            return {
                'ranges': {
                    '今天': [moment().set({
                        hour: 0,
                        minute: 0
                    }), moment()],
                    '昨天': [moment().subtract(1, 'days').set({
                        hour: 0,
                        minute: 0
                    }), moment().subtract(1, 'days').set({hour: 24, minute: 0})],
                    '過去七天': [moment().subtract(6, 'days').set({
                        hour: 0,
                        minute: 0
                    }), moment()],
                    '過去30天': [moment().subtract(29, 'days').set({
                        hour: 0,
                        minute: 0
                    }), moment()],
                    '本月': [moment().startOf('month').set({
                        hour: 0,
                        minute: 0
                    }), moment().endOf('month')],
                    '過去一個月': [moment().subtract(1, 'month').startOf('month').set({
                        hour: 0,
                        minute: 0
                    }), moment().subtract(1, 'month').endOf('month')]
                }, 'locale': {
                    format: 'YYYY-MM-DD h:mm A',
                    applyLabel: '確認',
                    cancelLabel: '取消',
                    daysOfWeek: ["日", "一", "二", "三", "四", "五", "六"],
                    monthNames: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
                    customRangeLabel: '客製化時間',
                }
            };
        default:
            return {
                'ranges': {
                    'Today': [moment().set({
                        hour: 0,
                        minute: 0
                    }), moment()],
                    'Yesterday': [moment().subtract(1, 'days').set({
                        hour: 0,
                        minute: 0
                    }), moment().subtract(1, 'days').set({hour: 24, minute: 0})],
                    'Last 7 Days': [moment().subtract(6, 'days').set({
                        hour: 0,
                        minute: 0
                    }), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days').set({
                        hour: 0,
                        minute: 0
                    }), moment()],
                    'This Month': [moment().startOf('month').set({
                        hour: 0,
                        minute: 0
                    }), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month').set({
                        hour: 0,
                        minute: 0
                    }), moment().subtract(1, 'month').endOf('month')]
                }, 'locale': {
                    format: 'YYYY-MM-DD h:mm A'
                }
            };
            break;
    }
}

function capitalizeFirstLetter(str) {
    var res = 'Unknown';
    typeof str == 'string' && (res = str.charAt(0).toUpperCase() + str.slice(1));
    return res;
}

function loading(state) {
    state ? ($('.main-page').hide(), $('.loading-container').show()) : ($('.main-page').show(), $('.loading-container').hide());
}

function inArray(arr, val) {
    var exist = false;
    for (var i in arr) if (arr[i] == val) {
        exist = true;
        break;
    }
    return exist;
}

function isChrome() {
    //return /chrome/.test(navigator.userAgent.toLowerCase());
    return true; //todo: wait vxg_cloud_player release stable version
}

function vxgSupport() {
    if (window.location.pathname != '/ptz') {
        return false;
    }

    if (navigator.userAgent.match(/Android/i)
        || navigator.userAgent.match(/webOS/i)
        || navigator.userAgent.match(/iPhone/i)
        || navigator.userAgent.match(/iPad/i)
        || navigator.userAgent.match(/iPod/i)
        || navigator.userAgent.match(/BlackBerry/i)
        || navigator.userAgent.match(/Windows Phone/i)
        || navigator.userAgent.match(/Edge/i)
        || /edge/.test(navigator.userAgent.toLowerCase())
    ) return false;
    else {
        if (/chrome/.test(navigator.userAgent.toLowerCase())) {
            if (!vxgplayer.browserSupportsPluginPnacl()) {

                var modal = [];
                $('.modal.fade.show').each(function () {
                    if ($(this).is(':visible') && $(this).attr('id')) {
                        $(this).hide();
                        modal.push($(this));
                    }
                });

                bootbox.confirm({
                    'title': langDict.vxgNotInstalled,
                    'message': langDict.gotoVxg,
                    'buttons': {
                        'cancel': {'label': '<i class="fa fa-times"></i> ' + langDict['cancel']},
                        'confirm': {'label': '<i class="fa fa-check"></i> ' + langDict['apply']}
                    },
                    'callback': function (confirm) {
                        if (confirm)
                            window.location = 'https://chrome.google.com/webstore/detail/vxg-media-player/hncknjnnbahamgpjoafdebabmoamcnni'
                        else
                            for (var i in modal) modal[i].show();
                    }
                });
            }
            return true;
        }
    }
    return false;
}

function isMobile() {
    if (navigator.userAgent.match(/Android/i)
        || navigator.userAgent.match(/webOS/i)
        || navigator.userAgent.match(/iPhone/i)
        || navigator.userAgent.match(/iPad/i)
        || navigator.userAgent.match(/iPod/i)
        || navigator.userAgent.match(/BlackBerry/i)
        || navigator.userAgent.match(/Windows Phone/i)
    ) return true;
    else
        return false;
}

function uuid() {
    var d = Date.now();
    if (typeof performance !== 'undefined' && typeof performance.now === 'function') {
        d += performance.now(); //use high-precision timer if available
    }
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
    });
}

function guid() {
    var s4 = function () {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    };
    localStorage.setItem('uuid', s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4());
}

function getByteLen(normal_val) {
    normal_val = String(normal_val);
    var byteLen = 0;
    for (var i = 0; i < normal_val.length; i++) {
        var c = normal_val.charCodeAt(i);
        byteLen += c < (1 << 7) ? 1 :
            c < (1 << 11) ? 2 :
                c < (1 << 16) ? 3 :
                    c < (1 << 21) ? 4 :
                        c < (1 << 26) ? 5 :
                            c < (1 << 31) ? 6 : Number.NaN;
    }
    return byteLen;
}

function getRandomColor() {
    var letters = '0123456789ABCDEF';
    var color = '#';
    for (var i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}

function switch_initial(sw, state) {
    sw.bootstrapSwitch('destroy');
    sw.prop('checked', state);
    sw.bootstrapSwitch();
}

function inputState(id, flag) {
    var form = $('#' + id).parent(), icon = form.find('span');
    switch (flag) {
        case 0: // ok
            form.removeClass('has-warning has-error').addClass('has-success');
            icon.removeClass('fa-exclamation fa-times').addClass('fa-check');
            break;
        case 1: // error
            form.removeClass('has-success has-warning').addClass('has-error');
            icon.removeClass('fa-exclamation fa-check').addClass('fa-times');
            break;
        default: // warn
            form.removeClass('has-success has-error').addClass('has-warning');
            icon.removeClass('fa-check fa-times').addClass('fa-exclamation');
            break;
    }

}

function getCookie(cname) {
    let name = cname + "=";
    let decodedCookie = decodeURIComponent(document.cookie);
    let ca = decodedCookie.split(';');
    for(let i = 0; i <ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) == ' ') {
        c = c.substring(1);
      }
      if (c.indexOf(name) == 0) {
        return c.substring(name.length, c.length);
      }
    }
    return "";
  }

$(document).ready(function () {

    var check_token = function(){
        var url = window.location.href;
        if (url.includes("admin")){
            if (!(url.includes("login")) || (url.includes("login") && getCookie('Authorization'))){
                ajax('POST', '/api/admin/ct', {'token': getCookie('Authorization')}, function(a){
                    if(a.success && (url.includes("login")))
                        window.location.href = "/admin";
                });
            }
        }
    };

    check_token();

    //selectpicker language
    // (function ($) {
    //     $.fn.selectpicker.defaults = {
    //         noneSelectedText: '沒有選取任何項目',
    //         noneResultsText: '沒有找到符合的結果',
    //         countSelectedText: '已經選取{0}個項目',
    //         maxOptionsText: ['超過限制 (最多選擇{n}項)', '超過限制(最多選擇{n}組)'],
    //         selectAllText: '選取全部',
    //         deselectAllText: '全部取消',
    //         multipleSeparator: ' ',
    //         showSubtext: true
    //     };
    // })(jQuery);

    // button loadding, because remove from bs4 :(
    (function ($) {
        $.fn.button = function (action) {
            if (action === 'loading' && this.data('loading-text')) {
                this.data('original-text', this.html()).html(this.data('loading-text')).prop('disabled', true);
            }
            if (action === 'reset' && this.data('original-text')) {
                this.html(this.data('original-text')).prop('disabled', false);
            }
        };
    }(jQuery));
    // not display at app web view
    navigator.userAgent.indexOf('bovia_app_webview') !== -1 && $('nav[class*=navbar]').hide();
    $('.change-site').on('click', function (e) {
        var id = $(this).attr('data-id');
        id != $('[name="_site"]').attr('content') && ajax('PUT', '/agent/cross-site', data_format('', 0, 'GET', {'id': id}, null), function (a) {
            if (a.error) $.growl.error({message: a.error}); else location.reload();
        });
    });

    // user card password visible
    $('.edit-password-view').on('click', function (e) {
        var icon = $(this).find('i'), input = $(this).closest('.input-group').find('input');
        if (icon.hasClass('fa-eye')) {
            icon.removeClass('fa-eye').addClass('fa-eye-slash');
            input.attr('type', 'text');
        } else {
            icon.removeClass('fa-eye-slash').addClass('fa-eye');
            input.attr('type', 'password');
        }
    });

    // second level dropdown menu (language)
    $("ul.dropdown-menu [data-toggle='dropdown']").on("click", function (event) {
        event.preventDefault();
        event.stopPropagation();

        $(this).siblings().toggleClass("show");

        if (!$(this).next().hasClass('show')) {
            $(this).parents('.dropdown-menu').first().find('.show').removeClass("show");
        }

        $(this).parents('li.nav-item.dropdown.show').on('hidden.bs.dropdown', function (e) {
            $('.dropdown-submenu .show').removeClass("show");
        });
    });

    // second level dropdown menu (ai_recognize)
    $("#ai_recognize").on("click", function (event) {

        event.preventDefault();
        event.stopPropagation();

        $(this).siblings().toggleClass("show");

        if (!$(this).next().hasClass('show')) {
            $(this).parents('.dropdown-menu').first().find('.show').removeClass("show");
        }

        $(this).parents('li.nav-item.dropdown.show').on('hidden.bs.dropdown', function (e) {
            $('.dropdown-menu .show').removeClass("show");
        });
    });

    //validation
    $('.numeric').on('keypress keyup blur', function (event) {
        $(this).val($(this).val().replace(/[^\d:].+/, ""));
        (event.which < 48 || event.which > 58) && event.preventDefault();
    });
    $('.float').on('keypress keyup blur', function (event) {
        $(this).val($(this).val().replace(/[^\d.:].+/, ""));
        event.which == 46 || (event.which < 48 || event.which > 58) && event.preventDefault();
    });

    var __delta = {};
    $('a[href="#user-card-modal"]').on('click', function (e) {
        const md = $('#user-card-modal'), id = md.attr('data-id');

        $('#user-card-modal').find('input').attr('disabled', '');
        $('#user-card_apply').is('[disabled]') || $('#user-card_apply').button('loading');
        $('#user-card_reset').is('[disabled]') || $('#user-card_reset').button('loading');

        if (id == $('[name="_user"]').attr('content')) {
            ajax('PUT', '/agent/api', data_format('/api/user?uid=' + id, 0, 'GET', {}, null), function (a) {
                if (a.error) {
                    $.growl.error({message: a.error});
                } else {

                    __delta = a;

                    try {
                        $('#user-card-lastLogin').empty();

                        $('#user-card_name').val(__delta.info.name);
                        $('#user-card_videoTitle').val(__delta.video.title);
                        $('#user-card_email').val(__delta.info.email);
                        $('#user-card_phone').val(__delta.info.phone);
                        $('#user-card_note').val(__delta.info.note);

                        $('#user-card-lastLogin').append(moment(__delta.lastLogin).format('YYYY-MM-DD HH:mm:ss'));
                    } catch (e) {
                        console.warn(e);
                    }

                    $('#user-card-modal').find('input').removeAttr('disabled');
                    $('#user-card_apply').button('reset');
                    $('#user-card_reset').button('reset');

                    md.modal({
                        backdrop: 'static',
                        keyboard: true,
                        show: true
                    });
                }
            });
        }
    });
    $('#user-card_reset').on('click', function (e) {
        try {
            $('#user-card_name').val(__delta.info.name);
            $('#user-card_videoTitle').val(__delta.video.title);
            $('#user-card_email').val(__delta.info.email);
            $('#user-card_phone').val(__delta.info.phone);
            $('#user-card_note').val(__delta.info.note);
        } catch (e) {
            console.warn(e);
        }
    });
    $('#user-card_apply').on('click', function (e) {
        const btn = $(this), obj = {};

        if ($('#user-card_name').val() != __delta.info.name) obj.name = $('#user-card_name').val();
        if ($('#user-card_videoTitle').val() != __delta.video.title) obj.videoTitle = $('#user-card_videoTitle').val();
        if ($('#user-card_email').val() != __delta.info.email) obj.name = $('#user-card_email').val();
        if ($('#user-card_phone').val() != __delta.info.phone) obj.phone = $('#user-card_phone').val();
        if ($('#user-card_note').val() != __delta.info.note) obj.note = $('#user-card_note').val();

        if (Object.keys(obj).length && $('#user-card-modal').attr('data-id')) {
            obj.id = $('#user-card-modal').attr('data-id');

            $('#user-card-modal').find('input').attr('disabled', '');
            $('#user-card_apply').is('[disabled]') || $('#user-card_apply').button('loading');
            $('#user-card_reset').is('[disabled]') || $('#user-card_reset').button('loading');

            ajax('PUT', '/agent/api', data_format('/api/user', 0, 'PUT', obj, null), function (a) {
                if (a.error) {
                    $.growl.error({message: a.error});
                } else {
                    //todo:

                    // if ('name' in obj) __delta.info.name = obj.name;
                    // if ('videoTitle' in obj) __delta.video.title = obj.videoTitle;
                    // if ('email' in obj) __delta.info.email = obj.email;
                    // if ('phone' in obj) __delta.info.phone = obj.phone;
                    // if ('note' in obj) __delta.info.note = obj.note;
                    // if ('2faEnabled' in obj) __delta['2faEnabled'] = obj['2faEnabled'];

                    $.growl.notice({message: langDict.wasModified});
                    $('a[href="#user-card-modal"]').click();
                }

                $('#user-card-modal').find('input').removeAttr('disabled');
                $('#user-card_apply').button('reset');
                $('#user-card_reset').button('reset');
            });
        } else {
            $.growl.warning({message: langDict.notChanged});
        }
    });
});