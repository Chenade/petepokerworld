"use strict";

function original() {

    var user = new Object;
    var group = new Object;

    user = {
        "apple": {"text": "apple", "more": {"id": "apple", "gid": '0'}},
        "bee": {"text": "bee", "more": {"id": "bee", "gid": '0'}},
        "cat": {"text": "cat", "more": {"id": "cat", "gid": '1'}}
    };

    group = {
        "0": {"text": "a", "more": {"id": "a", "parent": null}, "children": []},
        "1": {"text": "b", "more": {"id": "b", "parent": "0"}, "children": []},
        "2": {"text": "c", "more": {"id": "c", "parent": "1"}, "children": []}
    }

    var copy = Object.assign({}, group), tree = copy['0'];
    delete copy['0'];
    while (Object.keys(copy).length) {
        for (var i in copy) {
            // if xx == yy , push and delete copy some one
        }
    }

    for (var i in user) {
        group[user[i]['more']['gid']].children.push(user[i]);
    }
}


function treeObject(users, group) {
    //es6
    //this.data = {'users': Object.assign({}, users), 'group': Object.assign({}, group)};
    this.data = {'users': $.extend(true, {}, users), 'group': $.extend(true, {}, group)};


    var _this = this;

    this.fetch = function (child, id, cb) {
        if (child.more.id == id)
            cb(child);
        else
            for (var i in child.children)
                this.fetch(child.children[i], id, cb);
    };

    this.fetchParent = function (child, id, cb) {
        for (var i in child.children) {
            if (child.children[i].more.id == id) {
                cb(child);
                break;
            } else
                'children' in child.children[i] && this.fetchParent(child.children[i], id, cb);
        }
    };

    this.insert2 = function (obj, parent, cb) {
        var count = 0;
        _this.insert(_this.data.group, obj, parent, function () {
            count += 1;
            count == 2 && cb();
        });
        _this.insert(_this.data.users, obj, parent, function () {
            count += 1;
            count == 2 && cb();
        });
    };

    this.patch2 = function (obj, cb) {
        var count = 0;
        _this.patch(_this.data.group, obj, function () {
            count += 1;
            count == 2 && cb();
        });
        _this.patch(_this.data.users, obj, function () {
            count += 1;
            count == 2 && cb();
        });
    };

    this.remove2 = function (id, cb) {
        var count = 0;
        this.remove(_this.data.users, id, function () {
            count += 1;
            count == 2 && cb();
        });
        this.remove(_this.data.group, id, function () {
            count += 1;
            count == 2 && cb();
        });
    };

    this.multiGroupPatch2 = function (obj, cb) {
        var count = 0, len = (Object.keys(obj).length * 2);
        var worker = function (child) {
            if (child.more.id in obj) {
                'text' in obj[child.more.id] && (child.text = obj[child.more.id].text);
                'icon' in obj[child.more.id] && (child.icon = obj[child.more.id].icon);
                for (var j in obj[child.more.id].more) child.more[j] = obj[child.more.id].more[j];
                if (child.data) {
                    $.each(['maxIn', 'maxOut'], function (index, target) {
                        if (obj[child.more.id].more[target]) {
                            document.getElementById(child.more.id + '_' + target).setAttribute('value', document.getElementById(child.more.id + '_' + target).value);
                            child.data[target] = document.getElementById(child.more.id + '_' + target).parentElement.outerHTML;
                        }
                    });
                }
                count += 1;
                count == len && cb();
            }
            for (var i = 0; i < child.children.length; i++)
                'children' in child.children[i] && worker(child.children[i]);
        };
        worker(_this.data.group);
        worker(_this.data.users);
    };

    this.insert = function (child, obj, parent, cb) {
        if (child.more.id == parent) {
            //console.log(obj);
            child.children.push(obj);
            cb();
        } else
            for (var i = 0; i < child.children.length; i++)
                'children' in child.children[i] && _this.insert(child.children[i], obj, parent, cb);
    };

    this.patch = function (child, obj, cb) {
        var i = child.children.length;
        while (i > 0) {
            i--;
            if (child.children[i].more.id == obj.more.id) {
                'text' in obj && (child.children[i].text = obj.text);
                'icon' in obj && (child.children[i].icon = obj.icon);
                for (var j in obj.more) child.children[i].more[j] = obj.more[j];
                cb();
                break;
            }
            'children' in child.children[i] && this.patch(child.children[i], obj, cb);
        }
    };

    this.move = function (target, child, new_id, cb) {
        switch (target) {
            case 'group':  // child == gid
                var count = 0;
                _this.fetch(_this.data.group, child, function (group) {
                    _this.remove(_this.data.group, child, function () {
                        _this.insert(_this.data.group, group, new_id, function () {
                            count += 1;
                            count == 2 && cb();
                        });
                    });
                });
                _this.fetch(_this.data.users, child, function (user) {
                    _this.remove(_this.data.users, child, function () {
                        _this.insert(_this.data.users, user, new_id, function () {
                            count += 1;
                            count == 2 && cb();
                        });
                    });
                });
                break;
            case 'users':
                if (child.constructor == Object) {
                    child.more.gid = new_id;
                    _this.remove(_this.data.users, child.more.id, function () {
                        _this.insert(_this.data.users, child, new_id, function () {
                            cb();
                        });
                    });
                } else if (child.constructor == String) {
                    _this.fetch(_this.data.users, child, function (user) {
                        user.more.gid = new_id;
                        _this.remove(_this.data.users, user.more.id, function () {
                            _this.insert(_this.data.users, user, new_id, function () {
                                cb();
                            });
                        });
                    });
                } else cb(); // not support
                break;
            default:
                cb(); // not support
                break;
        }
    };

    this.remove = function (child, id, cb) {
        var i = child.children.length;
        while (i > 0) {
            i--;
            if (child.children[i].more.id == id) {
                child.children.splice(i, 1);
                cb();
                break;
            }
            'children' in child.children[i] && this.remove(child.children[i], id, cb);
        }
    };
}