/**
 * Created by Cloud on 2016/12/16.
 */
var markers = {"_lastOne": null, "_lastLength": 0};

function handlerMarker(map, user, popup, center, seekTime, all_gps) {
    if (map) {
        var map_id = map._container['id'];
        map_id in markers || (markers[map_id] = {});
        var gps = user.gps;
        var blackMarker = L.ExtraMarkers.icon({
            icon: 'fa-video-camera',
            markerColor: 'black',
            shape: 'star',
            prefix: 'fa'
        }), grayMarker = L.ExtraMarkers.icon({
            icon: 'fa-video-camera',
            markerColor: 'red',
            shape: 'circle',
            prefix: 'fa'
        }), blueMarker = L.ExtraMarkers.icon({
            icon: 'fa-video-camera',
            markerColor: 'cyan',
            shape: 'circle',
            prefix: 'fa'
        });
        switch (map_id) {
            case 'map1':
                if (markers['_lastOne'] && markers['_lastOne'] != user.id) {
                    if (markers[map_id][markers['_lastOne']]) {
                        map.removeLayer(markers[map_id][markers['_lastOne']]['point']);
                        markers[map_id][markers['_lastOne']]['track'] && map.removeLayer(markers[map_id][markers['_lastOne']]['track']);
                    }
                    delete markers[map_id][user.id];
                }
                markers['_lastOne'] = user.id;
                break;
            case 'map2':
                for (var i in markers[map_id]) {
                    if (typeof selectedList != 'undefined' && !inArray(selectedList, i)) {
                        map.removeLayer(markers[map_id][i]['point']);
                        markers[map_id][i]['track'] && map.removeLayer(markers[map_id][i]['track']);
                        delete markers[map_id][i];
                    }
                }
                break;
        }
        if (gps.latitude && gps.longitude) {
            if (markers[map_id][user.id]) {
                var marker = markers[map_id][user.id]['point'];
                marker.setLatLng([gps.latitude, gps.longitude]).update();

                if (gps.lock)
                    marker.setIcon(blackMarker).update();
                else if (gps.old)
                    marker.setIcon(grayMarker).update();
                else
                    marker.setIcon(blueMarker).update();

                map_id == 'map1' && marker.bindPopup(moment(gps.timestamp).format('YYYY-MM-DD HH:mm:ss') + '&emsp;');
                if (seekTime && markers[map_id][user.id]['seek']) {
                    markers[map_id][user.id]['line'] = [];
                    for (var i in all_gps)
                        moment(i).subtract(1, 'seconds').isBefore(seekTime) && markers[map_id][user.id]['line'].push(new L.LatLng(all_gps[i]['latitude'], all_gps[i]['longitude']));
                } else markers[map_id][user.id]['line'].push(new L.LatLng(gps.latitude, gps.longitude));
                markers[map_id][user.id]['track'] && map.removeLayer(markers[map_id][user.id]['track']);
                var track = new L.Polyline(markers[map_id][user.id]['line'], {
                    color: markers[map_id][user.id]['color']
                }).addTo(map);
                markers[map_id][user.id]['track'] = track;
                markers[map_id][user.id]['seek'] = seekTime;
            } else {
                var point;
                if (gps.lock)
                    point = L.marker([gps.latitude, gps.longitude], {'icon': blackMarker}).addTo(map).on('click', markerOnClick);
                else if (gps.old)
                    point = L.marker([gps.latitude, gps.longitude], {'icon': grayMarker}).addTo(map).on('click', markerOnClick);
                else
                    point = L.marker([gps.latitude, gps.longitude], {'icon': blueMarker}).addTo(map).on('click', markerOnClick);
                markers[map_id][user.id] = {
                    'point': point,
                    'line': [new L.LatLng(gps.latitude, gps.longitude)],
                    'track': null,
                    'seek': seekTime,
                    'color': getRandomColor()
                };
                var pop = '';
                if (popup) switch (map_id) {
                    case 'map1':
                        pop = moment(gps.timestamp).format('YYYY-MM-DD HH:mm:ss') + '&emsp;';
                        break;
                    case 'map2':
                        pop = '<label>' + user.id + '</label><br /><button type="button" class="btn btn-link map-view-btn" id="mapViewBtn:' + user.id + '"><div class="btn-image-container"><img src="' + user.snapshotUrl + '" class="btn-snapshot lazy" onerror="this.src=\'/img/default.jpg\';"/><div class="play-icon"></div> </div></button>';
                        break;
                }
                pop.length && markers[map_id][user.id]['point'].bindPopup(pop).openPopup();
            }
            center && map.setView(new L.LatLng(gps.latitude, gps.longitude), map.getZoom());
        }
        if (typeof selectedList != 'undefined' && markers['_lastLength'] != selectedList.length) {
            if (map_id == 'map2') {
                var temp = [];
                for (var i in markers[map_id]) temp.push(markers[map_id][i]['point']);
                if (temp.length) {
                    var group = new L.featureGroup(temp);
                    map.fitBounds(group.getBounds().pad(0.05));
                }
                markers['_lastLength'] = selectedList.length;
            }
        }
    }
    return markers;
}

function markerOnClick(e) {
    var gps = this.getLatLng();
    this._map.setView(new L.LatLng(gps['lat'], gps['lng']));
}