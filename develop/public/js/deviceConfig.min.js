var object = {
    'displayList': true,
    'id': null,
    'config': {},
    'info': {},
};

var deviceList = function () {
    $('#conditions').css('display', 'none');
    $('#deviceList').html('<div class="col text-center"><i class="fa fa-spinner fa-pulse fa-5x"></i></div>');
    var search = '';
    if($('#condition_faceArk').prop('checked')) search += 'faceark=&'
    if($('#condition_BoviBox').prop('checked')) search += 'bovibox=&'
    if($('#condition_BoviCast').prop('checked')) search += 'bovicast=&'
    if($('#condition_BoviShow').prop('checked')) search += 'bovishow=&'
    if($('#condition_BoviSense').prop('checked')) search += 'bovisense=&'

    ajax('PUT', '/agent/api', data_format('/api/device/list?'+search, 0, 'GET', {}, null), function (devices) {
        if (!devices.error){
            $('#conditions').css('display', 'flex');
            $('#deviceList').empty();
            for(const i in devices){
                var did = devices[i].id,
                    content = drawList(did, devices[i].info);

                $('#deviceList').append('<div class="device" data-id="' + did + '">'+content+'</div>');
                // if(i > 50) break;
            }
        }else
            $.growl.error({message: devices.error});
    });
}, drawList = function(id, info){
    var type = '',
        dname = info['name'],
        description = ((info['description']) ? info['description'] : ''),
        title = (description != '') ? description : dname;

    if(info.faceark) type += '<span class="badge badge-secondary">FaceArk</span>&ensp;';
    if(info.bovibox) type += '<span class="badge badge-secondary">bovibox</span>&ensp;';
    if(info.bovicast) type += '<span class="badge badge-secondary">bovicast</span>&ensp;';
    if(info.bovisense) type += '<span class="badge badge-secondary">bovisense</span>&ensp;';
    if(info.bovishow) type += '<span class="badge badge-secondary">bovishow</span>';

    var content = "<span style=''>"+ dname + "</span>" + "&ensp;<span class='badge badge-info'>" + description + "</span>";
    content += "<br><span style='color: #BBBBBB; font-size: 0.8em;'>" + id + "</span>";
    content += "<br>" + type;
    return content;
}, getInput = function (input) {
    var value;
    switch (input.data('type')) {
        case "boolean":
            value = input.prop('checked');
            break;
        case "int":
            value = parseInt(input.val());
            break;
        case "float":
            value = parseFloat(input.val());
            break;
        default:
            var value = input.val();
            break;
    }
    return value;
};

var facearkUpdate = function (config) {
    $('.temp').attr({"min": 35, "max":45});
    $('.tempRange').attr({"min": 20, "max":55});
    for(const i in config){
        var count = parseInt(i) + 1;
        Object.keys(config[i]).forEach(function(key) {
            var value = config[i][key];
            if(typeof value === 'boolean')
                $('[data-id="'+ key +'"][data-scenario="'+ count +'"]').prop('checked', value);
            else
                $('[data-id="'+ key +'"][data-scenario="'+ count +'"]').val(value);
        });
        $('#scenarioSelected option[value="' + i + '"]').text(count + '. ' + config[i]['scenariosName']);
        var unit = $('[data-id="bodyTemperatureMeasurementDegreeUnit"][data-scenario="'+ count +'"]').val();
        if(unit === '1'){
            $('.temp').each(function () {
                var tmp = $(this), scenario = tmp.data('scenario');
                if(count == scenario){
                    tmp.attr({"min": celsiusToFahrenheit(tmp.attr("min")), "max":celsiusToFahrenheit(tmp.attr("max"))});
                    tmp.val(celsiusToFahrenheit(tmp.val()));
                }
            });
        }
    }
    $('.selectpicker').selectpicker('refresh');
    var scenarioSelected = $('#scenarioSelected').val();
    $('a.faceArk[data-scenario="'+ scenarioSelected +'"]').click();
}, facearkGet = function (config) {
    for (const j in config){
        var count = parseInt(j) +1;
        Object.keys(config[j]).forEach(function(key) {
            var input = $('[data-id="' + key + '"][data-scenario="' + count + '"]');
            if (input.length > 0) {
                config[j][key] = getInput(input);
            }
        });
        var unit = $('[data-id="bodyTemperatureMeasurementDegreeUnit"][data-scenario="'+ count +'"]').val();
        if(unit === '1'){
            $('.temp').each(function () {
                var tmp = $(this), scenario = tmp.data('scenario'), id = tmp.data('id');
                if(count == scenario) config[j][id] = fahrenheitToCelsius(config[j][id]);
            });
        }
    }
    return config;
}, celsiusToFahrenheit = function (degree) {
    return Math.round(((degree*9/5)+32) * 100) / 100
}, fahrenheitToCelsius = function (degree) {
    return Math.round(((degree-32)*5/9) * 100) / 100
} ;

$(document).ready(function () {
    $('.overflow-auto').height($(window).height() * 0.75);
    $('#deviceConfig').height($(window).height() * 0.75);
    deviceList();
    loading(0);

    $(document).on('click', '.device', function () {
        $('.device').css('background-color', 'transparent');
        $(this).css('background-color', 'lightyellow');
        ajax('PUT', '/agent/api', data_format('/api/device?id='+$(this).data('id'), 0, 'GET', {}, null), function (a) {
            if (!a.error){
                var type = '';
                $('.nav-type').css('display', 'none');
                $('#deviceId').val(a.id);
                $('#deviceName').val(a.info.name);
                $('#deviceDescription').val(a.info.description);
                $('#device_index').click();

                for(const i in a.configs){
                    var config = a.configs[i];
                    switch (config.type) {
                        case "status":
                            $('#status_tab').css('display', 'inline-block');
                            $('.status').css('display','none');
                            Object.keys(config).forEach(function(key) {
                                $('#status_'+key).css('display', 'block');
                                if(config[key]) $('#status_'+key+" [class*=statusContent]").html('<i class="fas fa-times-circle fa-2x text-danger"></i>');
                                else $('#status_'+key+" [class*=statusContent]").html('<i class="fas fa-check-circle fa-2x text-success"></i>');
                            });
                            break;

                        case "faceark":
                            $('#scenarioSelected').val(config.selectedPresetsOrdinal).selectpicker('refresh');
                            facearkUpdate(config.presets);
                            $('#FaceArk_tab').css('display', 'inline-block');
                            type += '<button type="button" class="btn btn-primary"> FaceArk <span class="badge badge-light">'+ config.versionCode +'</span></button>';
                            $('.slideBox').css('display','none');
                            $('.general').css('display','block');
                            break;
                    }
                }
                $('#deviceType').html(type);
                object.info = a.info;
                object.config = a.configs;
                object.id = a.id;
            }else
                $.growl.error({message: a.error});
        });
    });

    $('#hideList').on('click', function () {
        $('#List').toggle("slide", {direction: "left"});
        if(object.displayList)  {
            $('#deviceConfig').removeClass('col-6 col-sm-8');
            $('#deviceConfig').addClass('col-12');
            $(this).html('<i class="fas fa-angle-double-right"></i>');
        }else{
            $('#deviceConfig').removeClass('col-12');
            $('#deviceConfig').addClass('col-6 col-sm-8');
            $(this).html('<i class="fas fa-angle-double-left"></i>');
        }
        object.displayList = !object.displayList;
    });
    $('.title').on('click', function () {
        var target = $(this).data('target'), scenario = $(this).data('scenario');
        $('.'+target+'[data-scenario='+scenario+']').toggle("slide", {direction: "up"});
    });
    $('[id^=condition_]*').on('click', function () {
        deviceList();
    });
    $('#device_keyword').keyup (function( event ) {
        var val = $('#device_keyword').val().trim();
        $('.device').hide();
        $('.device:contains('+val+')').show();
    });
    $('#deviceSave').on('click', function () {
        var btn = $(this), data = {'id': object.id};
        if(object.id){
            btn.button('loading');
            data['name'] = $('#deviceName').val();
            data['description'] = $('#deviceDescription').val();
            ajax('PUT', '/agent/api', data_format('/api/device', 0, 'PUT', data, null), function (a) {
                btn.button('reset');
                if(!a.error){
                    $.growl.notice({message: langDict.wasModified});
                    object.info.name =  data['name'];
                    object.info.description = data['description'];
                    var content = drawList(object.id, object.info);
                    $('.device[data-id='+ object.id +']').html(content);
                }else
                    $.growl.error({message: a.error});
            });
        }else
            $.growl.warning({message: langDict['noneSelectedDevice']});
    });
    $('.save').on('click', function () {
        var btn = $(this), target = btn.data('target');
        btn.button('loading');

        var data = {'udid': object.id};
        switch (target) {
            case "faceArk":
                object.config.faceark.presets = facearkGet(object.config.faceark.presets);
                object.config.faceark.selectedPresetsOrdinal = parseInt($('#scenarioSelected').val());
                data['type'] = 'faceark';
                data['config'] = object.config.faceark;
                break;
        }

        ajax('PUT', '/agent/api', data_format('/api/device/config', 0, 'PUT', data, null), function (a) {
            if(!a.error){
                $.growl.notice({message: langDict.wasModified});
                facearkUpdate(object.config.faceark.presets);
                btn.button('reset');
            }else
                $.growl.error({message: a.error});
        });
    });
    $('.reset').on('click', function () {
        var btn = $(this), target = btn.data('target');
        bootbox.confirm({
            'title': langDict.aruYouSure,
            'message': langDict.willResetThisScenario,
            'buttons': {
                'cancel': {'label': '<i class="fa fa-times"></i> ' + langDict.cancel},
                'confirm': {'label': '<i class="fa fa-check"></i> ' + langDict.apply}
            },
            'callback': function (confirm) {
                if (confirm) {
                    btn.button('loading');

                    switch (target) {
                        case "faceArk":
                            var scenario = btn.data('scenario') - 1, defaultConfig = getDefault("faceark");
                            object.config.faceark.presets[scenario] = defaultConfig[scenario];
                            facearkUpdate(object.config.faceark.presets);
                            $('.save[data-target="faceArk"]').click();
                            break;
                    }
                }
            }
        });
    });

    $('#scenarioSelected').on('change', function () {
        var scenarioSelected = $(this).val();
        $('a.faceArk[data-scenario="'+ scenarioSelected +'"]').click();
    });
    $('[data-id="bodyTemperatureMeasurementDegreeUnit"]').on('change', function () {
        var unit = $(this).val(), scenarioTarget = $(this).data('scenario');
        $('.temp').each(function () {
            var tmp = $(this), scenario = tmp.data('scenario');
            if(scenarioTarget == scenario){
                if(unit == '1'){
                    tmp.attr({"min": celsiusToFahrenheit(tmp.attr("min")), "max":celsiusToFahrenheit(tmp.attr("max"))});
                    tmp.val(celsiusToFahrenheit(tmp.val()));
                }else{
                    tmp.attr({"min": fahrenheitToCelsius(tmp.attr("min")), "max":fahrenheitToCelsius(tmp.attr("max"))});
                    tmp.val(fahrenheitToCelsius(tmp.val()));
                }
            }
        });
    });
});